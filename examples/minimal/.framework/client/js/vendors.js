(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["vendors"],{

/***/ "../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js":
/*!*****************************************************************************************************************************!*\
  !*** /Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js ***!
  \*****************************************************************************************************************************/
/*! exports provided: ITERATE_KEY, computed, customRef, effect, enableTracking, isProxy, isReactive, isReadonly, isRef, markRaw, pauseTracking, proxyRefs, reactive, readonly, ref, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, toRef, toRefs, track, trigger, triggerRef, unref */
/*! exports used: computed, effect, isProxy, isReactive, isRef, pauseTracking, proxyRefs, reactive, ref, resetTracking, shallowReactive, shallowReadonly, shallowRef, stop, toRaw, track, trigger, unref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export ITERATE_KEY */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return computed; });\n/* unused harmony export customRef */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return effect; });\n/* unused harmony export enableTracking */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return isProxy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return isReactive; });\n/* unused harmony export isReadonly */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return isRef; });\n/* unused harmony export markRaw */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return pauseTracking; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return proxyRefs; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return reactive; });\n/* unused harmony export readonly */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return resetTracking; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return shallowReactive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return shallowReadonly; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return shallowRef; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return stop; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return toRaw; });\n/* unused harmony export toRef */\n/* unused harmony export toRefs */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return track; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return trigger; });\n/* unused harmony export triggerRef */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return unref; });\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/shared */ \"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n\nconst targetMap = new WeakMap();\nconst effectStack = [];\nlet activeEffect;\nconst ITERATE_KEY = Symbol( true ? 'iterate' : undefined);\nconst MAP_KEY_ITERATE_KEY = Symbol( true ? 'Map key iterate' : undefined);\n\nfunction isEffect(fn) {\n  return fn && fn._isEffect === true;\n}\n\nfunction effect(fn, options = _vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* EMPTY_OBJ */ \"b\"]) {\n  if (isEffect(fn)) {\n    fn = fn.raw;\n  }\n\n  const effect = createReactiveEffect(fn, options);\n\n  if (!options.lazy) {\n    effect();\n  }\n\n  return effect;\n}\n\nfunction stop(effect) {\n  if (effect.active) {\n    cleanup(effect);\n\n    if (effect.options.onStop) {\n      effect.options.onStop();\n    }\n\n    effect.active = false;\n  }\n}\n\nlet uid = 0;\n\nfunction createReactiveEffect(fn, options) {\n  const effect = function reactiveEffect() {\n    if (!effect.active) {\n      return options.scheduler ? undefined : fn();\n    }\n\n    if (!effectStack.includes(effect)) {\n      cleanup(effect);\n\n      try {\n        enableTracking();\n        effectStack.push(effect);\n        activeEffect = effect;\n        return fn();\n      } finally {\n        effectStack.pop();\n        resetTracking();\n        activeEffect = effectStack[effectStack.length - 1];\n      }\n    }\n  };\n\n  effect.id = uid++;\n  effect._isEffect = true;\n  effect.active = true;\n  effect.raw = fn;\n  effect.deps = [];\n  effect.options = options;\n  return effect;\n}\n\nfunction cleanup(effect) {\n  const {\n    deps\n  } = effect;\n\n  if (deps.length) {\n    for (let i = 0; i < deps.length; i++) {\n      deps[i].delete(effect);\n    }\n\n    deps.length = 0;\n  }\n}\n\nlet shouldTrack = true;\nconst trackStack = [];\n\nfunction pauseTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = false;\n}\n\nfunction enableTracking() {\n  trackStack.push(shouldTrack);\n  shouldTrack = true;\n}\n\nfunction resetTracking() {\n  const last = trackStack.pop();\n  shouldTrack = last === undefined ? true : last;\n}\n\nfunction track(target, type, key) {\n  if (!shouldTrack || activeEffect === undefined) {\n    return;\n  }\n\n  let depsMap = targetMap.get(target);\n\n  if (!depsMap) {\n    targetMap.set(target, depsMap = new Map());\n  }\n\n  let dep = depsMap.get(key);\n\n  if (!dep) {\n    depsMap.set(key, dep = new Set());\n  }\n\n  if (!dep.has(activeEffect)) {\n    dep.add(activeEffect);\n    activeEffect.deps.push(dep);\n\n    if ( true && activeEffect.options.onTrack) {\n      activeEffect.options.onTrack({\n        effect: activeEffect,\n        target,\n        type,\n        key\n      });\n    }\n  }\n}\n\nfunction trigger(target, type, key, newValue, oldValue, oldTarget) {\n  const depsMap = targetMap.get(target);\n\n  if (!depsMap) {\n    // never been tracked\n    return;\n  }\n\n  const effects = new Set();\n\n  const add = effectsToAdd => {\n    if (effectsToAdd) {\n      effectsToAdd.forEach(effect => effects.add(effect));\n    }\n  };\n\n  if (type === \"clear\"\n  /* CLEAR */\n  ) {\n      // collection being cleared\n      // trigger all effects for target\n      depsMap.forEach(add);\n    } else if (key === 'length' && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isArray */ \"n\"])(target)) {\n    depsMap.forEach((dep, key) => {\n      if (key === 'length' || key >= newValue) {\n        add(dep);\n      }\n    });\n  } else {\n    // schedule runs for SET | ADD | DELETE\n    if (key !== void 0) {\n      add(depsMap.get(key));\n    } // also run for iteration key on ADD | DELETE | Map.SET\n\n\n    const isAddOrDelete = type === \"add\"\n    /* ADD */\n    || type === \"delete\"\n    /* DELETE */\n    && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isArray */ \"n\"])(target);\n\n    if (isAddOrDelete || type === \"set\"\n    /* SET */\n    && target instanceof Map) {\n      add(depsMap.get(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isArray */ \"n\"])(target) ? 'length' : ITERATE_KEY));\n    }\n\n    if (isAddOrDelete && target instanceof Map) {\n      add(depsMap.get(MAP_KEY_ITERATE_KEY));\n    }\n  }\n\n  const run = effect => {\n    if ( true && effect.options.onTrigger) {\n      effect.options.onTrigger({\n        effect,\n        target,\n        key,\n        type,\n        newValue,\n        oldValue,\n        oldTarget\n      });\n    }\n\n    if (effect.options.scheduler) {\n      effect.options.scheduler(effect);\n    } else {\n      effect();\n    }\n  };\n\n  effects.forEach(run);\n}\n\nconst builtInSymbols = new Set(Object.getOwnPropertyNames(Symbol).map(key => Symbol[key]).filter(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isSymbol */ \"z\"]));\nconst get = /*#__PURE__*/createGetter();\nconst shallowGet = /*#__PURE__*/createGetter(false, true);\nconst readonlyGet = /*#__PURE__*/createGetter(true);\nconst shallowReadonlyGet = /*#__PURE__*/createGetter(true, true);\nconst arrayInstrumentations = {};\n['includes', 'indexOf', 'lastIndexOf'].forEach(key => {\n  arrayInstrumentations[key] = function (...args) {\n    const arr = toRaw(this);\n\n    for (let i = 0, l = this.length; i < l; i++) {\n      track(arr, \"get\"\n      /* GET */\n      , i + '');\n    } // we run the method using the original args first (which may be reactive)\n\n\n    const res = arr[key](...args);\n\n    if (res === -1 || res === false) {\n      // if that didn't work, run it again using raw values.\n      return arr[key](...args.map(toRaw));\n    } else {\n      return res;\n    }\n  };\n});\n\nfunction createGetter(isReadonly = false, shallow = false) {\n  return function get(target, key, receiver) {\n    if (key === \"__v_isReactive\"\n    /* IS_REACTIVE */\n    ) {\n        return !isReadonly;\n      } else if (key === \"__v_isReadonly\"\n    /* IS_READONLY */\n    ) {\n        return isReadonly;\n      } else if (key === \"__v_raw\"\n    /* RAW */\n    && receiver === (isReadonly ? target[\"__v_readonly\"\n    /* READONLY */\n    ] : target[\"__v_reactive\"\n    /* REACTIVE */\n    ])) {\n      return target;\n    }\n\n    const targetIsArray = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isArray */ \"n\"])(target);\n\n    if (targetIsArray && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasOwn */ \"k\"])(arrayInstrumentations, key)) {\n      return Reflect.get(arrayInstrumentations, key, receiver);\n    }\n\n    const res = Reflect.get(target, key, receiver);\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isSymbol */ \"z\"])(key) ? builtInSymbols.has(key) : key === `__proto__` || key === `__v_isRef`) {\n      return res;\n    }\n\n    if (!isReadonly) {\n      track(target, \"get\"\n      /* GET */\n      , key);\n    }\n\n    if (shallow) {\n      return res;\n    }\n\n    if (isRef(res)) {\n      // ref unwrapping, only for Objects, not for Arrays.\n      return targetIsArray ? res : res.value;\n    }\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isObject */ \"s\"])(res)) {\n      // Convert returned value into a proxy as well. we do the isObject check\n      // here to avoid invalid value warning. Also need to lazy access readonly\n      // and reactive here to avoid circular dependency.\n      return isReadonly ? readonly(res) : reactive(res);\n    }\n\n    return res;\n  };\n}\n\nconst set = /*#__PURE__*/createSetter();\nconst shallowSet = /*#__PURE__*/createSetter(true);\n\nfunction createSetter(shallow = false) {\n  return function set(target, key, value, receiver) {\n    const oldValue = target[key];\n\n    if (!shallow) {\n      value = toRaw(value);\n\n      if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isArray */ \"n\"])(target) && isRef(oldValue) && !isRef(value)) {\n        oldValue.value = value;\n        return true;\n      }\n    }\n\n    const hadKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasOwn */ \"k\"])(target, key);\n    const result = Reflect.set(target, key, value, receiver); // don't trigger if target is something up in the prototype chain of original\n\n    if (target === toRaw(receiver)) {\n      if (!hadKey) {\n        trigger(target, \"add\"\n        /* ADD */\n        , key, value);\n      } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasChanged */ \"j\"])(value, oldValue)) {\n        trigger(target, \"set\"\n        /* SET */\n        , key, value, oldValue);\n      }\n    }\n\n    return result;\n  };\n}\n\nfunction deleteProperty(target, key) {\n  const hadKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasOwn */ \"k\"])(target, key);\n  const oldValue = target[key];\n  const result = Reflect.deleteProperty(target, key);\n\n  if (result && hadKey) {\n    trigger(target, \"delete\"\n    /* DELETE */\n    , key, undefined, oldValue);\n  }\n\n  return result;\n}\n\nfunction has(target, key) {\n  const result = Reflect.has(target, key);\n\n  if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isSymbol */ \"z\"])(key) || !builtInSymbols.has(key)) {\n    track(target, \"has\"\n    /* HAS */\n    , key);\n  }\n\n  return result;\n}\n\nfunction ownKeys(target) {\n  track(target, \"iterate\"\n  /* ITERATE */\n  , ITERATE_KEY);\n  return Reflect.ownKeys(target);\n}\n\nconst mutableHandlers = {\n  get,\n  set,\n  deleteProperty,\n  has,\n  ownKeys\n};\nconst readonlyHandlers = {\n  get: readonlyGet,\n  has,\n  ownKeys,\n\n  set(target, key) {\n    if (true) {\n      console.warn(`Set operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n\n    return true;\n  },\n\n  deleteProperty(target, key) {\n    if (true) {\n      console.warn(`Delete operation on key \"${String(key)}\" failed: target is readonly.`, target);\n    }\n\n    return true;\n  }\n\n};\nconst shallowReactiveHandlers = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* extend */ \"h\"])({}, mutableHandlers, {\n  get: shallowGet,\n  set: shallowSet\n}); // Props handlers are special in the sense that it should not unwrap top-level\n// refs (in order to allow refs to be explicitly passed down), but should\n// retain the reactivity of the normal readonly object.\n\nconst shallowReadonlyHandlers = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* extend */ \"h\"])({}, readonlyHandlers, {\n  get: shallowReadonlyGet\n});\n\nconst toReactive = value => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isObject */ \"s\"])(value) ? reactive(value) : value;\n\nconst toReadonly = value => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isObject */ \"s\"])(value) ? readonly(value) : value;\n\nconst toShallow = value => value;\n\nconst getProto = v => Reflect.getPrototypeOf(v);\n\nfunction get$1(target, key, wrap) {\n  target = toRaw(target);\n  const rawKey = toRaw(key);\n\n  if (key !== rawKey) {\n    track(target, \"get\"\n    /* GET */\n    , key);\n  }\n\n  track(target, \"get\"\n  /* GET */\n  , rawKey);\n  const {\n    has,\n    get\n  } = getProto(target);\n\n  if (has.call(target, key)) {\n    return wrap(get.call(target, key));\n  } else if (has.call(target, rawKey)) {\n    return wrap(get.call(target, rawKey));\n  }\n}\n\nfunction has$1(key) {\n  const target = toRaw(this);\n  const rawKey = toRaw(key);\n\n  if (key !== rawKey) {\n    track(target, \"has\"\n    /* HAS */\n    , key);\n  }\n\n  track(target, \"has\"\n  /* HAS */\n  , rawKey);\n  const has = getProto(target).has;\n  return has.call(target, key) || has.call(target, rawKey);\n}\n\nfunction size(target) {\n  target = toRaw(target);\n  track(target, \"iterate\"\n  /* ITERATE */\n  , ITERATE_KEY);\n  return Reflect.get(getProto(target), 'size', target);\n}\n\nfunction add(value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const proto = getProto(target);\n  const hadKey = proto.has.call(target, value);\n  const result = proto.add.call(target, value);\n\n  if (!hadKey) {\n    trigger(target, \"add\"\n    /* ADD */\n    , value, value);\n  }\n\n  return result;\n}\n\nfunction set$1(key, value) {\n  value = toRaw(value);\n  const target = toRaw(this);\n  const {\n    has,\n    get,\n    set\n  } = getProto(target);\n  let hadKey = has.call(target, key);\n\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has, key);\n  }\n\n  const oldValue = get.call(target, key);\n  const result = set.call(target, key, value);\n\n  if (!hadKey) {\n    trigger(target, \"add\"\n    /* ADD */\n    , key, value);\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasChanged */ \"j\"])(value, oldValue)) {\n    trigger(target, \"set\"\n    /* SET */\n    , key, value, oldValue);\n  }\n\n  return result;\n}\n\nfunction deleteEntry(key) {\n  const target = toRaw(this);\n  const {\n    has,\n    get,\n    delete: del\n  } = getProto(target);\n  let hadKey = has.call(target, key);\n\n  if (!hadKey) {\n    key = toRaw(key);\n    hadKey = has.call(target, key);\n  } else if (true) {\n    checkIdentityKeys(target, has, key);\n  }\n\n  const oldValue = get ? get.call(target, key) : undefined; // forward the operation before queueing reactions\n\n  const result = del.call(target, key);\n\n  if (hadKey) {\n    trigger(target, \"delete\"\n    /* DELETE */\n    , key, undefined, oldValue);\n  }\n\n  return result;\n}\n\nfunction clear() {\n  const target = toRaw(this);\n  const hadItems = target.size !== 0;\n  const oldTarget =  true ? target instanceof Map ? new Map(target) : new Set(target) : undefined; // forward the operation before queueing reactions\n\n  const result = getProto(target).clear.call(target);\n\n  if (hadItems) {\n    trigger(target, \"clear\"\n    /* CLEAR */\n    , undefined, undefined, oldTarget);\n  }\n\n  return result;\n}\n\nfunction createForEach(isReadonly, shallow) {\n  return function forEach(callback, thisArg) {\n    const observed = this;\n    const target = toRaw(observed);\n    const wrap = isReadonly ? toReadonly : shallow ? toShallow : toReactive;\n    !isReadonly && track(target, \"iterate\"\n    /* ITERATE */\n    , ITERATE_KEY); // important: create sure the callback is\n    // 1. invoked with the reactive map as `this` and 3rd arg\n    // 2. the value received should be a corresponding reactive/readonly.\n\n    function wrappedCallback(value, key) {\n      return callback.call(thisArg, wrap(value), wrap(key), observed);\n    }\n\n    return getProto(target).forEach.call(target, wrappedCallback);\n  };\n}\n\nfunction createIterableMethod(method, isReadonly, shallow) {\n  return function (...args) {\n    const target = toRaw(this);\n    const isMap = target instanceof Map;\n    const isPair = method === 'entries' || method === Symbol.iterator && isMap;\n    const isKeyOnly = method === 'keys' && isMap;\n    const innerIterator = getProto(target)[method].apply(target, args);\n    const wrap = isReadonly ? toReadonly : shallow ? toShallow : toReactive;\n    !isReadonly && track(target, \"iterate\"\n    /* ITERATE */\n    , isKeyOnly ? MAP_KEY_ITERATE_KEY : ITERATE_KEY); // return a wrapped iterator which returns observed versions of the\n    // values emitted from the real iterator\n\n    return {\n      // iterator protocol\n      next() {\n        const {\n          value,\n          done\n        } = innerIterator.next();\n        return done ? {\n          value,\n          done\n        } : {\n          value: isPair ? [wrap(value[0]), wrap(value[1])] : wrap(value),\n          done\n        };\n      },\n\n      // iterable protocol\n      [Symbol.iterator]() {\n        return this;\n      }\n\n    };\n  };\n}\n\nfunction createReadonlyMethod(type) {\n  return function (...args) {\n    if (true) {\n      const key = args[0] ? `on key \"${args[0]}\" ` : ``;\n      console.warn(`${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* capitalize */ \"f\"])(type)} operation ${key}failed: target is readonly.`, toRaw(this));\n    }\n\n    return type === \"delete\"\n    /* DELETE */\n    ? false : this;\n  };\n}\n\nconst mutableInstrumentations = {\n  get(key) {\n    return get$1(this, key, toReactive);\n  },\n\n  get size() {\n    return size(this);\n  },\n\n  has: has$1,\n  add,\n  set: set$1,\n  delete: deleteEntry,\n  clear,\n  forEach: createForEach(false, false)\n};\nconst shallowInstrumentations = {\n  get(key) {\n    return get$1(this, key, toShallow);\n  },\n\n  get size() {\n    return size(this);\n  },\n\n  has: has$1,\n  add,\n  set: set$1,\n  delete: deleteEntry,\n  clear,\n  forEach: createForEach(false, true)\n};\nconst readonlyInstrumentations = {\n  get(key) {\n    return get$1(this, key, toReadonly);\n  },\n\n  get size() {\n    return size(this);\n  },\n\n  has: has$1,\n  add: createReadonlyMethod(\"add\"\n  /* ADD */\n  ),\n  set: createReadonlyMethod(\"set\"\n  /* SET */\n  ),\n  delete: createReadonlyMethod(\"delete\"\n  /* DELETE */\n  ),\n  clear: createReadonlyMethod(\"clear\"\n  /* CLEAR */\n  ),\n  forEach: createForEach(true, false)\n};\nconst iteratorMethods = ['keys', 'values', 'entries', Symbol.iterator];\niteratorMethods.forEach(method => {\n  mutableInstrumentations[method] = createIterableMethod(method, false, false);\n  readonlyInstrumentations[method] = createIterableMethod(method, true, false);\n  shallowInstrumentations[method] = createIterableMethod(method, false, true);\n});\n\nfunction createInstrumentationGetter(isReadonly, shallow) {\n  const instrumentations = shallow ? shallowInstrumentations : isReadonly ? readonlyInstrumentations : mutableInstrumentations;\n  return (target, key, receiver) => {\n    if (key === \"__v_isReactive\"\n    /* IS_REACTIVE */\n    ) {\n        return !isReadonly;\n      } else if (key === \"__v_isReadonly\"\n    /* IS_READONLY */\n    ) {\n        return isReadonly;\n      } else if (key === \"__v_raw\"\n    /* RAW */\n    ) {\n        return target;\n      }\n\n    return Reflect.get(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasOwn */ \"k\"])(instrumentations, key) && key in target ? instrumentations : target, key, receiver);\n  };\n}\n\nconst mutableCollectionHandlers = {\n  get: createInstrumentationGetter(false, false)\n};\nconst shallowCollectionHandlers = {\n  get: createInstrumentationGetter(false, true)\n};\nconst readonlyCollectionHandlers = {\n  get: createInstrumentationGetter(true, false)\n};\n\nfunction checkIdentityKeys(target, has, key) {\n  const rawKey = toRaw(key);\n\n  if (rawKey !== key && has.call(target, rawKey)) {\n    const type = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* toRawType */ \"I\"])(target);\n    console.warn(`Reactive ${type} contains both the raw and reactive ` + `versions of the same object${type === `Map` ? `as keys` : ``}, ` + `which can lead to inconsistencies. ` + `Avoid differentiating between the raw and reactive versions ` + `of an object and only use the reactive version if possible.`);\n  }\n}\n\nconst collectionTypes = new Set([Set, Map, WeakMap, WeakSet]);\nconst isObservableType = /*#__PURE__*/Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* makeMap */ \"C\"])('Object,Array,Map,Set,WeakMap,WeakSet');\n\nconst canObserve = value => {\n  return !value[\"__v_skip\"\n  /* SKIP */\n  ] && isObservableType(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* toRawType */ \"I\"])(value)) && !Object.isFrozen(value);\n};\n\nfunction reactive(target) {\n  // if trying to observe a readonly proxy, return the readonly version.\n  if (target && target[\"__v_isReadonly\"\n  /* IS_READONLY */\n  ]) {\n    return target;\n  }\n\n  return createReactiveObject(target, false, mutableHandlers, mutableCollectionHandlers);\n} // Return a reactive-copy of the original object, where only the root level\n// properties are reactive, and does NOT unwrap refs nor recursively convert\n// returned properties.\n\n\nfunction shallowReactive(target) {\n  return createReactiveObject(target, false, shallowReactiveHandlers, shallowCollectionHandlers);\n}\n\nfunction readonly(target) {\n  return createReactiveObject(target, true, readonlyHandlers, readonlyCollectionHandlers);\n} // Return a reactive-copy of the original object, where only the root level\n// properties are readonly, and does NOT unwrap refs nor recursively convert\n// returned properties.\n// This is used for creating the props proxy object for stateful components.\n\n\nfunction shallowReadonly(target) {\n  return createReactiveObject(target, true, shallowReadonlyHandlers, readonlyCollectionHandlers);\n}\n\nfunction createReactiveObject(target, isReadonly, baseHandlers, collectionHandlers) {\n  if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isObject */ \"s\"])(target)) {\n    if (true) {\n      console.warn(`value cannot be made reactive: ${String(target)}`);\n    }\n\n    return target;\n  } // target is already a Proxy, return it.\n  // exception: calling readonly() on a reactive object\n\n\n  if (target[\"__v_raw\"\n  /* RAW */\n  ] && !(isReadonly && target[\"__v_isReactive\"\n  /* IS_REACTIVE */\n  ])) {\n    return target;\n  } // target already has corresponding Proxy\n\n\n  const reactiveFlag = isReadonly ? \"__v_readonly\"\n  /* READONLY */\n  : \"__v_reactive\"\n  /* REACTIVE */\n  ;\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasOwn */ \"k\"])(target, reactiveFlag)) {\n    return target[reactiveFlag];\n  } // only a whitelist of value types can be observed.\n\n\n  if (!canObserve(target)) {\n    return target;\n  }\n\n  const observed = new Proxy(target, collectionTypes.has(target.constructor) ? collectionHandlers : baseHandlers);\n  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* def */ \"g\"])(target, reactiveFlag, observed);\n  return observed;\n}\n\nfunction isReactive(value) {\n  if (isReadonly(value)) {\n    return isReactive(value[\"__v_raw\"\n    /* RAW */\n    ]);\n  }\n\n  return !!(value && value[\"__v_isReactive\"\n  /* IS_REACTIVE */\n  ]);\n}\n\nfunction isReadonly(value) {\n  return !!(value && value[\"__v_isReadonly\"\n  /* IS_READONLY */\n  ]);\n}\n\nfunction isProxy(value) {\n  return isReactive(value) || isReadonly(value);\n}\n\nfunction toRaw(observed) {\n  return observed && toRaw(observed[\"__v_raw\"\n  /* RAW */\n  ]) || observed;\n}\n\nfunction markRaw(value) {\n  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* def */ \"g\"])(value, \"__v_skip\"\n  /* SKIP */\n  , true);\n  return value;\n}\n\nconst convert = val => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isObject */ \"s\"])(val) ? reactive(val) : val;\n\nfunction isRef(r) {\n  return r ? r.__v_isRef === true : false;\n}\n\nfunction ref(value) {\n  return createRef(value);\n}\n\nfunction shallowRef(value) {\n  return createRef(value, true);\n}\n\nfunction createRef(rawValue, shallow = false) {\n  if (isRef(rawValue)) {\n    return rawValue;\n  }\n\n  let value = shallow ? rawValue : convert(rawValue);\n  const r = {\n    __v_isRef: true,\n\n    get value() {\n      track(r, \"get\"\n      /* GET */\n      , 'value');\n      return value;\n    },\n\n    set value(newVal) {\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* hasChanged */ \"j\"])(toRaw(newVal), rawValue)) {\n        rawValue = newVal;\n        value = shallow ? newVal : convert(newVal);\n        trigger(r, \"set\"\n        /* SET */\n        , 'value', newVal);\n      }\n    }\n\n  };\n  return r;\n}\n\nfunction triggerRef(ref) {\n  trigger(ref, \"set\"\n  /* SET */\n  , 'value',  true ? ref.value : undefined);\n}\n\nfunction unref(ref) {\n  return isRef(ref) ? ref.value : ref;\n}\n\nconst shallowUnwrapHandlers = {\n  get: (target, key, receiver) => unref(Reflect.get(target, key, receiver)),\n  set: (target, key, value, receiver) => {\n    const oldValue = target[key];\n\n    if (isRef(oldValue) && !isRef(value)) {\n      oldValue.value = value;\n      return true;\n    } else {\n      return Reflect.set(target, key, value, receiver);\n    }\n  }\n};\n\nfunction proxyRefs(objectWithRefs) {\n  return isReactive(objectWithRefs) ? objectWithRefs : new Proxy(objectWithRefs, shallowUnwrapHandlers);\n}\n\nfunction customRef(factory) {\n  const {\n    get,\n    set\n  } = factory(() => track(r, \"get\"\n  /* GET */\n  , 'value'), () => trigger(r, \"set\"\n  /* SET */\n  , 'value'));\n  const r = {\n    __v_isRef: true,\n\n    get value() {\n      return get();\n    },\n\n    set value(v) {\n      set(v);\n    }\n\n  };\n  return r;\n}\n\nfunction toRefs(object) {\n  if ( true && !isProxy(object)) {\n    console.warn(`toRefs() expects a reactive object but received a plain one.`);\n  }\n\n  const ret = {};\n\n  for (const key in object) {\n    ret[key] = toRef(object, key);\n  }\n\n  return ret;\n}\n\nfunction toRef(object, key) {\n  return {\n    __v_isRef: true,\n\n    get value() {\n      return object[key];\n    },\n\n    set value(newVal) {\n      object[key] = newVal;\n    }\n\n  };\n}\n\nfunction computed(getterOrOptions) {\n  let getter;\n  let setter;\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ \"o\"])(getterOrOptions)) {\n    getter = getterOrOptions;\n    setter =  true ? () => {\n      console.warn('Write operation failed: computed value is readonly');\n    } : undefined;\n  } else {\n    getter = getterOrOptions.get;\n    setter = getterOrOptions.set;\n  }\n\n  let dirty = true;\n  let value;\n  let computed;\n  const runner = effect(getter, {\n    lazy: true,\n    scheduler: () => {\n      if (!dirty) {\n        dirty = true;\n        trigger(computed, \"set\"\n        /* SET */\n        , 'value');\n      }\n    }\n  });\n  computed = {\n    __v_isRef: true,\n    [\"__v_isReadonly\"\n    /* IS_READONLY */\n    ]: Object(_vue_shared__WEBPACK_IMPORTED_MODULE_0__[/* isFunction */ \"o\"])(getterOrOptions) || !getterOrOptions.set,\n    // expose effect so computed can be stopped\n    effect: runner,\n\n    get value() {\n      if (dirty) {\n        value = runner();\n        dirty = false;\n      }\n\n      track(computed, \"get\"\n      /* GET */\n      , 'value');\n      return value;\n    },\n\n    set value(newValue) {\n      setter(newValue);\n    }\n\n  };\n  return computed;\n}\n\n\n\n//# sourceURL=webpack:////Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js?");

/***/ }),

/***/ "../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js":
/*!*********************************************************************************************************************************!*\
  !*** /Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js ***!
  \*********************************************************************************************************************************/
/*! exports provided: customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, camelize, capitalize, toDisplayString, BaseTransition, Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, inject, isVNode, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useSSRContext, useTransitionState, version, warn, watch, watchEffect, withCtx, withDirectives, withScopeId */
/*! exports used: BaseTransition, Fragment, callWithAsyncErrorHandling, camelize, computed, createBlock, createHydrationRenderer, createRenderer, createTextVNode, createVNode, defineComponent, getCurrentInstance, getTransitionRawChildren, h, inject, nextTick, onMounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, reactive, ref, resolveComponent, resolveTransitionHooks, setDevtoolsHook, setTransitionHooks, shallowRef, toDisplayString, unref, useTransitionState, warn, watchEffect, withScopeId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return BaseTransition; });\n/* unused harmony export Comment */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return Fragment; });\n/* unused harmony export KeepAlive */\n/* unused harmony export Static */\n/* unused harmony export Suspense */\n/* unused harmony export Teleport */\n/* unused harmony export Text */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return callWithAsyncErrorHandling; });\n/* unused harmony export callWithErrorHandling */\n/* unused harmony export cloneVNode */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return computed; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return createBlock; });\n/* unused harmony export createCommentVNode */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return createHydrationRenderer; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return createRenderer; });\n/* unused harmony export createSlots */\n/* unused harmony export createStaticVNode */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return createTextVNode; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return createVNode; });\n/* unused harmony export defineAsyncComponent */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return defineComponent; });\n/* unused harmony export devtools */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return getCurrentInstance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return getTransitionRawChildren; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return h; });\n/* unused harmony export handleError */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return inject; });\n/* unused harmony export isVNode */\n/* unused harmony export mergeProps */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return nextTick; });\n/* unused harmony export onActivated */\n/* unused harmony export onBeforeMount */\n/* unused harmony export onBeforeUnmount */\n/* unused harmony export onBeforeUpdate */\n/* unused harmony export onDeactivated */\n/* unused harmony export onErrorCaptured */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return onMounted; });\n/* unused harmony export onRenderTracked */\n/* unused harmony export onRenderTriggered */\n/* unused harmony export onUnmounted */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return onUpdated; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return openBlock; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return popScopeId; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return provide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return pushScopeId; });\n/* unused harmony export queuePostFlushCb */\n/* unused harmony export registerRuntimeCompiler */\n/* unused harmony export renderList */\n/* unused harmony export renderSlot */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return resolveComponent; });\n/* unused harmony export resolveDirective */\n/* unused harmony export resolveDynamicComponent */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return resolveTransitionHooks; });\n/* unused harmony export setBlockTracking */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return setDevtoolsHook; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return setTransitionHooks; });\n/* unused harmony export ssrContextKey */\n/* unused harmony export ssrUtils */\n/* unused harmony export toHandlers */\n/* unused harmony export transformVNodeArgs */\n/* unused harmony export useSSRContext */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"F\", function() { return useTransitionState; });\n/* unused harmony export version */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"G\", function() { return warn; });\n/* unused harmony export watch */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"H\", function() { return watchEffect; });\n/* unused harmony export withCtx */\n/* unused harmony export withDirectives */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"I\", function() { return withScopeId; });\n/* harmony import */ var _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/reactivity */ \"../../node_modules/@vue/reactivity/dist/reactivity.esm-bundler.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[\"h\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[\"i\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[\"m\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"E\", function() { return _vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[\"r\"]; });\n\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ \"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return _vue_shared__WEBPACK_IMPORTED_MODULE_1__[\"e\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return _vue_shared__WEBPACK_IMPORTED_MODULE_1__[\"G\"]; });\n\n\n\n\n\nconst stack = [];\n\nfunction pushWarningContext(vnode) {\n  stack.push(vnode);\n}\n\nfunction popWarningContext() {\n  stack.pop();\n}\n\nfunction warn(msg, ...args) {\n  // avoid props formatting or warn handler tracking deps that might be mutated\n  // during patch, leading to infinite recursion.\n  Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* pauseTracking */ \"f\"])();\n  const instance = stack.length ? stack[stack.length - 1].component : null;\n  const appWarnHandler = instance && instance.appContext.config.warnHandler;\n  const trace = getComponentTrace();\n\n  if (appWarnHandler) {\n    callWithErrorHandling(appWarnHandler, instance, 11\n    /* APP_WARN_HANDLER */\n    , [msg + args.join(''), instance && instance.proxy, trace.map(({\n      vnode\n    }) => `at <${formatComponentName(instance, vnode.type)}>`).join('\\n'), trace]);\n  } else {\n    const warnArgs = [`[Vue warn]: ${msg}`, ...args];\n    /* istanbul ignore if */\n\n    if (trace.length && // avoid spamming console during tests\n    !false) {\n      warnArgs.push(`\\n`, ...formatTrace(trace));\n    }\n\n    console.warn(...warnArgs);\n  }\n\n  Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* resetTracking */ \"j\"])();\n}\n\nfunction getComponentTrace() {\n  let currentVNode = stack[stack.length - 1];\n\n  if (!currentVNode) {\n    return [];\n  } // we can't just use the stack because it will be incomplete during updates\n  // that did not start from the root. Re-construct the parent chain using\n  // instance parent pointers.\n\n\n  const normalizedStack = [];\n\n  while (currentVNode) {\n    const last = normalizedStack[0];\n\n    if (last && last.vnode === currentVNode) {\n      last.recurseCount++;\n    } else {\n      normalizedStack.push({\n        vnode: currentVNode,\n        recurseCount: 0\n      });\n    }\n\n    const parentInstance = currentVNode.component && currentVNode.component.parent;\n    currentVNode = parentInstance && parentInstance.vnode;\n  }\n\n  return normalizedStack;\n}\n/* istanbul ignore next */\n\n\nfunction formatTrace(trace) {\n  const logs = [];\n  trace.forEach((entry, i) => {\n    logs.push(...(i === 0 ? [] : [`\\n`]), ...formatTraceEntry(entry));\n  });\n  return logs;\n}\n\nfunction formatTraceEntry({\n  vnode,\n  recurseCount\n}) {\n  const postfix = recurseCount > 0 ? `... (${recurseCount} recursive calls)` : ``;\n  const isRoot = vnode.component ? vnode.component.parent == null : false;\n  const open = ` at <${formatComponentName(vnode.component, vnode.type, isRoot)}`;\n  const close = `>` + postfix;\n  return vnode.props ? [open, ...formatProps(vnode.props), close] : [open + close];\n}\n/* istanbul ignore next */\n\n\nfunction formatProps(props) {\n  const res = [];\n  const keys = Object.keys(props);\n  keys.slice(0, 3).forEach(key => {\n    res.push(...formatProp(key, props[key]));\n  });\n\n  if (keys.length > 3) {\n    res.push(` ...`);\n  }\n\n  return res;\n}\n/* istanbul ignore next */\n\n\nfunction formatProp(key, value, raw) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(value)) {\n    value = JSON.stringify(value);\n    return raw ? value : [`${key}=${value}`];\n  } else if (typeof value === 'number' || typeof value === 'boolean' || value == null) {\n    return raw ? value : [`${key}=${value}`];\n  } else if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isRef */ \"e\"])(value)) {\n    value = formatProp(key, Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(value.value), true);\n    return raw ? value : [`${key}=Ref<`, value, `>`];\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(value)) {\n    return [`${key}=fn${value.name ? `<${value.name}>` : ``}`];\n  } else {\n    value = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(value);\n    return raw ? value : [`${key}=`, value];\n  }\n}\n\nconst ErrorTypeStrings = {\n  [\"bc\"\n  /* BEFORE_CREATE */\n  ]: 'beforeCreate hook',\n  [\"c\"\n  /* CREATED */\n  ]: 'created hook',\n  [\"bm\"\n  /* BEFORE_MOUNT */\n  ]: 'beforeMount hook',\n  [\"m\"\n  /* MOUNTED */\n  ]: 'mounted hook',\n  [\"bu\"\n  /* BEFORE_UPDATE */\n  ]: 'beforeUpdate hook',\n  [\"u\"\n  /* UPDATED */\n  ]: 'updated',\n  [\"bum\"\n  /* BEFORE_UNMOUNT */\n  ]: 'beforeUnmount hook',\n  [\"um\"\n  /* UNMOUNTED */\n  ]: 'unmounted hook',\n  [\"a\"\n  /* ACTIVATED */\n  ]: 'activated hook',\n  [\"da\"\n  /* DEACTIVATED */\n  ]: 'deactivated hook',\n  [\"ec\"\n  /* ERROR_CAPTURED */\n  ]: 'errorCaptured hook',\n  [\"rtc\"\n  /* RENDER_TRACKED */\n  ]: 'renderTracked hook',\n  [\"rtg\"\n  /* RENDER_TRIGGERED */\n  ]: 'renderTriggered hook',\n  [0\n  /* SETUP_FUNCTION */\n  ]: 'setup function',\n  [1\n  /* RENDER_FUNCTION */\n  ]: 'render function',\n  [2\n  /* WATCH_GETTER */\n  ]: 'watcher getter',\n  [3\n  /* WATCH_CALLBACK */\n  ]: 'watcher callback',\n  [4\n  /* WATCH_CLEANUP */\n  ]: 'watcher cleanup function',\n  [5\n  /* NATIVE_EVENT_HANDLER */\n  ]: 'native event handler',\n  [6\n  /* COMPONENT_EVENT_HANDLER */\n  ]: 'component event handler',\n  [7\n  /* VNODE_HOOK */\n  ]: 'vnode hook',\n  [8\n  /* DIRECTIVE_HOOK */\n  ]: 'directive hook',\n  [9\n  /* TRANSITION_HOOK */\n  ]: 'transition hook',\n  [10\n  /* APP_ERROR_HANDLER */\n  ]: 'app errorHandler',\n  [11\n  /* APP_WARN_HANDLER */\n  ]: 'app warnHandler',\n  [12\n  /* FUNCTION_REF */\n  ]: 'ref function',\n  [13\n  /* ASYNC_COMPONENT_LOADER */\n  ]: 'async component loader',\n  [14\n  /* SCHEDULER */\n  ]: 'scheduler flush. This is likely a Vue internals bug. ' + 'Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-next'\n};\n\nfunction callWithErrorHandling(fn, instance, type, args) {\n  let res;\n\n  try {\n    res = args ? fn(...args) : fn();\n  } catch (err) {\n    handleError(err, instance, type);\n  }\n\n  return res;\n}\n\nfunction callWithAsyncErrorHandling(fn, instance, type, args) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(fn)) {\n    const res = callWithErrorHandling(fn, instance, type, args);\n\n    if (res && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isPromise */ \"u\"])(res)) {\n      res.catch(err => {\n        handleError(err, instance, type);\n      });\n    }\n\n    return res;\n  }\n\n  const values = [];\n\n  for (let i = 0; i < fn.length; i++) {\n    values.push(callWithAsyncErrorHandling(fn[i], instance, type, args));\n  }\n\n  return values;\n}\n\nfunction handleError(err, instance, type) {\n  const contextVNode = instance ? instance.vnode : null;\n\n  if (instance) {\n    let cur = instance.parent; // the exposed instance is the render proxy to keep it consistent with 2.x\n\n    const exposedInstance = instance.proxy; // in production the hook receives only the error code\n\n    const errorInfo =  true ? ErrorTypeStrings[type] : undefined;\n\n    while (cur) {\n      const errorCapturedHooks = cur.ec;\n\n      if (errorCapturedHooks) {\n        for (let i = 0; i < errorCapturedHooks.length; i++) {\n          if (errorCapturedHooks[i](err, exposedInstance, errorInfo)) {\n            return;\n          }\n        }\n      }\n\n      cur = cur.parent;\n    } // app-level handling\n\n\n    const appErrorHandler = instance.appContext.config.errorHandler;\n\n    if (appErrorHandler) {\n      callWithErrorHandling(appErrorHandler, null, 10\n      /* APP_ERROR_HANDLER */\n      , [err, exposedInstance, errorInfo]);\n      return;\n    }\n  }\n\n  logError(err, type, contextVNode);\n}\n\nfunction logError(err, type, contextVNode) {\n  if (true) {\n    const info = ErrorTypeStrings[type];\n\n    if (contextVNode) {\n      pushWarningContext(contextVNode);\n    }\n\n    warn(`Unhandled error${info ? ` during execution of ${info}` : ``}`);\n\n    if (contextVNode) {\n      popWarningContext();\n    } // crash in dev so it's more noticeable\n\n\n    throw err;\n  } else {}\n}\n\nconst queue = [];\nconst postFlushCbs = [];\nconst resolvedPromise = Promise.resolve();\nlet currentFlushPromise = null;\nlet isFlushing = false;\nlet isFlushPending = false;\nlet flushIndex = -1;\nlet pendingPostFlushCbs = null;\nlet pendingPostFlushIndex = 0;\nconst RECURSION_LIMIT = 100;\n\nfunction nextTick(fn) {\n  const p = currentFlushPromise || resolvedPromise;\n  return fn ? p.then(fn) : p;\n}\n\nfunction queueJob(job) {\n  if (!queue.includes(job, flushIndex + 1)) {\n    queue.push(job);\n    queueFlush();\n  }\n}\n\nfunction invalidateJob(job) {\n  const i = queue.indexOf(job);\n\n  if (i > -1) {\n    queue[i] = null;\n  }\n}\n\nfunction queuePostFlushCb(cb) {\n  if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(cb)) {\n    if (!pendingPostFlushCbs || !pendingPostFlushCbs.includes(cb, pendingPostFlushIndex + 1)) {\n      postFlushCbs.push(cb);\n    }\n  } else {\n    // if cb is an array, it is a component lifecycle hook which can only be\n    // triggered by a job, which is already deduped in the main queue, so\n    // we can skip dupicate check here to improve perf\n    postFlushCbs.push(...cb);\n  }\n\n  queueFlush();\n}\n\nfunction queueFlush() {\n  if (!isFlushing && !isFlushPending) {\n    isFlushPending = true;\n    currentFlushPromise = resolvedPromise.then(flushJobs);\n  }\n}\n\nfunction flushPostFlushCbs(seen) {\n  if (postFlushCbs.length) {\n    pendingPostFlushCbs = [...new Set(postFlushCbs)];\n    postFlushCbs.length = 0;\n\n    if (true) {\n      seen = seen || new Map();\n    }\n\n    for (pendingPostFlushIndex = 0; pendingPostFlushIndex < pendingPostFlushCbs.length; pendingPostFlushIndex++) {\n      if (true) {\n        checkRecursiveUpdates(seen, pendingPostFlushCbs[pendingPostFlushIndex]);\n      }\n\n      pendingPostFlushCbs[pendingPostFlushIndex]();\n    }\n\n    pendingPostFlushCbs = null;\n    pendingPostFlushIndex = 0;\n  }\n}\n\nconst getId = job => job.id == null ? Infinity : job.id;\n\nfunction flushJobs(seen) {\n  isFlushPending = false;\n  isFlushing = true;\n\n  if (true) {\n    seen = seen || new Map();\n  } // Sort queue before flush.\n  // This ensures that:\n  // 1. Components are updated from parent to child. (because parent is always\n  //    created before the child so its render effect will have smaller\n  //    priority number)\n  // 2. If a component is unmounted during a parent component's update,\n  //    its update can be skipped.\n  // Jobs can never be null before flush starts, since they are only invalidated\n  // during execution of another flushed job.\n\n\n  queue.sort((a, b) => getId(a) - getId(b));\n\n  for (flushIndex = 0; flushIndex < queue.length; flushIndex++) {\n    const job = queue[flushIndex];\n\n    if (job) {\n      if (true) {\n        checkRecursiveUpdates(seen, job);\n      }\n\n      callWithErrorHandling(job, null, 14\n      /* SCHEDULER */\n      );\n    }\n  }\n\n  flushIndex = -1;\n  queue.length = 0;\n  flushPostFlushCbs(seen);\n  isFlushing = false;\n  currentFlushPromise = null; // some postFlushCb queued jobs!\n  // keep flushing until it drains.\n\n  if (queue.length || postFlushCbs.length) {\n    flushJobs(seen);\n  }\n}\n\nfunction checkRecursiveUpdates(seen, fn) {\n  if (!seen.has(fn)) {\n    seen.set(fn, 1);\n  } else {\n    const count = seen.get(fn);\n\n    if (count > RECURSION_LIMIT) {\n      throw new Error('Maximum recursive updates exceeded. ' + \"You may have code that is mutating state in your component's \" + 'render function or updated hook or watcher source function.');\n    } else {\n      seen.set(fn, count + 1);\n    }\n  }\n}\n\nlet isHmrUpdating = false;\nconst hmrDirtyComponents = new Set(); // Expose the HMR runtime on the global object\n// This makes it entirely tree-shakable without polluting the exports and makes\n// it easier to be used in toolings like vue-loader\n// Note: for a component to be eligible for HMR it also needs the __hmrId option\n// to be set so that its instances can be registered / removed.\n\nif (true) {\n  const globalObject = typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : {};\n  globalObject.__VUE_HMR_RUNTIME__ = {\n    createRecord: tryWrap(createRecord),\n    rerender: tryWrap(rerender),\n    reload: tryWrap(reload)\n  };\n}\n\nconst map = new Map();\n\nfunction registerHMR(instance) {\n  const id = instance.type.__hmrId;\n  let record = map.get(id);\n\n  if (!record) {\n    createRecord(id);\n    record = map.get(id);\n  }\n\n  record.add(instance);\n}\n\nfunction unregisterHMR(instance) {\n  map.get(instance.type.__hmrId).delete(instance);\n}\n\nfunction createRecord(id) {\n  if (map.has(id)) {\n    return false;\n  }\n\n  map.set(id, new Set());\n  return true;\n}\n\nfunction rerender(id, newRender) {\n  const record = map.get(id);\n  if (!record) return; // Array.from creates a snapshot which avoids the set being mutated during\n  // updates\n\n  Array.from(record).forEach(instance => {\n    if (newRender) {\n      instance.render = newRender;\n    }\n\n    instance.renderCache = []; // this flag forces child components with slot content to update\n\n    isHmrUpdating = true;\n    instance.update();\n    isHmrUpdating = false;\n  });\n}\n\nfunction reload(id, newComp) {\n  const record = map.get(id);\n  if (!record) return; // Array.from creates a snapshot which avoids the set being mutated during\n  // updates\n\n  Array.from(record).forEach(instance => {\n    const comp = instance.type;\n\n    if (!hmrDirtyComponents.has(comp)) {\n      // 1. Update existing comp definition to match new one\n      Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(comp, newComp);\n\n      for (const key in comp) {\n        if (!(key in newComp)) {\n          delete comp[key];\n        }\n      } // 2. Mark component dirty. This forces the renderer to replace the component\n      // on patch.\n\n\n      hmrDirtyComponents.add(comp); // 3. Make sure to unmark the component after the reload.\n\n      queuePostFlushCb(() => {\n        hmrDirtyComponents.delete(comp);\n      });\n    }\n\n    if (instance.parent) {\n      // 4. Force the parent instance to re-render. This will cause all updated\n      // components to be unmounted and re-mounted. Queue the update so that we\n      // don't end up forcing the same parent to re-render multiple times.\n      queueJob(instance.parent.update);\n    } else if (instance.appContext.reload) {\n      // root instance mounted via createApp() has a reload method\n      instance.appContext.reload();\n    } else if (typeof window !== 'undefined') {\n      // root instance inside tree created via raw render(). Force reload.\n      window.location.reload();\n    } else {\n      console.warn('[HMR] Root or manually mounted instance modified. Full reload required.');\n    }\n  });\n}\n\nfunction tryWrap(fn) {\n  return (id, arg) => {\n    try {\n      return fn(id, arg);\n    } catch (e) {\n      console.error(e);\n      console.warn(`[HMR] Something went wrong during Vue component hot-reload. ` + `Full reload required.`);\n    }\n  };\n} // mark the current rendering instance for asset resolution (e.g.\n// resolveComponent, resolveDirective) during render\n\n\nlet currentRenderingInstance = null;\n\nfunction setCurrentRenderingInstance(instance) {\n  currentRenderingInstance = instance;\n} // dev only flag to track whether $attrs was used during render.\n// If $attrs was used during render then the warning for failed attrs\n// fallthrough can be suppressed.\n\n\nlet accessedAttrs = false;\n\nfunction markAttrsAccessed() {\n  accessedAttrs = true;\n}\n\nfunction renderComponentRoot(instance) {\n  const {\n    type: Component,\n    parent,\n    vnode,\n    proxy,\n    withProxy,\n    props,\n    slots,\n    attrs,\n    emit,\n    render,\n    renderCache,\n    data,\n    setupState,\n    ctx\n  } = instance;\n  let result;\n  currentRenderingInstance = instance;\n\n  if (true) {\n    accessedAttrs = false;\n  }\n\n  try {\n    let fallthroughAttrs;\n\n    if (vnode.shapeFlag & 4\n    /* STATEFUL_COMPONENT */\n    ) {\n        // withProxy is a proxy with a different `has` trap only for\n        // runtime-compiled render functions using `with` block.\n        const proxyToUse = withProxy || proxy;\n        result = normalizeVNode(render.call(proxyToUse, proxyToUse, renderCache, props, setupState, data, ctx));\n        fallthroughAttrs = attrs;\n      } else {\n      // functional\n      const render = Component; // in dev, mark attrs accessed if optional props (attrs === props)\n\n      if ( true && attrs === props) {\n        markAttrsAccessed();\n      }\n\n      result = normalizeVNode(render.length > 1 ? render(props,  true ? {\n        get attrs() {\n          markAttrsAccessed();\n          return attrs;\n        },\n\n        slots,\n        emit\n      } : undefined) : render(props, null\n      /* we know it doesn't need it */\n      ));\n      fallthroughAttrs = Component.props ? attrs : getFunctionalFallthrough(attrs);\n    } // attr merging\n    // in dev mode, comments are preserved, and it's possible for a template\n    // to have comments along side the root element which makes it a fragment\n\n\n    let root = result;\n    let setRoot = undefined;\n\n    if (true) {\n      ;\n      [root, setRoot] = getChildRoot(result);\n    }\n\n    if (Component.inheritAttrs !== false && fallthroughAttrs) {\n      const keys = Object.keys(fallthroughAttrs);\n      const {\n        shapeFlag\n      } = root;\n\n      if (keys.length) {\n        if (shapeFlag & 1\n        /* ELEMENT */\n        || shapeFlag & 6\n        /* COMPONENT */\n        ) {\n            if (shapeFlag & 1\n            /* ELEMENT */\n            && keys.some(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isModelListener */ \"r\"])) {\n              // #1643, #1543\n              // component v-model listeners should only fallthrough for component\n              // HOCs\n              fallthroughAttrs = filterModelListeners(fallthroughAttrs);\n            }\n\n            root = cloneVNode(root, fallthroughAttrs);\n          } else if ( true && !accessedAttrs && root.type !== Comment) {\n          const allAttrs = Object.keys(attrs);\n          const eventAttrs = [];\n          const extraAttrs = [];\n\n          for (let i = 0, l = allAttrs.length; i < l; i++) {\n            const key = allAttrs[i];\n\n            if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isOn */ \"t\"])(key)) {\n              // ignore v-model handlers when they fail to fallthrough\n              if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isModelListener */ \"r\"])(key)) {\n                // remove `on`, lowercase first letter to reflect event casing\n                // accurately\n                eventAttrs.push(key[2].toLowerCase() + key.slice(3));\n              }\n            } else {\n              extraAttrs.push(key);\n            }\n          }\n\n          if (extraAttrs.length) {\n            warn(`Extraneous non-props attributes (` + `${extraAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes.`);\n          }\n\n          if (eventAttrs.length) {\n            warn(`Extraneous non-emits event listeners (` + `${eventAttrs.join(', ')}) ` + `were passed to component but could not be automatically inherited ` + `because component renders fragment or text root nodes. ` + `If the listener is intended to be a component custom event listener only, ` + `declare it using the \"emits\" option.`);\n          }\n        }\n      }\n    } // inherit scopeId\n\n\n    const scopeId = vnode.scopeId; // vite#536: if subtree root is created from parent slot if would already\n    // have the correct scopeId, in this case adding the scopeId will cause\n    // it to be removed if the original slot vnode is reused.\n\n    const needScopeId = scopeId && root.scopeId !== scopeId;\n    const treeOwnerId = parent && parent.type.__scopeId;\n    const slotScopeId = treeOwnerId && treeOwnerId !== scopeId ? treeOwnerId + '-s' : null;\n\n    if (needScopeId || slotScopeId) {\n      const extras = {};\n      if (needScopeId) extras[scopeId] = '';\n      if (slotScopeId) extras[slotScopeId] = '';\n      root = cloneVNode(root, extras);\n    } // inherit directives\n\n\n    if (vnode.dirs) {\n      if ( true && !isElementRoot(root)) {\n        warn(`Runtime directive used on component with non-element root node. ` + `The directives will not function as intended.`);\n      }\n\n      root.dirs = vnode.dirs;\n    } // inherit transition data\n\n\n    if (vnode.transition) {\n      if ( true && !isElementRoot(root)) {\n        warn(`Component inside <Transition> renders non-element root node ` + `that cannot be animated.`);\n      }\n\n      root.transition = vnode.transition;\n    }\n\n    if ( true && setRoot) {\n      setRoot(root);\n    } else {\n      result = root;\n    }\n  } catch (err) {\n    handleError(err, instance, 1\n    /* RENDER_FUNCTION */\n    );\n    result = createVNode(Comment);\n  }\n\n  currentRenderingInstance = null;\n  return result;\n}\n/**\r\n * dev only\r\n */\n\n\nconst getChildRoot = vnode => {\n  if (vnode.type !== Fragment) {\n    return [vnode, undefined];\n  }\n\n  const rawChildren = vnode.children;\n  const dynamicChildren = vnode.dynamicChildren;\n  const children = rawChildren.filter(child => {\n    return !(isVNode(child) && child.type === Comment && child.children !== 'v-if');\n  });\n\n  if (children.length !== 1) {\n    return [vnode, undefined];\n  }\n\n  const childRoot = children[0];\n  const index = rawChildren.indexOf(childRoot);\n  const dynamicIndex = dynamicChildren ? dynamicChildren.indexOf(childRoot) : -1;\n\n  const setRoot = updatedRoot => {\n    rawChildren[index] = updatedRoot;\n\n    if (dynamicIndex > -1) {\n      dynamicChildren[dynamicIndex] = updatedRoot;\n    } else if (dynamicChildren && updatedRoot.patchFlag > 0) {\n      dynamicChildren.push(updatedRoot);\n    }\n  };\n\n  return [normalizeVNode(childRoot), setRoot];\n};\n\nconst getFunctionalFallthrough = attrs => {\n  let res;\n\n  for (const key in attrs) {\n    if (key === 'class' || key === 'style' || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isOn */ \"t\"])(key)) {\n      (res || (res = {}))[key] = attrs[key];\n    }\n  }\n\n  return res;\n};\n\nconst filterModelListeners = attrs => {\n  const res = {};\n\n  for (const key in attrs) {\n    if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isModelListener */ \"r\"])(key)) {\n      res[key] = attrs[key];\n    }\n  }\n\n  return res;\n};\n\nconst isElementRoot = vnode => {\n  return vnode.shapeFlag & 6\n  /* COMPONENT */\n  || vnode.shapeFlag & 1\n  /* ELEMENT */\n  || vnode.type === Comment // potential v-if branch switch\n  ;\n};\n\nfunction shouldUpdateComponent(prevVNode, nextVNode, optimized) {\n  const {\n    props: prevProps,\n    children: prevChildren\n  } = prevVNode;\n  const {\n    props: nextProps,\n    children: nextChildren,\n    patchFlag\n  } = nextVNode; // Parent component's render function was hot-updated. Since this may have\n  // caused the child component's slots content to have changed, we need to\n  // force the child to update as well.\n\n  if ( true && (prevChildren || nextChildren) && isHmrUpdating) {\n    return true;\n  } // force child update for runtime directive or transition on component vnode.\n\n\n  if (nextVNode.dirs || nextVNode.transition) {\n    return true;\n  }\n\n  if (optimized && patchFlag > 0) {\n    if (patchFlag & 1024\n    /* DYNAMIC_SLOTS */\n    ) {\n        // slot content that references values that might have changed,\n        // e.g. in a v-for\n        return true;\n      }\n\n    if (patchFlag & 16\n    /* FULL_PROPS */\n    ) {\n        if (!prevProps) {\n          return !!nextProps;\n        } // presence of this flag indicates props are always non-null\n\n\n        return hasPropsChanged(prevProps, nextProps);\n      } else if (patchFlag & 8\n    /* PROPS */\n    ) {\n        const dynamicProps = nextVNode.dynamicProps;\n\n        for (let i = 0; i < dynamicProps.length; i++) {\n          const key = dynamicProps[i];\n\n          if (nextProps[key] !== prevProps[key]) {\n            return true;\n          }\n        }\n      }\n  } else {\n    // this path is only taken by manually written render functions\n    // so presence of any children leads to a forced update\n    if (prevChildren || nextChildren) {\n      if (!nextChildren || !nextChildren.$stable) {\n        return true;\n      }\n    }\n\n    if (prevProps === nextProps) {\n      return false;\n    }\n\n    if (!prevProps) {\n      return !!nextProps;\n    }\n\n    if (!nextProps) {\n      return true;\n    }\n\n    return hasPropsChanged(prevProps, nextProps);\n  }\n\n  return false;\n}\n\nfunction hasPropsChanged(prevProps, nextProps) {\n  const nextKeys = Object.keys(nextProps);\n\n  if (nextKeys.length !== Object.keys(prevProps).length) {\n    return true;\n  }\n\n  for (let i = 0; i < nextKeys.length; i++) {\n    const key = nextKeys[i];\n\n    if (nextProps[key] !== prevProps[key]) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction updateHOCHostEl({\n  vnode,\n  parent\n}, el // HostNode\n) {\n  while (parent && parent.subTree === vnode) {\n    (vnode = parent.vnode).el = el;\n    parent = parent.parent;\n  }\n}\n\nconst isSuspense = type => type.__isSuspense; // Suspense exposes a component-like API, and is treated like a component\n// in the compiler, but internally it's a special built-in type that hooks\n// directly into the renderer.\n\n\nconst SuspenseImpl = {\n  // In order to make Suspense tree-shakable, we need to avoid importing it\n  // directly in the renderer. The renderer checks for the __isSuspense flag\n  // on a vnode's type and calls the `process` method, passing in renderer\n  // internals.\n  __isSuspense: true,\n\n  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, // platform-specific impl passed from renderer\n  rendererInternals) {\n    if (n1 == null) {\n      mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals);\n    } else {\n      patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, optimized, rendererInternals);\n    }\n  },\n\n  hydrate: hydrateSuspense\n}; // Force-casted public typing for h and TSX props inference\n\nconst Suspense = SuspenseImpl;\n\nfunction mountSuspense(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, rendererInternals) {\n  const {\n    p: patch,\n    o: {\n      createElement\n    }\n  } = rendererInternals;\n  const hiddenContainer = createElement('div');\n  const suspense = n2.suspense = createSuspenseBoundary(n2, parentSuspense, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals); // start mounting the content subtree in an off-dom container\n\n  patch(null, suspense.subTree, hiddenContainer, null, parentComponent, suspense, isSVG, optimized); // now check if we have encountered any async deps\n\n  if (suspense.deps > 0) {\n    // mount the fallback tree\n    patch(null, suspense.fallbackTree, container, anchor, parentComponent, null, // fallback tree will not have suspense context\n    isSVG, optimized);\n    n2.el = suspense.fallbackTree.el;\n  } else {\n    // Suspense has no async deps. Just resolve.\n    suspense.resolve();\n  }\n}\n\nfunction patchSuspense(n1, n2, container, anchor, parentComponent, isSVG, optimized, {\n  p: patch\n}) {\n  const suspense = n2.suspense = n1.suspense;\n  suspense.vnode = n2;\n  const {\n    content,\n    fallback\n  } = normalizeSuspenseChildren(n2);\n  const oldSubTree = suspense.subTree;\n  const oldFallbackTree = suspense.fallbackTree;\n\n  if (!suspense.isResolved) {\n    patch(oldSubTree, content, suspense.hiddenContainer, null, parentComponent, suspense, isSVG, optimized);\n\n    if (suspense.deps > 0) {\n      // still pending. patch the fallback tree.\n      patch(oldFallbackTree, fallback, container, anchor, parentComponent, null, // fallback tree will not have suspense context\n      isSVG, optimized);\n      n2.el = fallback.el;\n    } // If deps somehow becomes 0 after the patch it means the patch caused an\n    // async dep component to unmount and removed its dep. It will cause the\n    // suspense to resolve and we don't need to do anything here.\n\n  } else {\n    // just normal patch inner content as a fragment\n    patch(oldSubTree, content, container, anchor, parentComponent, suspense, isSVG, optimized);\n    n2.el = content.el;\n  }\n\n  suspense.subTree = content;\n  suspense.fallbackTree = fallback;\n}\n\nlet hasWarned = false;\n\nfunction createSuspenseBoundary(vnode, parent, parentComponent, container, hiddenContainer, anchor, isSVG, optimized, rendererInternals, isHydrating = false) {\n  /* istanbul ignore if */\n  if ( true && !hasWarned) {\n    hasWarned = true; // @ts-ignore `console.info` cannot be null error\n\n    console[console.info ? 'info' : 'log'](`<Suspense> is an experimental feature and its API will likely change.`);\n  }\n\n  const {\n    p: patch,\n    m: move,\n    um: unmount,\n    n: next,\n    o: {\n      parentNode\n    }\n  } = rendererInternals;\n\n  const getCurrentTree = () => suspense.isResolved || suspense.isHydrating ? suspense.subTree : suspense.fallbackTree;\n\n  const {\n    content,\n    fallback\n  } = normalizeSuspenseChildren(vnode);\n  const suspense = {\n    vnode,\n    parent,\n    parentComponent,\n    isSVG,\n    optimized,\n    container,\n    hiddenContainer,\n    anchor,\n    deps: 0,\n    subTree: content,\n    fallbackTree: fallback,\n    isHydrating,\n    isResolved: false,\n    isUnmounted: false,\n    effects: [],\n\n    resolve() {\n      if (true) {\n        if (suspense.isResolved) {\n          throw new Error(`resolveSuspense() is called on an already resolved suspense boundary.`);\n        }\n\n        if (suspense.isUnmounted) {\n          throw new Error(`resolveSuspense() is called on an already unmounted suspense boundary.`);\n        }\n      }\n\n      const {\n        vnode,\n        subTree,\n        fallbackTree,\n        effects,\n        parentComponent,\n        container\n      } = suspense;\n\n      if (suspense.isHydrating) {\n        suspense.isHydrating = false;\n      } else {\n        // this is initial anchor on mount\n        let {\n          anchor\n        } = suspense; // unmount fallback tree\n\n        if (fallbackTree.el) {\n          // if the fallback tree was mounted, it may have been moved\n          // as part of a parent suspense. get the latest anchor for insertion\n          anchor = next(fallbackTree);\n          unmount(fallbackTree, parentComponent, suspense, true);\n        } // move content from off-dom container to actual container\n\n\n        move(subTree, container, anchor, 0\n        /* ENTER */\n        );\n      }\n\n      const el = vnode.el = subTree.el; // suspense as the root node of a component...\n\n      if (parentComponent && parentComponent.subTree === vnode) {\n        parentComponent.vnode.el = el;\n        updateHOCHostEl(parentComponent, el);\n      } // check if there is a pending parent suspense\n\n\n      let parent = suspense.parent;\n      let hasUnresolvedAncestor = false;\n\n      while (parent) {\n        if (!parent.isResolved) {\n          // found a pending parent suspense, merge buffered post jobs\n          // into that parent\n          parent.effects.push(...effects);\n          hasUnresolvedAncestor = true;\n          break;\n        }\n\n        parent = parent.parent;\n      } // no pending parent suspense, flush all jobs\n\n\n      if (!hasUnresolvedAncestor) {\n        queuePostFlushCb(effects);\n      }\n\n      suspense.isResolved = true;\n      suspense.effects = []; // invoke @resolve event\n\n      const onResolve = vnode.props && vnode.props.onResolve;\n\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(onResolve)) {\n        onResolve();\n      }\n    },\n\n    recede() {\n      suspense.isResolved = false;\n      const {\n        vnode,\n        subTree,\n        fallbackTree,\n        parentComponent,\n        container,\n        hiddenContainer,\n        isSVG,\n        optimized\n      } = suspense; // move content tree back to the off-dom container\n\n      const anchor = next(subTree);\n      move(subTree, hiddenContainer, null, 1\n      /* LEAVE */\n      ); // remount the fallback tree\n\n      patch(null, fallbackTree, container, anchor, parentComponent, null, // fallback tree will not have suspense context\n      isSVG, optimized);\n      const el = vnode.el = fallbackTree.el; // suspense as the root node of a component...\n\n      if (parentComponent && parentComponent.subTree === vnode) {\n        parentComponent.vnode.el = el;\n        updateHOCHostEl(parentComponent, el);\n      } // invoke @recede event\n\n\n      const onRecede = vnode.props && vnode.props.onRecede;\n\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(onRecede)) {\n        onRecede();\n      }\n    },\n\n    move(container, anchor, type) {\n      move(getCurrentTree(), container, anchor, type);\n      suspense.container = container;\n    },\n\n    next() {\n      return next(getCurrentTree());\n    },\n\n    registerDep(instance, setupRenderEffect) {\n      // suspense is already resolved, need to recede.\n      // use queueJob so it's handled synchronously after patching the current\n      // suspense tree\n      if (suspense.isResolved) {\n        queueJob(() => {\n          suspense.recede();\n        });\n      }\n\n      const hydratedEl = instance.vnode.el;\n      suspense.deps++;\n      instance.asyncDep.catch(err => {\n        handleError(err, instance, 0\n        /* SETUP_FUNCTION */\n        );\n      }).then(asyncSetupResult => {\n        // retry when the setup() promise resolves.\n        // component may have been unmounted before resolve.\n        if (instance.isUnmounted || suspense.isUnmounted) {\n          return;\n        }\n\n        suspense.deps--; // retry from this component\n\n        instance.asyncResolved = true;\n        const {\n          vnode\n        } = instance;\n\n        if (true) {\n          pushWarningContext(vnode);\n        }\n\n        handleSetupResult(instance, asyncSetupResult);\n\n        if (hydratedEl) {\n          // vnode may have been replaced if an update happened before the\n          // async dep is resolved.\n          vnode.el = hydratedEl;\n        }\n\n        setupRenderEffect(instance, vnode, // component may have been moved before resolve.\n        // if this is not a hydration, instance.subTree will be the comment\n        // placeholder.\n        hydratedEl ? parentNode(hydratedEl) : parentNode(instance.subTree.el), // anchor will not be used if this is hydration, so only need to\n        // consider the comment placeholder case.\n        hydratedEl ? null : next(instance.subTree), suspense, isSVG, optimized);\n        updateHOCHostEl(instance, vnode.el);\n\n        if (true) {\n          popWarningContext();\n        }\n\n        if (suspense.deps === 0) {\n          suspense.resolve();\n        }\n      });\n    },\n\n    unmount(parentSuspense, doRemove) {\n      suspense.isUnmounted = true;\n      unmount(suspense.subTree, parentComponent, parentSuspense, doRemove);\n\n      if (!suspense.isResolved) {\n        unmount(suspense.fallbackTree, parentComponent, parentSuspense, doRemove);\n      }\n    }\n\n  };\n  return suspense;\n}\n\nfunction hydrateSuspense(node, vnode, parentComponent, parentSuspense, isSVG, optimized, rendererInternals, hydrateNode) {\n  /* eslint-disable no-restricted-globals */\n  const suspense = vnode.suspense = createSuspenseBoundary(vnode, parentSuspense, parentComponent, node.parentNode, document.createElement('div'), null, isSVG, optimized, rendererInternals, true\n  /* hydrating */\n  ); // there are two possible scenarios for server-rendered suspense:\n  // - success: ssr content should be fully resolved\n  // - failure: ssr content should be the fallback branch.\n  // however, on the client we don't really know if it has failed or not\n  // attempt to hydrate the DOM assuming it has succeeded, but we still\n  // need to construct a suspense boundary first\n\n  const result = hydrateNode(node, suspense.subTree, parentComponent, suspense, optimized);\n\n  if (suspense.deps === 0) {\n    suspense.resolve();\n  }\n\n  return result;\n  /* eslint-enable no-restricted-globals */\n}\n\nfunction normalizeSuspenseChildren(vnode) {\n  const {\n    shapeFlag,\n    children\n  } = vnode;\n\n  if (shapeFlag & 32\n  /* SLOTS_CHILDREN */\n  ) {\n      const {\n        default: d,\n        fallback\n      } = children;\n      return {\n        content: normalizeVNode(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(d) ? d() : d),\n        fallback: normalizeVNode(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(fallback) ? fallback() : fallback)\n      };\n    } else {\n    return {\n      content: normalizeVNode(children),\n      fallback: normalizeVNode(null)\n    };\n  }\n}\n\nfunction queueEffectWithSuspense(fn, suspense) {\n  if (suspense && !suspense.isResolved) {\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(fn)) {\n      suspense.effects.push(...fn);\n    } else {\n      suspense.effects.push(fn);\n    }\n  } else {\n    queuePostFlushCb(fn);\n  }\n}\n/**\r\n * Wrap a slot function to memoize current rendering instance\r\n * @private\r\n */\n\n\nfunction withCtx(fn, ctx = currentRenderingInstance) {\n  if (!ctx) return fn;\n  return function renderFnWithContext() {\n    const owner = currentRenderingInstance;\n    setCurrentRenderingInstance(ctx);\n    const res = fn.apply(null, arguments);\n    setCurrentRenderingInstance(owner);\n    return res;\n  };\n} // SFC scoped style ID management.\n\n\nlet currentScopeId = null;\nconst scopeIdStack = [];\n/**\r\n * @private\r\n */\n\nfunction pushScopeId(id) {\n  scopeIdStack.push(currentScopeId = id);\n}\n/**\r\n * @private\r\n */\n\n\nfunction popScopeId() {\n  scopeIdStack.pop();\n  currentScopeId = scopeIdStack[scopeIdStack.length - 1] || null;\n}\n/**\r\n * @private\r\n */\n\n\nfunction withScopeId(id) {\n  return fn => withCtx(function () {\n    pushScopeId(id);\n    const res = fn.apply(this, arguments);\n    popScopeId();\n    return res;\n  });\n}\n\nconst isTeleport = type => type.__isTeleport;\n\nconst isTeleportDisabled = props => props && (props.disabled || props.disabled === '');\n\nconst resolveTarget = (props, select) => {\n  const targetSelector = props && props.to;\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(targetSelector)) {\n    if (!select) {\n       true && warn(`Current renderer does not support string target for Teleports. ` + `(missing querySelector renderer option)`);\n      return null;\n    } else {\n      const target = select(targetSelector);\n\n      if (!target) {\n         true && warn(`Failed to locate Teleport target with selector \"${targetSelector}\". ` + `Note the target element must exist before the component is mounted - ` + `i.e. the target cannot be rendered by the component itself, and ` + `ideally should be outside of the entire Vue component tree.`);\n      }\n\n      return target;\n    }\n  } else {\n    if ( true && !targetSelector) {\n      warn(`Invalid Teleport target: ${targetSelector}`);\n    }\n\n    return targetSelector;\n  }\n};\n\nconst TeleportImpl = {\n  __isTeleport: true,\n\n  process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals) {\n    const {\n      mc: mountChildren,\n      pc: patchChildren,\n      pbc: patchBlockChildren,\n      o: {\n        insert,\n        querySelector,\n        createText,\n        createComment\n      }\n    } = internals;\n    const disabled = isTeleportDisabled(n2.props);\n    const {\n      shapeFlag,\n      children\n    } = n2;\n\n    if (n1 == null) {\n      // insert anchors in the main view\n      const placeholder = n2.el =  true ? createComment('teleport start') : undefined;\n      const mainAnchor = n2.anchor =  true ? createComment('teleport end') : undefined;\n      insert(placeholder, container, anchor);\n      insert(mainAnchor, container, anchor);\n      const target = n2.target = resolveTarget(n2.props, querySelector);\n      const targetAnchor = n2.targetAnchor = createText('');\n\n      if (target) {\n        insert(targetAnchor, target);\n      } else if (true) {\n        warn('Invalid Teleport target on mount:', target, `(${typeof target})`);\n      }\n\n      const mount = (container, anchor) => {\n        // Teleport *always* has Array children. This is enforced in both the\n        // compiler and vnode children normalization.\n        if (shapeFlag & 16\n        /* ARRAY_CHILDREN */\n        ) {\n            mountChildren(children, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n          }\n      };\n\n      if (disabled) {\n        mount(container, mainAnchor);\n      } else if (target) {\n        mount(target, targetAnchor);\n      }\n    } else {\n      // update content\n      n2.el = n1.el;\n      const mainAnchor = n2.anchor = n1.anchor;\n      const target = n2.target = n1.target;\n      const targetAnchor = n2.targetAnchor = n1.targetAnchor;\n      const wasDisabled = isTeleportDisabled(n1.props);\n      const currentContainer = wasDisabled ? container : target;\n      const currentAnchor = wasDisabled ? mainAnchor : targetAnchor;\n\n      if (n2.dynamicChildren) {\n        // fast path when the teleport happens to be a block root\n        patchBlockChildren(n1.dynamicChildren, n2.dynamicChildren, currentContainer, parentComponent, parentSuspense, isSVG);\n\n        if (n2.patchFlag > 0 && n2.shapeFlag & 16\n        /* ARRAY_CHILDREN */\n        ) {\n            const oldChildren = n1.children;\n            const children = n2.children;\n\n            for (let i = 0; i < children.length; i++) {\n              children[i].el = oldChildren[i].el;\n            }\n          }\n      } else if (!optimized) {\n        patchChildren(n1, n2, currentContainer, currentAnchor, parentComponent, parentSuspense, isSVG);\n      }\n\n      if (disabled) {\n        if (!wasDisabled) {\n          // enabled -> disabled\n          // move into main container\n          moveTeleport(n2, container, mainAnchor, internals, 1\n          /* TOGGLE */\n          );\n        }\n      } else {\n        // target changed\n        if ((n2.props && n2.props.to) !== (n1.props && n1.props.to)) {\n          const nextTarget = n2.target = resolveTarget(n2.props, querySelector);\n\n          if (nextTarget) {\n            moveTeleport(n2, nextTarget, null, internals, 0\n            /* TARGET_CHANGE */\n            );\n          } else if (true) {\n            warn('Invalid Teleport target on update:', target, `(${typeof target})`);\n          }\n        } else if (wasDisabled) {\n          // disabled -> enabled\n          // move into teleport target\n          moveTeleport(n2, target, targetAnchor, internals, 1\n          /* TOGGLE */\n          );\n        }\n      }\n    }\n  },\n\n  remove(vnode, {\n    r: remove,\n    o: {\n      remove: hostRemove\n    }\n  }) {\n    const {\n      shapeFlag,\n      children,\n      anchor\n    } = vnode;\n    hostRemove(anchor);\n\n    if (shapeFlag & 16\n    /* ARRAY_CHILDREN */\n    ) {\n        for (let i = 0; i < children.length; i++) {\n          remove(children[i]);\n        }\n      }\n  },\n\n  move: moveTeleport,\n  hydrate: hydrateTeleport\n};\n\nfunction moveTeleport(vnode, container, parentAnchor, {\n  o: {\n    insert\n  },\n  m: move\n}, moveType = 2\n/* REORDER */\n) {\n  // move target anchor if this is a target change.\n  if (moveType === 0\n  /* TARGET_CHANGE */\n  ) {\n      insert(vnode.targetAnchor, container, parentAnchor);\n    }\n\n  const {\n    el,\n    anchor,\n    shapeFlag,\n    children,\n    props\n  } = vnode;\n  const isReorder = moveType === 2\n  /* REORDER */\n  ; // move main view anchor if this is a re-order.\n\n  if (isReorder) {\n    insert(el, container, parentAnchor);\n  } // if this is a re-order and teleport is enabled (content is in target)\n  // do not move children. So the opposite is: only move children if this\n  // is not a reorder, or the teleport is disabled\n\n\n  if (!isReorder || isTeleportDisabled(props)) {\n    // Teleport has either Array children or no children.\n    if (shapeFlag & 16\n    /* ARRAY_CHILDREN */\n    ) {\n        for (let i = 0; i < children.length; i++) {\n          move(children[i], container, parentAnchor, 2\n          /* REORDER */\n          );\n        }\n      }\n  } // move main view anchor if this is a re-order.\n\n\n  if (isReorder) {\n    insert(anchor, container, parentAnchor);\n  }\n}\n\nfunction hydrateTeleport(node, vnode, parentComponent, parentSuspense, optimized, {\n  o: {\n    nextSibling,\n    parentNode,\n    querySelector\n  }\n}, hydrateChildren) {\n  const target = vnode.target = resolveTarget(vnode.props, querySelector);\n\n  if (target) {\n    // if multiple teleports rendered to the same target element, we need to\n    // pick up from where the last teleport finished instead of the first node\n    const targetNode = target._lpa || target.firstChild;\n\n    if (vnode.shapeFlag & 16\n    /* ARRAY_CHILDREN */\n    ) {\n        if (isTeleportDisabled(vnode.props)) {\n          vnode.anchor = hydrateChildren(nextSibling(node), vnode, parentNode(node), parentComponent, parentSuspense, optimized);\n          vnode.targetAnchor = targetNode;\n        } else {\n          vnode.anchor = nextSibling(node);\n          vnode.targetAnchor = hydrateChildren(targetNode, vnode, target, parentComponent, parentSuspense, optimized);\n        }\n\n        target._lpa = vnode.targetAnchor && nextSibling(vnode.targetAnchor);\n      }\n  }\n\n  return vnode.anchor && nextSibling(vnode.anchor);\n} // Force-casted public typing for h and TSX props inference\n\n\nconst Teleport = TeleportImpl;\nconst COMPONENTS = 'components';\nconst DIRECTIVES = 'directives';\n/**\r\n * @private\r\n */\n\nfunction resolveComponent(name) {\n  return resolveAsset(COMPONENTS, name) || name;\n}\n\nconst NULL_DYNAMIC_COMPONENT = Symbol();\n/**\r\n * @private\r\n */\n\nfunction resolveDynamicComponent(component) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(component)) {\n    return resolveAsset(COMPONENTS, component, false) || component;\n  } else {\n    // invalid types will fallthrough to createVNode and raise warning\n    return component || NULL_DYNAMIC_COMPONENT;\n  }\n}\n/**\r\n * @private\r\n */\n\n\nfunction resolveDirective(name) {\n  return resolveAsset(DIRECTIVES, name);\n} // implementation\n\n\nfunction resolveAsset(type, name, warnMissing = true) {\n  const instance = currentRenderingInstance || currentInstance;\n\n  if (instance) {\n    const Component = instance.type; // self name has highest priority\n\n    if (type === COMPONENTS) {\n      const selfName = Component.displayName || Component.name;\n\n      if (selfName && (selfName === name || selfName === Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(name) || selfName === Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(name)))) {\n        return Component;\n      }\n    }\n\n    const res = // local registration\n    resolve(Component[type], name) || // global registration\n    resolve(instance.appContext[type], name);\n\n    if ( true && warnMissing && !res) {\n      warn(`Failed to resolve ${type.slice(0, -1)}: ${name}`);\n    }\n\n    return res;\n  } else if (true) {\n    warn(`resolve${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(type.slice(0, -1))} ` + `can only be used in render() or setup().`);\n  }\n}\n\nfunction resolve(registry, name) {\n  return registry && (registry[name] || registry[Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(name)] || registry[Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(name))]);\n}\n\nconst Fragment = Symbol( true ? 'Fragment' : undefined);\nconst Text = Symbol( true ? 'Text' : undefined);\nconst Comment = Symbol( true ? 'Comment' : undefined);\nconst Static = Symbol( true ? 'Static' : undefined); // Since v-if and v-for are the two possible ways node structure can dynamically\n// change, once we consider v-if branches and each v-for fragment a block, we\n// can divide a template into nested blocks, and within each block the node\n// structure would be stable. This allows us to skip most children diffing\n// and only worry about the dynamic nodes (indicated by patch flags).\n\nconst blockStack = [];\nlet currentBlock = null;\n/**\r\n * Open a block.\r\n * This must be called before `createBlock`. It cannot be part of `createBlock`\r\n * because the children of the block are evaluated before `createBlock` itself\r\n * is called. The generated code typically looks like this:\r\n *\r\n * ```js\r\n * function render() {\r\n *   return (openBlock(),createBlock('div', null, [...]))\r\n * }\r\n * ```\r\n * disableTracking is true when creating a v-for fragment block, since a v-for\r\n * fragment always diffs its children.\r\n *\r\n * @private\r\n */\n\nfunction openBlock(disableTracking = false) {\n  blockStack.push(currentBlock = disableTracking ? null : []);\n} // Whether we should be tracking dynamic child nodes inside a block.\n// Only tracks when this value is > 0\n// We are not using a simple boolean because this value may need to be\n// incremented/decremented by nested usage of v-once (see below)\n\n\nlet shouldTrack = 1;\n/**\r\n * Block tracking sometimes needs to be disabled, for example during the\r\n * creation of a tree that needs to be cached by v-once. The compiler generates\r\n * code like this:\r\n *\r\n * ``` js\r\n * _cache[1] || (\r\n *   setBlockTracking(-1),\r\n *   _cache[1] = createVNode(...),\r\n *   setBlockTracking(1),\r\n *   _cache[1]\r\n * )\r\n * ```\r\n *\r\n * @private\r\n */\n\nfunction setBlockTracking(value) {\n  shouldTrack += value;\n}\n/**\r\n * Create a block root vnode. Takes the same exact arguments as `createVNode`.\r\n * A block root keeps track of dynamic nodes within the block in the\r\n * `dynamicChildren` array.\r\n *\r\n * @private\r\n */\n\n\nfunction createBlock(type, props, children, patchFlag, dynamicProps) {\n  const vnode = createVNode(type, props, children, patchFlag, dynamicProps, true\n  /* isBlock: prevent a block from tracking itself */\n  ); // save current block children on the block vnode\n\n  vnode.dynamicChildren = currentBlock || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_ARR */ \"a\"]; // close block\n\n  blockStack.pop();\n  currentBlock = blockStack[blockStack.length - 1] || null; // a block is always going to be patched, so track it as a child of its\n  // parent block\n\n  if (currentBlock) {\n    currentBlock.push(vnode);\n  }\n\n  return vnode;\n}\n\nfunction isVNode(value) {\n  return value ? value.__v_isVNode === true : false;\n}\n\nfunction isSameVNodeType(n1, n2) {\n  if ( true && n2.shapeFlag & 6\n  /* COMPONENT */\n  && hmrDirtyComponents.has(n2.type)) {\n    // HMR only: if the component has been hot-updated, force a reload.\n    return false;\n  }\n\n  return n1.type === n2.type && n1.key === n2.key;\n}\n\nlet vnodeArgsTransformer;\n/**\r\n * Internal API for registering an arguments transform for createVNode\r\n * used for creating stubs in the test-utils\r\n * It is *internal* but needs to be exposed for test-utils to pick up proper\r\n * typings\r\n */\n\nfunction transformVNodeArgs(transformer) {\n  vnodeArgsTransformer = transformer;\n}\n\nconst createVNodeWithArgsTransform = (...args) => {\n  return _createVNode(...(vnodeArgsTransformer ? vnodeArgsTransformer(args, currentRenderingInstance) : args));\n};\n\nconst InternalObjectKey = `__vInternal`;\n\nconst normalizeKey = ({\n  key\n}) => key != null ? key : null;\n\nconst normalizeRef = ({\n  ref\n}) => {\n  return ref != null ? Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(ref) ? ref : [currentRenderingInstance, ref] : null;\n};\n\nconst createVNode =  true ? createVNodeWithArgsTransform : undefined;\n\nfunction _createVNode(type, props = null, children = null, patchFlag = 0, dynamicProps = null, isBlockNode = false) {\n  if (!type || type === NULL_DYNAMIC_COMPONENT) {\n    if ( true && !type) {\n      warn(`Invalid vnode type when creating vnode: ${type}.`);\n    }\n\n    type = Comment;\n  }\n\n  if (isVNode(type)) {\n    const cloned = cloneVNode(type, props);\n\n    if (children) {\n      normalizeChildren(cloned, children);\n    }\n\n    return cloned;\n  } // class component normalization.\n\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(type) && '__vccOpts' in type) {\n    type = type.__vccOpts;\n  } // class & style normalization.\n\n\n  if (props) {\n    // for reactive or proxy objects, we need to clone it to enable mutation.\n    if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isProxy */ \"c\"])(props) || InternalObjectKey in props) {\n      props = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, props);\n    }\n\n    let {\n      class: klass,\n      style\n    } = props;\n\n    if (klass && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(klass)) {\n      props.class = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* normalizeClass */ \"D\"])(klass);\n    }\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(style)) {\n      // reactive state objects need to be cloned since they are likely to be\n      // mutated\n      if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isProxy */ \"c\"])(style) && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(style)) {\n        style = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, style);\n      }\n\n      props.style = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* normalizeStyle */ \"E\"])(style);\n    }\n  } // encode the vnode type information into a bitmap\n\n\n  const shapeFlag = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(type) ? 1\n  /* ELEMENT */\n  : isSuspense(type) ? 128\n  /* SUSPENSE */\n  : isTeleport(type) ? 64\n  /* TELEPORT */\n  : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(type) ? 4\n  /* STATEFUL_COMPONENT */\n  : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(type) ? 2\n  /* FUNCTIONAL_COMPONENT */\n  : 0;\n\n  if ( true && shapeFlag & 4\n  /* STATEFUL_COMPONENT */\n  && Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isProxy */ \"c\"])(type)) {\n    type = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(type);\n    warn(`Vue received a Component which was made a reactive object. This can ` + `lead to unnecessary performance overhead, and should be avoided by ` + `marking the component with \\`markRaw\\` or using \\`shallowRef\\` ` + `instead of \\`ref\\`.`, `\\nComponent that was made reactive: `, type);\n  }\n\n  const vnode = {\n    __v_isVNode: true,\n    __v_skip: true,\n    type,\n    props,\n    key: props && normalizeKey(props),\n    ref: props && normalizeRef(props),\n    scopeId: currentScopeId,\n    children: null,\n    component: null,\n    suspense: null,\n    dirs: null,\n    transition: null,\n    el: null,\n    anchor: null,\n    target: null,\n    targetAnchor: null,\n    staticCount: 0,\n    shapeFlag,\n    patchFlag,\n    dynamicProps,\n    dynamicChildren: null,\n    appContext: null\n  }; // validate key\n\n  if ( true && vnode.key !== vnode.key) {\n    warn(`VNode created with invalid key (NaN). VNode type:`, vnode.type);\n  }\n\n  normalizeChildren(vnode, children); // presence of a patch flag indicates this node needs patching on updates.\n  // component nodes also should always be patched, because even if the\n  // component doesn't need to update, it needs to persist the instance on to\n  // the next vnode so that it can be properly unmounted later.\n\n  if (shouldTrack > 0 && !isBlockNode && currentBlock && // the EVENTS flag is only for hydration and if it is the only flag, the\n  // vnode should not be considered dynamic due to handler caching.\n  patchFlag !== 32\n  /* HYDRATE_EVENTS */\n  && (patchFlag > 0 || shapeFlag & 6\n  /* COMPONENT */\n  )) {\n    currentBlock.push(vnode);\n  }\n\n  return vnode;\n}\n\nfunction cloneVNode(vnode, extraProps) {\n  // This is intentionally NOT using spread or extend to avoid the runtime\n  // key enumeration cost.\n  const {\n    props,\n    patchFlag\n  } = vnode;\n  const mergedProps = extraProps ? props ? mergeProps(props, extraProps) : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, extraProps) : props;\n  return {\n    __v_isVNode: true,\n    __v_skip: true,\n    type: vnode.type,\n    props: mergedProps,\n    key: mergedProps && normalizeKey(mergedProps),\n    ref: extraProps && extraProps.ref ? normalizeRef(extraProps) : vnode.ref,\n    scopeId: vnode.scopeId,\n    children: vnode.children,\n    target: vnode.target,\n    targetAnchor: vnode.targetAnchor,\n    staticCount: vnode.staticCount,\n    shapeFlag: vnode.shapeFlag,\n    // if the vnode is cloned with extra props, we can no longer assume its\n    // existing patch flag to be reliable and need to add the FULL_PROPS flag.\n    // note: perserve flag for fragments since they use the flag for children\n    // fast paths only.\n    patchFlag: extraProps && vnode.type !== Fragment ? patchFlag === -1 // hoisted node\n    ? 16\n    /* FULL_PROPS */\n    : patchFlag | 16\n    /* FULL_PROPS */\n    : patchFlag,\n    dynamicProps: vnode.dynamicProps,\n    dynamicChildren: vnode.dynamicChildren,\n    appContext: vnode.appContext,\n    dirs: vnode.dirs,\n    transition: vnode.transition,\n    // These should technically only be non-null on mounted VNodes. However,\n    // they *should* be copied for kept-alive vnodes. So we just always copy\n    // them since them being non-null during a mount doesn't affect the logic as\n    // they will simply be overwritten.\n    component: vnode.component,\n    suspense: vnode.suspense,\n    el: vnode.el,\n    anchor: vnode.anchor\n  };\n}\n/**\r\n * @private\r\n */\n\n\nfunction createTextVNode(text = ' ', flag = 0) {\n  return createVNode(Text, null, text, flag);\n}\n/**\r\n * @private\r\n */\n\n\nfunction createStaticVNode(content, numberOfNodes) {\n  // A static vnode can contain multiple stringified elements, and the number\n  // of elements is necessary for hydration.\n  const vnode = createVNode(Static, null, content);\n  vnode.staticCount = numberOfNodes;\n  return vnode;\n}\n/**\r\n * @private\r\n */\n\n\nfunction createCommentVNode(text = '', // when used as the v-else branch, the comment node must be created as a\n// block to ensure correct updates.\nasBlock = false) {\n  return asBlock ? (openBlock(), createBlock(Comment, null, text)) : createVNode(Comment, null, text);\n}\n\nfunction normalizeVNode(child) {\n  if (child == null || typeof child === 'boolean') {\n    // empty placeholder\n    return createVNode(Comment);\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(child)) {\n    // fragment\n    return createVNode(Fragment, null, child);\n  } else if (typeof child === 'object') {\n    // already vnode, this should be the most common since compiled templates\n    // always produce all-vnode children arrays\n    return child.el === null ? child : cloneVNode(child);\n  } else {\n    // strings and numbers\n    return createVNode(Text, null, String(child));\n  }\n} // optimized normalization for template-compiled render fns\n\n\nfunction cloneIfMounted(child) {\n  return child.el === null ? child : cloneVNode(child);\n}\n\nfunction normalizeChildren(vnode, children) {\n  let type = 0;\n  const {\n    shapeFlag\n  } = vnode;\n\n  if (children == null) {\n    children = null;\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(children)) {\n    type = 16\n    /* ARRAY_CHILDREN */\n    ;\n  } else if (typeof children === 'object') {\n    // Normalize slot to plain children\n    if ((shapeFlag & 1\n    /* ELEMENT */\n    || shapeFlag & 64\n    /* TELEPORT */\n    ) && children.default) {\n      normalizeChildren(vnode, children.default());\n      return;\n    } else {\n      type = 32\n      /* SLOTS_CHILDREN */\n      ;\n      const slotFlag = children._;\n\n      if (!slotFlag && !(InternalObjectKey in children)) {\n        children._ctx = currentRenderingInstance;\n      } else if (slotFlag === 3\n      /* FORWARDED */\n      && currentRenderingInstance) {\n        // a child component receives forwarded slots from the parent.\n        // its slot type is determined by its parent's slot type.\n        if (currentRenderingInstance.vnode.patchFlag & 1024\n        /* DYNAMIC_SLOTS */\n        ) {\n            children._ = 2\n            /* DYNAMIC */\n            ;\n            vnode.patchFlag |= 1024\n            /* DYNAMIC_SLOTS */\n            ;\n          } else {\n          children._ = 1\n          /* STABLE */\n          ;\n        }\n      }\n    }\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(children)) {\n    children = {\n      default: children,\n      _ctx: currentRenderingInstance\n    };\n    type = 32\n    /* SLOTS_CHILDREN */\n    ;\n  } else {\n    children = String(children); // force teleport children to array so it can be moved around\n\n    if (shapeFlag & 64\n    /* TELEPORT */\n    ) {\n        type = 16\n        /* ARRAY_CHILDREN */\n        ;\n        children = [createTextVNode(children)];\n      } else {\n      type = 8\n      /* TEXT_CHILDREN */\n      ;\n    }\n  }\n\n  vnode.children = children;\n  vnode.shapeFlag |= type;\n}\n\nfunction mergeProps(...args) {\n  const ret = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, args[0]);\n\n  for (let i = 1; i < args.length; i++) {\n    const toMerge = args[i];\n\n    for (const key in toMerge) {\n      if (key === 'class') {\n        if (ret.class !== toMerge.class) {\n          ret.class = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* normalizeClass */ \"D\"])([ret.class, toMerge.class]);\n        }\n      } else if (key === 'style') {\n        ret.style = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* normalizeStyle */ \"E\"])([ret.style, toMerge.style]);\n      } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isOn */ \"t\"])(key)) {\n        const existing = ret[key];\n        const incoming = toMerge[key];\n\n        if (existing !== incoming) {\n          ret[key] = existing ? [].concat(existing, toMerge[key]) : incoming;\n        }\n      } else {\n        ret[key] = toMerge[key];\n      }\n    }\n  }\n\n  return ret;\n}\n\nfunction emit(instance, event, ...args) {\n  const props = instance.vnode.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n\n  if (true) {\n    const options = normalizeEmitsOptions(instance.type);\n\n    if (options) {\n      if (!(event in options)) {\n        const propsOptions = normalizePropsOptions(instance.type)[0];\n\n        if (!propsOptions || !(`on` + Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(event) in propsOptions)) {\n          warn(`Component emitted event \"${event}\" but it is neither declared in ` + `the emits option nor as an \"on${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(event)}\" prop.`);\n        }\n      } else {\n        const validator = options[event];\n\n        if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(validator)) {\n          const isValid = validator(...args);\n\n          if (!isValid) {\n            warn(`Invalid event arguments: event validation failed for event \"${event}\".`);\n          }\n        }\n      }\n    }\n  }\n\n  let handlerName = `on${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(event)}`;\n  let handler = props[handlerName]; // for v-model update:xxx events, also trigger kebab-case equivalent\n  // for props passed via kebab-case\n\n  if (!handler && event.startsWith('update:')) {\n    handlerName = `on${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hyphenate */ \"l\"])(event))}`;\n    handler = props[handlerName];\n  }\n\n  if (!handler) {\n    handler = props[handlerName + `Once`];\n\n    if (!instance.emitted) {\n      (instance.emitted = {})[handlerName] = true;\n    } else if (instance.emitted[handlerName]) {\n      return;\n    }\n  }\n\n  if (handler) {\n    callWithAsyncErrorHandling(handler, instance, 6\n    /* COMPONENT_EVENT_HANDLER */\n    , args);\n  }\n}\n\nfunction normalizeEmitsOptions(comp) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(comp, '__emits')) {\n    return comp.__emits;\n  }\n\n  const raw = comp.emits;\n  let normalized = {}; // apply mixin/extends props\n\n  let hasExtends = false;\n\n  if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(comp)) {\n    if (comp.extends) {\n      hasExtends = true;\n      Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(normalized, normalizeEmitsOptions(comp.extends));\n    }\n\n    if (comp.mixins) {\n      hasExtends = true;\n      comp.mixins.forEach(m => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(normalized, normalizeEmitsOptions(m)));\n    }\n  }\n\n  if (!raw && !hasExtends) {\n    return comp.__emits = undefined;\n  }\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(raw)) {\n    raw.forEach(key => normalized[key] = null);\n  } else {\n    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(normalized, raw);\n  }\n\n  return comp.__emits = normalized;\n} // Check if an incoming prop key is a declared emit event listener.\n// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are\n// both considered matched listeners.\n\n\nfunction isEmitListener(comp, key) {\n  let emits;\n\n  if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isOn */ \"t\"])(key) || !(emits = normalizeEmitsOptions(comp))) {\n    return false;\n  }\n\n  key = key.replace(/Once$/, '');\n  return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(emits, key[2].toLowerCase() + key.slice(3)) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(emits, key.slice(2));\n}\n\nfunction initProps(instance, rawProps, isStateful, // result of bitwise flag comparison\nisSSR = false) {\n  const props = {};\n  const attrs = {};\n  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* def */ \"g\"])(attrs, InternalObjectKey, 1);\n  setFullProps(instance, rawProps, props, attrs); // validation\n\n  if (true) {\n    validateProps(props, instance.type);\n  }\n\n  if (isStateful) {\n    // stateful\n    instance.props = isSSR ? props : Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReactive */ \"k\"])(props);\n  } else {\n    if (!instance.type.props) {\n      // functional w/ optional props, props === attrs\n      instance.props = attrs;\n    } else {\n      // functional w/ declared props\n      instance.props = props;\n    }\n  }\n\n  instance.attrs = attrs;\n}\n\nfunction updateProps(instance, rawProps, rawPrevProps, optimized) {\n  const {\n    props,\n    attrs,\n    vnode: {\n      patchFlag\n    }\n  } = instance;\n  const rawCurrentProps = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(props);\n  const [options] = normalizePropsOptions(instance.type);\n\n  if ((optimized || patchFlag > 0) && !(patchFlag & 16\n  /* FULL_PROPS */\n  )) {\n    if (patchFlag & 8\n    /* PROPS */\n    ) {\n        // Compiler-generated props & no keys change, just set the updated\n        // the props.\n        const propsToUpdate = instance.vnode.dynamicProps;\n\n        for (let i = 0; i < propsToUpdate.length; i++) {\n          const key = propsToUpdate[i]; // PROPS flag guarantees rawProps to be non-null\n\n          const value = rawProps[key];\n\n          if (options) {\n            // attr / props separation was done on init and will be consistent\n            // in this code path, so just check if attrs have it.\n            if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(attrs, key)) {\n              attrs[key] = value;\n            } else {\n              const camelizedKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(key);\n              props[camelizedKey] = resolvePropValue(options, rawCurrentProps, camelizedKey, value);\n            }\n          } else {\n            attrs[key] = value;\n          }\n        }\n      }\n  } else {\n    // full props update.\n    setFullProps(instance, rawProps, props, attrs); // in case of dynamic props, check if we need to delete keys from\n    // the props object\n\n    let kebabKey;\n\n    for (const key in rawCurrentProps) {\n      if (!rawProps || // for camelCase\n      !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(rawProps, key) && ( // it's possible the original props was passed in as kebab-case\n      // and converted to camelCase (#955)\n      (kebabKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hyphenate */ \"l\"])(key)) === key || !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(rawProps, kebabKey))) {\n        if (options) {\n          if (rawPrevProps && ( // for camelCase\n          rawPrevProps[key] !== undefined || // for kebab-case\n          rawPrevProps[kebabKey] !== undefined)) {\n            props[key] = resolvePropValue(options, rawProps || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"], key, undefined);\n          }\n        } else {\n          delete props[key];\n        }\n      }\n    } // in the case of functional component w/o props declaration, props and\n    // attrs point to the same object so it should already have been updated.\n\n\n    if (attrs !== rawCurrentProps) {\n      for (const key in attrs) {\n        if (!rawProps || !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(rawProps, key)) {\n          delete attrs[key];\n        }\n      }\n    }\n  } // trigger updates for $attrs in case it's used in component slots\n\n\n  Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* trigger */ \"q\"])(instance, \"set\"\n  /* SET */\n  , '$attrs');\n\n  if ( true && rawProps) {\n    validateProps(props, instance.type);\n  }\n}\n\nfunction setFullProps(instance, rawProps, props, attrs) {\n  const [options, needCastKeys] = normalizePropsOptions(instance.type);\n\n  if (rawProps) {\n    for (const key in rawProps) {\n      const value = rawProps[key]; // key, ref are reserved and never passed down\n\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isReservedProp */ \"v\"])(key)) {\n        continue;\n      } // prop option names are camelized during normalization, so to support\n      // kebab -> camel conversion here we need to camelize the key.\n\n\n      let camelKey;\n\n      if (options && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(options, camelKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(key))) {\n        props[camelKey] = value;\n      } else if (!isEmitListener(instance.type, key)) {\n        // Any non-declared (either as a prop or an emitted event) props are put\n        // into a separate `attrs` object for spreading. Make sure to preserve\n        // original key casing\n        attrs[key] = value;\n      }\n    }\n  }\n\n  if (needCastKeys) {\n    const rawCurrentProps = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(props);\n\n    for (let i = 0; i < needCastKeys.length; i++) {\n      const key = needCastKeys[i];\n      props[key] = resolvePropValue(options, rawCurrentProps, key, rawCurrentProps[key]);\n    }\n  }\n}\n\nfunction resolvePropValue(options, props, key, value) {\n  const opt = options[key];\n\n  if (opt != null) {\n    const hasDefault = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(opt, 'default'); // default values\n\n    if (hasDefault && value === undefined) {\n      const defaultValue = opt.default;\n      value = opt.type !== Function && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(defaultValue) ? defaultValue() : defaultValue;\n    } // boolean casting\n\n\n    if (opt[0\n    /* shouldCast */\n    ]) {\n      if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(props, key) && !hasDefault) {\n        value = false;\n      } else if (opt[1\n      /* shouldCastTrue */\n      ] && (value === '' || value === Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hyphenate */ \"l\"])(key))) {\n        value = true;\n      }\n    }\n  }\n\n  return value;\n}\n\nfunction normalizePropsOptions(comp) {\n  if (comp.__props) {\n    return comp.__props;\n  }\n\n  const raw = comp.props;\n  const normalized = {};\n  const needCastKeys = []; // apply mixin/extends props\n\n  let hasExtends = false;\n\n  if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(comp)) {\n    const extendProps = raw => {\n      const [props, keys] = normalizePropsOptions(raw);\n      Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(normalized, props);\n      if (keys) needCastKeys.push(...keys);\n    };\n\n    if (comp.extends) {\n      hasExtends = true;\n      extendProps(comp.extends);\n    }\n\n    if (comp.mixins) {\n      hasExtends = true;\n      comp.mixins.forEach(extendProps);\n    }\n  }\n\n  if (!raw && !hasExtends) {\n    return comp.__props = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_ARR */ \"a\"];\n  }\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(raw)) {\n    for (let i = 0; i < raw.length; i++) {\n      if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(raw[i])) {\n        warn(`props must be strings when using array syntax.`, raw[i]);\n      }\n\n      const normalizedKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(raw[i]);\n\n      if (validatePropName(normalizedKey)) {\n        normalized[normalizedKey] = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n      }\n    }\n  } else if (raw) {\n    if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(raw)) {\n      warn(`invalid props options`, raw);\n    }\n\n    for (const key in raw) {\n      const normalizedKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* camelize */ \"e\"])(key);\n\n      if (validatePropName(normalizedKey)) {\n        const opt = raw[key];\n        const prop = normalized[normalizedKey] = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(opt) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(opt) ? {\n          type: opt\n        } : opt;\n\n        if (prop) {\n          const booleanIndex = getTypeIndex(Boolean, prop.type);\n          const stringIndex = getTypeIndex(String, prop.type);\n          prop[0\n          /* shouldCast */\n          ] = booleanIndex > -1;\n          prop[1\n          /* shouldCastTrue */\n          ] = stringIndex < 0 || booleanIndex < stringIndex; // if the prop needs boolean casting or default value\n\n          if (booleanIndex > -1 || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(prop, 'default')) {\n            needCastKeys.push(normalizedKey);\n          }\n        }\n      }\n    }\n  }\n\n  const normalizedEntry = [normalized, needCastKeys];\n  comp.__props = normalizedEntry;\n  return normalizedEntry;\n} // use function string name to check type constructors\n// so that it works across vms / iframes.\n\n\nfunction getType(ctor) {\n  const match = ctor && ctor.toString().match(/^\\s*function (\\w+)/);\n  return match ? match[1] : '';\n}\n\nfunction isSameType(a, b) {\n  return getType(a) === getType(b);\n}\n\nfunction getTypeIndex(type, expectedTypes) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(expectedTypes)) {\n    for (let i = 0, len = expectedTypes.length; i < len; i++) {\n      if (isSameType(expectedTypes[i], type)) {\n        return i;\n      }\n    }\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(expectedTypes)) {\n    return isSameType(expectedTypes, type) ? 0 : -1;\n  }\n\n  return -1;\n}\n/**\r\n * dev only\r\n */\n\n\nfunction validateProps(props, comp) {\n  const rawValues = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(props);\n  const options = normalizePropsOptions(comp)[0];\n\n  for (const key in options) {\n    let opt = options[key];\n    if (opt == null) continue;\n    validateProp(key, rawValues[key], opt, !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(rawValues, key));\n  }\n}\n/**\r\n * dev only\r\n */\n\n\nfunction validatePropName(key) {\n  if (key[0] !== '$') {\n    return true;\n  } else if (true) {\n    warn(`Invalid prop name: \"${key}\" is a reserved property.`);\n  }\n\n  return false;\n}\n/**\r\n * dev only\r\n */\n\n\nfunction validateProp(name, value, prop, isAbsent) {\n  const {\n    type,\n    required,\n    validator\n  } = prop; // required!\n\n  if (required && isAbsent) {\n    warn('Missing required prop: \"' + name + '\"');\n    return;\n  } // missing but optional\n\n\n  if (value == null && !prop.required) {\n    return;\n  } // type check\n\n\n  if (type != null && type !== true) {\n    let isValid = false;\n    const types = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(type) ? type : [type];\n    const expectedTypes = []; // value is valid as long as one of the specified types match\n\n    for (let i = 0; i < types.length && !isValid; i++) {\n      const {\n        valid,\n        expectedType\n      } = assertType(value, types[i]);\n      expectedTypes.push(expectedType || '');\n      isValid = valid;\n    }\n\n    if (!isValid) {\n      warn(getInvalidTypeMessage(name, value, expectedTypes));\n      return;\n    }\n  } // custom validator\n\n\n  if (validator && !validator(value)) {\n    warn('Invalid prop: custom validator check failed for prop \"' + name + '\".');\n  }\n}\n\nconst isSimpleType = /*#__PURE__*/Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* makeMap */ \"C\"])('String,Number,Boolean,Function,Symbol');\n/**\r\n * dev only\r\n */\n\nfunction assertType(value, type) {\n  let valid;\n  const expectedType = getType(type);\n\n  if (isSimpleType(expectedType)) {\n    const t = typeof value;\n    valid = t === expectedType.toLowerCase(); // for primitive wrapper objects\n\n    if (!valid && t === 'object') {\n      valid = value instanceof type;\n    }\n  } else if (expectedType === 'Object') {\n    valid = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* toRawType */ \"I\"])(value) === 'Object';\n  } else if (expectedType === 'Array') {\n    valid = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(value);\n  } else {\n    valid = value instanceof type;\n  }\n\n  return {\n    valid,\n    expectedType\n  };\n}\n/**\r\n * dev only\r\n */\n\n\nfunction getInvalidTypeMessage(name, value, expectedTypes) {\n  let message = `Invalid prop: type check failed for prop \"${name}\".` + ` Expected ${expectedTypes.map(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"]).join(', ')}`;\n  const expectedType = expectedTypes[0];\n  const receivedType = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* toRawType */ \"I\"])(value);\n  const expectedValue = styleValue(value, expectedType);\n  const receivedValue = styleValue(value, receivedType); // check if we need to specify expected value\n\n  if (expectedTypes.length === 1 && isExplicable(expectedType) && !isBoolean(expectedType, receivedType)) {\n    message += ` with value ${expectedValue}`;\n  }\n\n  message += `, got ${receivedType} `; // check if we need to specify received value\n\n  if (isExplicable(receivedType)) {\n    message += `with value ${receivedValue}.`;\n  }\n\n  return message;\n}\n/**\r\n * dev only\r\n */\n\n\nfunction styleValue(value, type) {\n  if (type === 'String') {\n    return `\"${value}\"`;\n  } else if (type === 'Number') {\n    return `${Number(value)}`;\n  } else {\n    return `${value}`;\n  }\n}\n/**\r\n * dev only\r\n */\n\n\nfunction isExplicable(type) {\n  const explicitTypes = ['string', 'number', 'boolean'];\n  return explicitTypes.some(elem => type.toLowerCase() === elem);\n}\n/**\r\n * dev only\r\n */\n\n\nfunction isBoolean(...args) {\n  return args.some(elem => elem.toLowerCase() === 'boolean');\n}\n\nfunction injectHook(type, hook, target = currentInstance, prepend = false) {\n  if (target) {\n    const hooks = target[type] || (target[type] = []); // cache the error handling wrapper for injected hooks so the same hook\n    // can be properly deduped by the scheduler. \"__weh\" stands for \"with error\n    // handling\".\n\n    const wrappedHook = hook.__weh || (hook.__weh = (...args) => {\n      if (target.isUnmounted) {\n        return;\n      } // disable tracking inside all lifecycle hooks\n      // since they can potentially be called inside effects.\n\n\n      Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* pauseTracking */ \"f\"])(); // Set currentInstance during hook invocation.\n      // This assumes the hook does not synchronously trigger other hooks, which\n      // can only be false when the user does something really funky.\n\n      setCurrentInstance(target);\n      const res = callWithAsyncErrorHandling(hook, target, type, args);\n      setCurrentInstance(null);\n      Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* resetTracking */ \"j\"])();\n      return res;\n    });\n\n    if (prepend) {\n      hooks.unshift(wrappedHook);\n    } else {\n      hooks.push(wrappedHook);\n    }\n  } else if (true) {\n    const apiName = `on${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(ErrorTypeStrings[type].replace(/ hook$/, ''))}`;\n    warn(`${apiName} is called when there is no active component instance to be ` + `associated with. ` + `Lifecycle injection APIs can only be used during execution of setup().` + (` If you are using async setup(), make sure to register lifecycle ` + `hooks before the first await statement.`));\n  }\n}\n\nconst createHook = lifecycle => (hook, target = currentInstance) => // post-create lifecycle registrations are noops during SSR\n!isInSSRComponentSetup && injectHook(lifecycle, hook, target);\n\nconst onBeforeMount = createHook(\"bm\"\n/* BEFORE_MOUNT */\n);\nconst onMounted = createHook(\"m\"\n/* MOUNTED */\n);\nconst onBeforeUpdate = createHook(\"bu\"\n/* BEFORE_UPDATE */\n);\nconst onUpdated = createHook(\"u\"\n/* UPDATED */\n);\nconst onBeforeUnmount = createHook(\"bum\"\n/* BEFORE_UNMOUNT */\n);\nconst onUnmounted = createHook(\"um\"\n/* UNMOUNTED */\n);\nconst onRenderTriggered = createHook(\"rtg\"\n/* RENDER_TRIGGERED */\n);\nconst onRenderTracked = createHook(\"rtc\"\n/* RENDER_TRACKED */\n);\n\nconst onErrorCaptured = (hook, target = currentInstance) => {\n  injectHook(\"ec\"\n  /* ERROR_CAPTURED */\n  , hook, target);\n};\n\nfunction useTransitionState() {\n  const state = {\n    isMounted: false,\n    isLeaving: false,\n    isUnmounting: false,\n    leavingVNodes: new Map()\n  };\n  onMounted(() => {\n    state.isMounted = true;\n  });\n  onBeforeUnmount(() => {\n    state.isUnmounting = true;\n  });\n  return state;\n}\n\nconst BaseTransitionImpl = {\n  name: `BaseTransition`,\n  props: {\n    mode: String,\n    appear: Boolean,\n    persisted: Boolean,\n    // enter\n    onBeforeEnter: Function,\n    onEnter: Function,\n    onAfterEnter: Function,\n    onEnterCancelled: Function,\n    // leave\n    onBeforeLeave: Function,\n    onLeave: Function,\n    onAfterLeave: Function,\n    onLeaveCancelled: Function,\n    // appear\n    onBeforeAppear: Function,\n    onAppear: Function,\n    onAfterAppear: Function,\n    onAppearCancelled: Function\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const instance = getCurrentInstance();\n    const state = useTransitionState();\n    let prevTransitionKey;\n    return () => {\n      const children = slots.default && getTransitionRawChildren(slots.default(), true);\n\n      if (!children || !children.length) {\n        return;\n      } // warn multiple elements\n\n\n      if ( true && children.length > 1) {\n        warn('<transition> can only be used on a single element or component. Use ' + '<transition-group> for lists.');\n      } // there's no need to track reactivity for these props so use the raw\n      // props for a bit better perf\n\n\n      const rawProps = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(props);\n      const {\n        mode\n      } = rawProps; // check mode\n\n      if ( true && mode && !['in-out', 'out-in', 'default'].includes(mode)) {\n        warn(`invalid <transition> mode: ${mode}`);\n      } // at this point children has a guaranteed length of 1.\n\n\n      const child = children[0];\n\n      if (state.isLeaving) {\n        return emptyPlaceholder(child);\n      } // in the case of <transition><keep-alive/></transition>, we need to\n      // compare the type of the kept-alive children.\n\n\n      const innerChild = getKeepAliveChild(child);\n\n      if (!innerChild) {\n        return emptyPlaceholder(child);\n      }\n\n      const enterHooks = innerChild.transition = resolveTransitionHooks(innerChild, rawProps, state, instance);\n      const oldChild = instance.subTree;\n      const oldInnerChild = oldChild && getKeepAliveChild(oldChild);\n      let transitionKeyChanged = false;\n      const {\n        getTransitionKey\n      } = innerChild.type;\n\n      if (getTransitionKey) {\n        const key = getTransitionKey();\n\n        if (prevTransitionKey === undefined) {\n          prevTransitionKey = key;\n        } else if (key !== prevTransitionKey) {\n          prevTransitionKey = key;\n          transitionKeyChanged = true;\n        }\n      } // handle mode\n\n\n      if (oldInnerChild && oldInnerChild.type !== Comment && (!isSameVNodeType(innerChild, oldInnerChild) || transitionKeyChanged)) {\n        const leavingHooks = resolveTransitionHooks(oldInnerChild, rawProps, state, instance); // update old tree's hooks in case of dynamic transition\n\n        setTransitionHooks(oldInnerChild, leavingHooks); // switching between different views\n\n        if (mode === 'out-in') {\n          state.isLeaving = true; // return placeholder node and queue update when leave finishes\n\n          leavingHooks.afterLeave = () => {\n            state.isLeaving = false;\n            instance.update();\n          };\n\n          return emptyPlaceholder(child);\n        } else if (mode === 'in-out') {\n          leavingHooks.delayLeave = (el, earlyRemove, delayedLeave) => {\n            const leavingVNodesCache = getLeavingNodesForType(state, oldInnerChild);\n            leavingVNodesCache[String(oldInnerChild.key)] = oldInnerChild; // early removal callback\n\n            el._leaveCb = () => {\n              earlyRemove();\n              el._leaveCb = undefined;\n              delete enterHooks.delayedLeave;\n            };\n\n            enterHooks.delayedLeave = delayedLeave;\n          };\n        }\n      }\n\n      return child;\n    };\n  }\n\n}; // export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n\nconst BaseTransition = BaseTransitionImpl;\n\nfunction getLeavingNodesForType(state, vnode) {\n  const {\n    leavingVNodes\n  } = state;\n  let leavingVNodesCache = leavingVNodes.get(vnode.type);\n\n  if (!leavingVNodesCache) {\n    leavingVNodesCache = Object.create(null);\n    leavingVNodes.set(vnode.type, leavingVNodesCache);\n  }\n\n  return leavingVNodesCache;\n} // The transition hooks are attached to the vnode as vnode.transition\n// and will be called at appropriate timing in the renderer.\n\n\nfunction resolveTransitionHooks(vnode, {\n  appear,\n  persisted = false,\n  onBeforeEnter,\n  onEnter,\n  onAfterEnter,\n  onEnterCancelled,\n  onBeforeLeave,\n  onLeave,\n  onAfterLeave,\n  onLeaveCancelled,\n  onBeforeAppear,\n  onAppear,\n  onAfterAppear,\n  onAppearCancelled\n}, state, instance) {\n  const key = String(vnode.key);\n  const leavingVNodesCache = getLeavingNodesForType(state, vnode);\n\n  const callHook = (hook, args) => {\n    hook && callWithAsyncErrorHandling(hook, instance, 9\n    /* TRANSITION_HOOK */\n    , args);\n  };\n\n  const hooks = {\n    persisted,\n\n    beforeEnter(el) {\n      let hook = onBeforeEnter;\n\n      if (!state.isMounted) {\n        if (appear) {\n          hook = onBeforeAppear || onBeforeEnter;\n        } else {\n          return;\n        }\n      } // for same element (v-show)\n\n\n      if (el._leaveCb) {\n        el._leaveCb(true\n        /* cancelled */\n        );\n      } // for toggled element with same key (v-if)\n\n\n      const leavingVNode = leavingVNodesCache[key];\n\n      if (leavingVNode && isSameVNodeType(vnode, leavingVNode) && leavingVNode.el._leaveCb) {\n        // force early removal (not cancelled)\n        leavingVNode.el._leaveCb();\n      }\n\n      callHook(hook, [el]);\n    },\n\n    enter(el) {\n      let hook = onEnter;\n      let afterHook = onAfterEnter;\n      let cancelHook = onEnterCancelled;\n\n      if (!state.isMounted) {\n        if (appear) {\n          hook = onAppear || onEnter;\n          afterHook = onAfterAppear || onAfterEnter;\n          cancelHook = onAppearCancelled || onEnterCancelled;\n        } else {\n          return;\n        }\n      }\n\n      let called = false;\n\n      const done = el._enterCb = cancelled => {\n        if (called) return;\n        called = true;\n\n        if (cancelled) {\n          callHook(cancelHook, [el]);\n        } else {\n          callHook(afterHook, [el]);\n        }\n\n        if (hooks.delayedLeave) {\n          hooks.delayedLeave();\n        }\n\n        el._enterCb = undefined;\n      };\n\n      if (hook) {\n        hook(el, done);\n\n        if (hook.length <= 1) {\n          done();\n        }\n      } else {\n        done();\n      }\n    },\n\n    leave(el, remove) {\n      const key = String(vnode.key);\n\n      if (el._enterCb) {\n        el._enterCb(true\n        /* cancelled */\n        );\n      }\n\n      if (state.isUnmounting) {\n        return remove();\n      }\n\n      callHook(onBeforeLeave, [el]);\n      let called = false;\n\n      const done = el._leaveCb = cancelled => {\n        if (called) return;\n        called = true;\n        remove();\n\n        if (cancelled) {\n          callHook(onLeaveCancelled, [el]);\n        } else {\n          callHook(onAfterLeave, [el]);\n        }\n\n        el._leaveCb = undefined;\n\n        if (leavingVNodesCache[key] === vnode) {\n          delete leavingVNodesCache[key];\n        }\n      };\n\n      leavingVNodesCache[key] = vnode;\n\n      if (onLeave) {\n        onLeave(el, done);\n\n        if (onLeave.length <= 1) {\n          done();\n        }\n      } else {\n        done();\n      }\n    }\n\n  };\n  return hooks;\n} // the placeholder really only handles one special case: KeepAlive\n// in the case of a KeepAlive in a leave phase we need to return a KeepAlive\n// placeholder with empty content to avoid the KeepAlive instance from being\n// unmounted.\n\n\nfunction emptyPlaceholder(vnode) {\n  if (isKeepAlive(vnode)) {\n    vnode = cloneVNode(vnode);\n    vnode.children = null;\n    return vnode;\n  }\n}\n\nfunction getKeepAliveChild(vnode) {\n  return isKeepAlive(vnode) ? vnode.children ? vnode.children[0] : undefined : vnode;\n}\n\nfunction setTransitionHooks(vnode, hooks) {\n  if (vnode.shapeFlag & 6\n  /* COMPONENT */\n  && vnode.component) {\n    setTransitionHooks(vnode.component.subTree, hooks);\n  } else {\n    vnode.transition = hooks;\n  }\n}\n\nfunction getTransitionRawChildren(children, keepComment = false) {\n  let ret = [];\n  let keyedFragmentCount = 0;\n\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i]; // handle fragment children case, e.g. v-for\n\n    if (child.type === Fragment) {\n      if (child.patchFlag & 128\n      /* KEYED_FRAGMENT */\n      ) keyedFragmentCount++;\n      ret = ret.concat(getTransitionRawChildren(child.children, keepComment));\n    } // comment placeholders should be skipped, e.g. v-if\n    else if (keepComment || child.type !== Comment) {\n        ret.push(child);\n      }\n  } // #1126 if a transition children list contains multiple sub fragments, these\n  // fragments will be merged into a flat children array. Since each v-for\n  // fragment may contain different static bindings inside, we need to de-top\n  // these children to force full diffs to ensure correct behavior.\n\n\n  if (keyedFragmentCount > 1) {\n    for (let i = 0; i < ret.length; i++) {\n      ret[i].patchFlag = -2\n      /* BAIL */\n      ;\n    }\n  }\n\n  return ret;\n}\n\nconst isKeepAlive = vnode => vnode.type.__isKeepAlive;\n\nconst KeepAliveImpl = {\n  name: `KeepAlive`,\n  // Marker for special handling inside the renderer. We are not using a ===\n  // check directly on KeepAlive in the renderer, because importing it directly\n  // would prevent it from being tree-shaken.\n  __isKeepAlive: true,\n  inheritRef: true,\n  props: {\n    include: [String, RegExp, Array],\n    exclude: [String, RegExp, Array],\n    max: [String, Number]\n  },\n\n  setup(props, {\n    slots\n  }) {\n    const cache = new Map();\n    const keys = new Set();\n    let current = null;\n    const instance = getCurrentInstance();\n    const parentSuspense = instance.suspense; // KeepAlive communicates with the instantiated renderer via the\n    // ctx where the renderer passes in its internals,\n    // and the KeepAlive instance exposes activate/deactivate implementations.\n    // The whole point of this is to avoid importing KeepAlive directly in the\n    // renderer to facilitate tree-shaking.\n\n    const sharedContext = instance.ctx;\n    const {\n      renderer: {\n        p: patch,\n        m: move,\n        um: _unmount,\n        o: {\n          createElement\n        }\n      }\n    } = sharedContext;\n    const storageContainer = createElement('div');\n\n    sharedContext.activate = (vnode, container, anchor, isSVG, optimized) => {\n      const instance = vnode.component;\n      move(vnode, container, anchor, 0\n      /* ENTER */\n      , parentSuspense); // in case props have changed\n\n      patch(instance.vnode, vnode, container, anchor, instance, parentSuspense, isSVG, optimized);\n      queuePostRenderEffect(() => {\n        instance.isDeactivated = false;\n\n        if (instance.a) {\n          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(instance.a);\n        }\n\n        const vnodeHook = vnode.props && vnode.props.onVnodeMounted;\n\n        if (vnodeHook) {\n          invokeVNodeHook(vnodeHook, instance.parent, vnode);\n        }\n      }, parentSuspense);\n    };\n\n    sharedContext.deactivate = vnode => {\n      const instance = vnode.component;\n      move(vnode, storageContainer, null, 1\n      /* LEAVE */\n      , parentSuspense);\n      queuePostRenderEffect(() => {\n        if (instance.da) {\n          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(instance.da);\n        }\n\n        const vnodeHook = vnode.props && vnode.props.onVnodeUnmounted;\n\n        if (vnodeHook) {\n          invokeVNodeHook(vnodeHook, instance.parent, vnode);\n        }\n\n        instance.isDeactivated = true;\n      }, parentSuspense);\n    };\n\n    function unmount(vnode) {\n      // reset the shapeFlag so it can be properly unmounted\n      resetShapeFlag(vnode);\n\n      _unmount(vnode, instance, parentSuspense);\n    }\n\n    function pruneCache(filter) {\n      cache.forEach((vnode, key) => {\n        const name = getName(vnode.type);\n\n        if (name && (!filter || !filter(name))) {\n          pruneCacheEntry(key);\n        }\n      });\n    }\n\n    function pruneCacheEntry(key) {\n      const cached = cache.get(key);\n\n      if (!current || cached.type !== current.type) {\n        unmount(cached);\n      } else if (current) {\n        // current active instance should no longer be kept-alive.\n        // we can't unmount it now but it might be later, so reset its flag now.\n        resetShapeFlag(current);\n      }\n\n      cache.delete(key);\n      keys.delete(key);\n    }\n\n    watch(() => [props.include, props.exclude], ([include, exclude]) => {\n      include && pruneCache(name => matches(include, name));\n      exclude && pruneCache(name => matches(exclude, name));\n    }); // cache sub tree in beforeMount/Update (i.e. right after the render)\n\n    let pendingCacheKey = null;\n\n    const cacheSubtree = () => {\n      // fix #1621, the pendingCacheKey could be 0\n      if (pendingCacheKey != null) {\n        cache.set(pendingCacheKey, instance.subTree);\n      }\n    };\n\n    onBeforeMount(cacheSubtree);\n    onBeforeUpdate(cacheSubtree);\n    onBeforeUnmount(() => {\n      cache.forEach(cached => {\n        const {\n          subTree,\n          suspense\n        } = instance;\n\n        if (cached.type === subTree.type) {\n          // current instance will be unmounted as part of keep-alive's unmount\n          resetShapeFlag(subTree); // but invoke its deactivated hook here\n\n          const da = subTree.component.da;\n          da && queuePostRenderEffect(da, suspense);\n          return;\n        }\n\n        unmount(cached);\n      });\n    });\n    return () => {\n      pendingCacheKey = null;\n\n      if (!slots.default) {\n        return null;\n      }\n\n      const children = slots.default();\n      let vnode = children[0];\n\n      if (children.length > 1) {\n        if (true) {\n          warn(`KeepAlive should contain exactly one component child.`);\n        }\n\n        current = null;\n        return children;\n      } else if (!isVNode(vnode) || !(vnode.shapeFlag & 4\n      /* STATEFUL_COMPONENT */\n      )) {\n        current = null;\n        return vnode;\n      }\n\n      const comp = vnode.type;\n      const name = getName(comp);\n      const {\n        include,\n        exclude,\n        max\n      } = props;\n\n      if (include && (!name || !matches(include, name)) || exclude && name && matches(exclude, name)) {\n        return current = vnode;\n      }\n\n      const key = vnode.key == null ? comp : vnode.key;\n      const cachedVNode = cache.get(key); // clone vnode if it's reused because we are going to mutate it\n\n      if (vnode.el) {\n        vnode = cloneVNode(vnode);\n      } // #1513 it's possible for the returned vnode to be cloned due to attr\n      // fallthrough or scopeId, so the vnode here may not be the final vnode\n      // that is mounted. Instead of caching it directly, we store the pending\n      // key and cache `instance.subTree` (the normalized vnode) in\n      // beforeMount/beforeUpdate hooks.\n\n\n      pendingCacheKey = key;\n\n      if (cachedVNode) {\n        // copy over mounted state\n        vnode.el = cachedVNode.el;\n        vnode.component = cachedVNode.component;\n\n        if (vnode.transition) {\n          // recursively update transition hooks on subTree\n          setTransitionHooks(vnode, vnode.transition);\n        } // avoid vnode being mounted as fresh\n\n\n        vnode.shapeFlag |= 512\n        /* COMPONENT_KEPT_ALIVE */\n        ; // make this key the freshest\n\n        keys.delete(key);\n        keys.add(key);\n      } else {\n        keys.add(key); // prune oldest entry\n\n        if (max && keys.size > parseInt(max, 10)) {\n          pruneCacheEntry(keys.values().next().value);\n        }\n      } // avoid vnode being unmounted\n\n\n      vnode.shapeFlag |= 256\n      /* COMPONENT_SHOULD_KEEP_ALIVE */\n      ;\n      current = vnode;\n      return vnode;\n    };\n  }\n\n}; // export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n\nconst KeepAlive = KeepAliveImpl;\n\nfunction getName(comp) {\n  return comp.displayName || comp.name;\n}\n\nfunction matches(pattern, name) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(pattern)) {\n    return pattern.some(p => matches(p, name));\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(pattern)) {\n    return pattern.split(',').indexOf(name) > -1;\n  } else if (pattern.test) {\n    return pattern.test(name);\n  }\n  /* istanbul ignore next */\n\n\n  return false;\n}\n\nfunction onActivated(hook, target) {\n  registerKeepAliveHook(hook, \"a\"\n  /* ACTIVATED */\n  , target);\n}\n\nfunction onDeactivated(hook, target) {\n  registerKeepAliveHook(hook, \"da\"\n  /* DEACTIVATED */\n  , target);\n}\n\nfunction registerKeepAliveHook(hook, type, target = currentInstance) {\n  // cache the deactivate branch check wrapper for injected hooks so the same\n  // hook can be properly deduped by the scheduler. \"__wdc\" stands for \"with\n  // deactivation check\".\n  const wrappedHook = hook.__wdc || (hook.__wdc = () => {\n    // only fire the hook if the target instance is NOT in a deactivated branch.\n    let current = target;\n\n    while (current) {\n      if (current.isDeactivated) {\n        return;\n      }\n\n      current = current.parent;\n    }\n\n    hook();\n  });\n\n  injectHook(type, wrappedHook, target); // In addition to registering it on the target instance, we walk up the parent\n  // chain and register it on all ancestor instances that are keep-alive roots.\n  // This avoids the need to walk the entire component tree when invoking these\n  // hooks, and more importantly, avoids the need to track child components in\n  // arrays.\n\n  if (target) {\n    let current = target.parent;\n\n    while (current && current.parent) {\n      if (isKeepAlive(current.parent.vnode)) {\n        injectToKeepAliveRoot(wrappedHook, type, target, current);\n      }\n\n      current = current.parent;\n    }\n  }\n}\n\nfunction injectToKeepAliveRoot(hook, type, target, keepAliveRoot) {\n  injectHook(type, hook, keepAliveRoot, true\n  /* prepend */\n  );\n  onUnmounted(() => {\n    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* remove */ \"F\"])(keepAliveRoot[type], hook);\n  }, target);\n}\n\nfunction resetShapeFlag(vnode) {\n  let shapeFlag = vnode.shapeFlag;\n\n  if (shapeFlag & 256\n  /* COMPONENT_SHOULD_KEEP_ALIVE */\n  ) {\n      shapeFlag -= 256\n      /* COMPONENT_SHOULD_KEEP_ALIVE */\n      ;\n    }\n\n  if (shapeFlag & 512\n  /* COMPONENT_KEPT_ALIVE */\n  ) {\n      shapeFlag -= 512\n      /* COMPONENT_KEPT_ALIVE */\n      ;\n    }\n\n  vnode.shapeFlag = shapeFlag;\n}\n\nconst isInternalKey = key => key[0] === '_' || key === '$stable';\n\nconst normalizeSlotValue = value => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(value) ? value.map(normalizeVNode) : [normalizeVNode(value)];\n\nconst normalizeSlot = (key, rawSlot, ctx) => withCtx(props => {\n  if ( true && currentInstance) {\n    warn(`Slot \"${key}\" invoked outside of the render function: ` + `this will not track dependencies used in the slot. ` + `Invoke the slot function inside the render function instead.`);\n  }\n\n  return normalizeSlotValue(rawSlot(props));\n}, ctx);\n\nconst normalizeObjectSlots = (rawSlots, slots) => {\n  const ctx = rawSlots._ctx;\n\n  for (const key in rawSlots) {\n    if (isInternalKey(key)) continue;\n    const value = rawSlots[key];\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(value)) {\n      slots[key] = normalizeSlot(key, value, ctx);\n    } else if (value != null) {\n      if (true) {\n        warn(`Non-function value encountered for slot \"${key}\". ` + `Prefer function slots for better performance.`);\n      }\n\n      const normalized = normalizeSlotValue(value);\n\n      slots[key] = () => normalized;\n    }\n  }\n};\n\nconst normalizeVNodeSlots = (instance, children) => {\n  if ( true && !isKeepAlive(instance.vnode)) {\n    warn(`Non-function value encountered for default slot. ` + `Prefer function slots for better performance.`);\n  }\n\n  const normalized = normalizeSlotValue(children);\n\n  instance.slots.default = () => normalized;\n};\n\nconst initSlots = (instance, children) => {\n  if (instance.vnode.shapeFlag & 32\n  /* SLOTS_CHILDREN */\n  ) {\n      const type = children._;\n\n      if (type) {\n        instance.slots = children; // make compiler marker non-enumerable\n\n        Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* def */ \"g\"])(children, '_', type);\n      } else {\n        normalizeObjectSlots(children, instance.slots = {});\n      }\n    } else {\n    instance.slots = {};\n\n    if (children) {\n      normalizeVNodeSlots(instance, children);\n    }\n  }\n\n  Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* def */ \"g\"])(instance.slots, InternalObjectKey, 1);\n};\n\nconst updateSlots = (instance, children) => {\n  const {\n    vnode,\n    slots\n  } = instance;\n  let needDeletionCheck = true;\n  let deletionComparisonTarget = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n\n  if (vnode.shapeFlag & 32\n  /* SLOTS_CHILDREN */\n  ) {\n      const type = children._;\n\n      if (type) {\n        // compiled slots.\n        if ( true && isHmrUpdating) {\n          // Parent was HMR updated so slot content may have changed.\n          // force update slots and mark instance for hmr as well\n          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(slots, children);\n        } else if (type === 1\n        /* STABLE */\n        ) {\n            // compiled AND stable.\n            // no need to update, and skip stale slots removal.\n            needDeletionCheck = false;\n          } else {\n          // compiled but dynamic (v-if/v-for on slots) - update slots, but skip\n          // normalization.\n          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(slots, children);\n        }\n      } else {\n        needDeletionCheck = !children.$stable;\n        normalizeObjectSlots(children, slots);\n      }\n\n      deletionComparisonTarget = children;\n    } else if (children) {\n    // non slot object children (direct value) passed to a component\n    normalizeVNodeSlots(instance, children);\n    deletionComparisonTarget = {\n      default: 1\n    };\n  } // delete stale slots\n\n\n  if (needDeletionCheck) {\n    for (const key in slots) {\n      if (!isInternalKey(key) && !(key in deletionComparisonTarget)) {\n        delete slots[key];\n      }\n    }\n  }\n};\n/**\r\nRuntime helper for applying directives to a vnode. Example usage:\r\n\nconst comp = resolveComponent('comp')\r\nconst foo = resolveDirective('foo')\r\nconst bar = resolveDirective('bar')\r\n\nreturn withDirectives(h(comp), [\r\n  [foo, this.x],\r\n  [bar, this.y]\r\n])\r\n*/\n\n\nconst isBuiltInDirective = /*#__PURE__*/Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* makeMap */ \"C\"])('bind,cloak,else-if,else,for,html,if,model,on,once,pre,show,slot,text');\n\nfunction validateDirectiveName(name) {\n  if (isBuiltInDirective(name)) {\n    warn('Do not use built-in directive ids as custom directive id: ' + name);\n  }\n}\n/**\r\n * Adds directives to a VNode.\r\n */\n\n\nfunction withDirectives(vnode, directives) {\n  const internalInstance = currentRenderingInstance;\n\n  if (internalInstance === null) {\n     true && warn(`withDirectives can only be used inside render functions.`);\n    return vnode;\n  }\n\n  const instance = internalInstance.proxy;\n  const bindings = vnode.dirs || (vnode.dirs = []);\n\n  for (let i = 0; i < directives.length; i++) {\n    let [dir, value, arg, modifiers = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"]] = directives[i];\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(dir)) {\n      dir = {\n        mounted: dir,\n        updated: dir\n      };\n    }\n\n    bindings.push({\n      dir,\n      instance,\n      value,\n      oldValue: void 0,\n      arg,\n      modifiers\n    });\n  }\n\n  return vnode;\n}\n\nfunction invokeDirectiveHook(vnode, prevVNode, instance, name) {\n  const bindings = vnode.dirs;\n  const oldBindings = prevVNode && prevVNode.dirs;\n\n  for (let i = 0; i < bindings.length; i++) {\n    const binding = bindings[i];\n\n    if (oldBindings) {\n      binding.oldValue = oldBindings[i].value;\n    }\n\n    const hook = binding.dir[name];\n\n    if (hook) {\n      callWithAsyncErrorHandling(hook, instance, 8\n      /* DIRECTIVE_HOOK */\n      , [vnode.el, binding, vnode, prevVNode]);\n    }\n  }\n}\n\nlet devtools;\n\nfunction setDevtoolsHook(hook) {\n  devtools = hook;\n}\n\nfunction devtoolsInitApp(app, version) {\n  // TODO queue if devtools is undefined\n  if (!devtools) return;\n  devtools.emit(\"app:init\"\n  /* APP_INIT */\n  , app, version, {\n    Fragment,\n    Text,\n    Comment,\n    Static\n  });\n}\n\nfunction devtoolsUnmountApp(app) {\n  if (!devtools) return;\n  devtools.emit(\"app:unmount\"\n  /* APP_UNMOUNT */\n  , app);\n}\n\nconst devtoolsComponentAdded = /*#__PURE__*/createDevtoolsHook(\"component:added\"\n/* COMPONENT_ADDED */\n);\nconst devtoolsComponentUpdated = /*#__PURE__*/createDevtoolsHook(\"component:updated\"\n/* COMPONENT_UPDATED */\n);\nconst devtoolsComponentRemoved = /*#__PURE__*/createDevtoolsHook(\"component:removed\"\n/* COMPONENT_REMOVED */\n);\n\nfunction createDevtoolsHook(hook) {\n  return component => {\n    if (!devtools) return;\n    devtools.emit(hook, component.appContext.app, component.uid, component.parent ? component.parent.uid : undefined);\n  };\n}\n\nfunction createAppContext() {\n  return {\n    app: null,\n    config: {\n      isNativeTag: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NO */ \"c\"],\n      performance: false,\n      globalProperties: {},\n      optionMergeStrategies: {},\n      isCustomElement: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NO */ \"c\"],\n      errorHandler: undefined,\n      warnHandler: undefined\n    },\n    mixins: [],\n    components: {},\n    directives: {},\n    provides: Object.create(null)\n  };\n}\n\nfunction createAppAPI(render, hydrate) {\n  return function createApp(rootComponent, rootProps = null) {\n    if (rootProps != null && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(rootProps)) {\n       true && warn(`root props passed to app.mount() must be an object.`);\n      rootProps = null;\n    }\n\n    const context = createAppContext();\n    const installedPlugins = new Set();\n    let isMounted = false;\n    const app = context.app = {\n      _component: rootComponent,\n      _props: rootProps,\n      _container: null,\n      _context: context,\n      version,\n\n      get config() {\n        return context.config;\n      },\n\n      set config(v) {\n        if (true) {\n          warn(`app.config cannot be replaced. Modify individual options instead.`);\n        }\n      },\n\n      use(plugin, ...options) {\n        if (installedPlugins.has(plugin)) {\n           true && warn(`Plugin has already been applied to target app.`);\n        } else if (plugin && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(plugin.install)) {\n          installedPlugins.add(plugin);\n          plugin.install(app, ...options);\n        } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(plugin)) {\n          installedPlugins.add(plugin);\n          plugin(app, ...options);\n        } else if (true) {\n          warn(`A plugin must either be a function or an object with an \"install\" ` + `function.`);\n        }\n\n        return app;\n      },\n\n      mixin(mixin) {\n        if (true) {\n          if (!context.mixins.includes(mixin)) {\n            context.mixins.push(mixin);\n          } else if (true) {\n            warn('Mixin has already been applied to target app' + (mixin.name ? `: ${mixin.name}` : ''));\n          }\n        } else {}\n\n        return app;\n      },\n\n      component(name, component) {\n        if (true) {\n          validateComponentName(name, context.config);\n        }\n\n        if (!component) {\n          return context.components[name];\n        }\n\n        if ( true && context.components[name]) {\n          warn(`Component \"${name}\" has already been registered in target app.`);\n        }\n\n        context.components[name] = component;\n        return app;\n      },\n\n      directive(name, directive) {\n        if (true) {\n          validateDirectiveName(name);\n        }\n\n        if (!directive) {\n          return context.directives[name];\n        }\n\n        if ( true && context.directives[name]) {\n          warn(`Directive \"${name}\" has already been registered in target app.`);\n        }\n\n        context.directives[name] = directive;\n        return app;\n      },\n\n      mount(rootContainer, isHydrate) {\n        if (!isMounted) {\n          const vnode = createVNode(rootComponent, rootProps); // store app context on the root VNode.\n          // this will be set on the root instance on initial mount.\n\n          vnode.appContext = context; // HMR root reload\n\n          if (true) {\n            context.reload = () => {\n              render(cloneVNode(vnode), rootContainer);\n            };\n          }\n\n          if (isHydrate && hydrate) {\n            hydrate(vnode, rootContainer);\n          } else {\n            render(vnode, rootContainer);\n          }\n\n          isMounted = true;\n          app._container = rootContainer;\n          rootContainer.__vue_app__ = app;\n\n          if (true) {\n            devtoolsInitApp(app, version);\n          }\n\n          return vnode.component.proxy;\n        } else if (true) {\n          warn(`App has already been mounted.\\n` + `If you want to remount the same app, move your app creation logic ` + `into a factory function and create fresh app instances for each ` + `mount - e.g. \\`const createMyApp = () => createApp(App)\\``);\n        }\n      },\n\n      unmount() {\n        if (isMounted) {\n          render(null, app._container);\n          devtoolsUnmountApp(app);\n        } else if (true) {\n          warn(`Cannot unmount an app that is not mounted.`);\n        }\n      },\n\n      provide(key, value) {\n        if ( true && key in context.provides) {\n          warn(`App already provides property with key \"${String(key)}\". ` + `It will be overwritten with the new value.`);\n        } // TypeScript doesn't allow symbols as index type\n        // https://github.com/Microsoft/TypeScript/issues/24587\n\n\n        context.provides[key] = value;\n        return app;\n      }\n\n    };\n    return app;\n  };\n}\n\nlet hasMismatch = false;\n\nconst isSVGContainer = container => /svg/.test(container.namespaceURI) && container.tagName !== 'foreignObject';\n\nconst isComment = node => node.nodeType === 8\n/* COMMENT */\n; // Note: hydration is DOM-specific\n// But we have to place it in core due to tight coupling with core - splitting\n// it out creates a ton of unnecessary complexity.\n// Hydration also depends on some renderer internal logic which needs to be\n// passed in via arguments.\n\n\nfunction createHydrationFunctions(rendererInternals) {\n  const {\n    mt: mountComponent,\n    p: patch,\n    o: {\n      patchProp,\n      nextSibling,\n      parentNode,\n      remove,\n      insert,\n      createComment\n    }\n  } = rendererInternals;\n\n  const hydrate = (vnode, container) => {\n    if ( true && !container.hasChildNodes()) {\n      warn(`Attempting to hydrate existing markup but container is empty. ` + `Performing full mount instead.`);\n      patch(null, vnode, container);\n      return;\n    }\n\n    hasMismatch = false;\n    hydrateNode(container.firstChild, vnode, null, null);\n    flushPostFlushCbs();\n\n    if (hasMismatch && !false) {\n      // this error should show up in production\n      console.error(`Hydration completed but contains mismatches.`);\n    }\n  };\n\n  const hydrateNode = (node, vnode, parentComponent, parentSuspense, optimized = false) => {\n    const isFragmentStart = isComment(node) && node.data === '[';\n\n    const onMismatch = () => handleMismatch(node, vnode, parentComponent, parentSuspense, isFragmentStart);\n\n    const {\n      type,\n      ref,\n      shapeFlag\n    } = vnode;\n    const domType = node.nodeType;\n    vnode.el = node;\n    let nextNode = null;\n\n    switch (type) {\n      case Text:\n        if (domType !== 3\n        /* TEXT */\n        ) {\n            nextNode = onMismatch();\n          } else {\n          if (node.data !== vnode.children) {\n            hasMismatch = true;\n             true && warn(`Hydration text mismatch:` + `\\n- Client: ${JSON.stringify(node.data)}` + `\\n- Server: ${JSON.stringify(vnode.children)}`);\n            node.data = vnode.children;\n          }\n\n          nextNode = nextSibling(node);\n        }\n\n        break;\n\n      case Comment:\n        if (domType !== 8\n        /* COMMENT */\n        || isFragmentStart) {\n          nextNode = onMismatch();\n        } else {\n          nextNode = nextSibling(node);\n        }\n\n        break;\n\n      case Static:\n        if (domType !== 1\n        /* ELEMENT */\n        ) {\n            nextNode = onMismatch();\n          } else {\n          // determine anchor, adopt content\n          nextNode = node; // if the static vnode has its content stripped during build,\n          // adopt it from the server-rendered HTML.\n\n          const needToAdoptContent = !vnode.children.length;\n\n          for (let i = 0; i < vnode.staticCount; i++) {\n            if (needToAdoptContent) vnode.children += nextNode.outerHTML;\n\n            if (i === vnode.staticCount - 1) {\n              vnode.anchor = nextNode;\n            }\n\n            nextNode = nextSibling(nextNode);\n          }\n\n          return nextNode;\n        }\n\n        break;\n\n      case Fragment:\n        if (!isFragmentStart) {\n          nextNode = onMismatch();\n        } else {\n          nextNode = hydrateFragment(node, vnode, parentComponent, parentSuspense, optimized);\n        }\n\n        break;\n\n      default:\n        if (shapeFlag & 1\n        /* ELEMENT */\n        ) {\n            if (domType !== 1\n            /* ELEMENT */\n            || vnode.type !== node.tagName.toLowerCase()) {\n              nextNode = onMismatch();\n            } else {\n              nextNode = hydrateElement(node, vnode, parentComponent, parentSuspense, optimized);\n            }\n          } else if (shapeFlag & 6\n        /* COMPONENT */\n        ) {\n            // when setting up the render effect, if the initial vnode already\n            // has .el set, the component will perform hydration instead of mount\n            // on its sub-tree.\n            const container = parentNode(node);\n\n            const hydrateComponent = () => {\n              mountComponent(vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container), optimized);\n            }; // async component\n\n\n            const loadAsync = vnode.type.__asyncLoader;\n\n            if (loadAsync) {\n              loadAsync().then(hydrateComponent);\n            } else {\n              hydrateComponent();\n            } // component may be async, so in the case of fragments we cannot rely\n            // on component's rendered output to determine the end of the fragment\n            // instead, we do a lookahead to find the end anchor node.\n\n\n            nextNode = isFragmentStart ? locateClosingAsyncAnchor(node) : nextSibling(node);\n          } else if (shapeFlag & 64\n        /* TELEPORT */\n        ) {\n            if (domType !== 8\n            /* COMMENT */\n            ) {\n                nextNode = onMismatch();\n              } else {\n              nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, optimized, rendererInternals, hydrateChildren);\n            }\n          } else if (shapeFlag & 128\n        /* SUSPENSE */\n        ) {\n            nextNode = vnode.type.hydrate(node, vnode, parentComponent, parentSuspense, isSVGContainer(parentNode(node)), optimized, rendererInternals, hydrateNode);\n          } else if (true) {\n          warn('Invalid HostVNode type:', type, `(${typeof type})`);\n        }\n\n    }\n\n    if (ref != null && parentComponent) {\n      setRef(ref, null, parentComponent, parentSuspense, vnode);\n    }\n\n    return nextNode;\n  };\n\n  const hydrateElement = (el, vnode, parentComponent, parentSuspense, optimized) => {\n    optimized = optimized || !!vnode.dynamicChildren;\n    const {\n      props,\n      patchFlag,\n      shapeFlag,\n      dirs\n    } = vnode; // skip props & children if this is hoisted static nodes\n\n    if (patchFlag !== -1\n    /* HOISTED */\n    ) {\n        // props\n        if (props) {\n          if (!optimized || patchFlag & 16\n          /* FULL_PROPS */\n          || patchFlag & 32\n          /* HYDRATE_EVENTS */\n          ) {\n            for (const key in props) {\n              if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isReservedProp */ \"v\"])(key) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isOn */ \"t\"])(key)) {\n                patchProp(el, key, null, props[key]);\n              }\n            }\n          } else if (props.onClick) {\n            // Fast path for click listeners (which is most often) to avoid\n            // iterating through props.\n            patchProp(el, 'onClick', null, props.onClick);\n          }\n        } // vnode / directive hooks\n\n\n        let vnodeHooks;\n\n        if (vnodeHooks = props && props.onVnodeBeforeMount) {\n          invokeVNodeHook(vnodeHooks, parentComponent, vnode);\n        }\n\n        if (dirs) {\n          invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\n        }\n\n        if ((vnodeHooks = props && props.onVnodeMounted) || dirs) {\n          queueEffectWithSuspense(() => {\n            vnodeHooks && invokeVNodeHook(vnodeHooks, parentComponent, vnode);\n            dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\n          }, parentSuspense);\n        } // children\n\n\n        if (shapeFlag & 16\n        /* ARRAY_CHILDREN */\n        && // skip if element has innerHTML / textContent\n        !(props && (props.innerHTML || props.textContent))) {\n          let next = hydrateChildren(el.firstChild, vnode, el, parentComponent, parentSuspense, optimized);\n          let hasWarned = false;\n\n          while (next) {\n            hasMismatch = true;\n\n            if ( true && !hasWarned) {\n              warn(`Hydration children mismatch in <${vnode.type}>: ` + `server rendered element contains more child nodes than client vdom.`);\n              hasWarned = true;\n            } // The SSRed DOM contains more nodes than it should. Remove them.\n\n\n            const cur = next;\n            next = next.nextSibling;\n            remove(cur);\n          }\n        } else if (shapeFlag & 8\n        /* TEXT_CHILDREN */\n        ) {\n            if (el.textContent !== vnode.children) {\n              hasMismatch = true;\n               true && warn(`Hydration text content mismatch in <${vnode.type}>:\\n` + `- Client: ${el.textContent}\\n` + `- Server: ${vnode.children}`);\n              el.textContent = vnode.children;\n            }\n          }\n      }\n\n    return el.nextSibling;\n  };\n\n  const hydrateChildren = (node, vnode, container, parentComponent, parentSuspense, optimized) => {\n    optimized = optimized || !!vnode.dynamicChildren;\n    const children = vnode.children;\n    const l = children.length;\n    let hasWarned = false;\n\n    for (let i = 0; i < l; i++) {\n      const vnode = optimized ? children[i] : children[i] = normalizeVNode(children[i]);\n\n      if (node) {\n        node = hydrateNode(node, vnode, parentComponent, parentSuspense, optimized);\n      } else {\n        hasMismatch = true;\n\n        if ( true && !hasWarned) {\n          warn(`Hydration children mismatch in <${container.tagName.toLowerCase()}>: ` + `server rendered element contains fewer child nodes than client vdom.`);\n          hasWarned = true;\n        } // the SSRed DOM didn't contain enough nodes. Mount the missing ones.\n\n\n        patch(null, vnode, container, null, parentComponent, parentSuspense, isSVGContainer(container));\n      }\n    }\n\n    return node;\n  };\n\n  const hydrateFragment = (node, vnode, parentComponent, parentSuspense, optimized) => {\n    const container = parentNode(node);\n    const next = hydrateChildren(nextSibling(node), vnode, container, parentComponent, parentSuspense, optimized);\n\n    if (next && isComment(next) && next.data === ']') {\n      return nextSibling(vnode.anchor = next);\n    } else {\n      // fragment didn't hydrate successfully, since we didn't get a end anchor\n      // back. This should have led to node/children mismatch warnings.\n      hasMismatch = true; // since the anchor is missing, we need to create one and insert it\n\n      insert(vnode.anchor = createComment(`]`), container, next);\n      return next;\n    }\n  };\n\n  const handleMismatch = (node, vnode, parentComponent, parentSuspense, isFragment) => {\n    hasMismatch = true;\n     true && warn(`Hydration node mismatch:\\n- Client vnode:`, vnode.type, `\\n- Server rendered DOM:`, node, node.nodeType === 3\n    /* TEXT */\n    ? `(text)` : isComment(node) && node.data === '[' ? `(start of fragment)` : ``);\n    vnode.el = null;\n\n    if (isFragment) {\n      // remove excessive fragment nodes\n      const end = locateClosingAsyncAnchor(node);\n\n      while (true) {\n        const next = nextSibling(node);\n\n        if (next && next !== end) {\n          remove(next);\n        } else {\n          break;\n        }\n      }\n    }\n\n    const next = nextSibling(node);\n    const container = parentNode(node);\n    remove(node);\n    patch(null, vnode, container, next, parentComponent, parentSuspense, isSVGContainer(container));\n    return next;\n  };\n\n  const locateClosingAsyncAnchor = node => {\n    let match = 0;\n\n    while (node) {\n      node = nextSibling(node);\n\n      if (node && isComment(node)) {\n        if (node.data === '[') match++;\n\n        if (node.data === ']') {\n          if (match === 0) {\n            return nextSibling(node);\n          } else {\n            match--;\n          }\n        }\n      }\n    }\n\n    return node;\n  };\n\n  return [hydrate, hydrateNode];\n}\n\nlet supported;\nlet perf;\n\nfunction startMeasure(instance, type) {\n  if (instance.appContext.config.performance && isSupported()) {\n    perf.mark(`vue-${type}-${instance.uid}`);\n  }\n}\n\nfunction endMeasure(instance, type) {\n  if (instance.appContext.config.performance && isSupported()) {\n    const startTag = `vue-${type}-${instance.uid}`;\n    const endTag = startTag + `:end`;\n    perf.mark(endTag);\n    perf.measure(`<${formatComponentName(instance, instance.type)}> ${type}`, startTag, endTag);\n    perf.clearMarks(startTag);\n    perf.clearMarks(endTag);\n  }\n}\n\nfunction isSupported() {\n  if (supported !== undefined) {\n    return supported;\n  }\n  /* eslint-disable no-restricted-globals */\n\n\n  if (typeof window !== 'undefined' && window.performance) {\n    supported = true;\n    perf = window.performance;\n  } else {\n    supported = false;\n  }\n  /* eslint-enable no-restricted-globals */\n\n\n  return supported;\n}\n/**\r\n * This is only called in esm-bundler builds.\r\n * It is called when a renderer is created, in `baseCreateRenderer` so that\r\n * importing runtime-core is side-effects free.\r\n *\r\n * istanbul-ignore-next\r\n */\n\n\nfunction initFeatureFlags() {\n  let needWarn = false;\n\n  if (false) {}\n\n  if (false) {}\n\n  if ( true && needWarn) {\n    console.warn(`You are running the esm-bundler build of Vue. It is recommended to ` + `configure your bundler to explicitly replace feature flag globals ` + `with boolean literals to get proper tree-shaking in the final bundle. ` + `See http://link.vuejs.org/feature-flags for more details.`);\n  }\n}\n\nconst prodEffectOptions = {\n  scheduler: queueJob\n};\n\nfunction createDevEffectOptions(instance) {\n  return {\n    scheduler: queueJob,\n    onTrack: instance.rtc ? e => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(instance.rtc, e) : void 0,\n    onTrigger: instance.rtg ? e => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(instance.rtg, e) : void 0\n  };\n}\n\nconst queuePostRenderEffect = queueEffectWithSuspense;\n\nconst setRef = (rawRef, oldRawRef, parentComponent, parentSuspense, vnode) => {\n  let value;\n\n  if (!vnode) {\n    value = null;\n  } else {\n    if (vnode.shapeFlag & 4\n    /* STATEFUL_COMPONENT */\n    ) {\n        value = vnode.component.proxy;\n      } else {\n      value = vnode.el;\n    }\n  }\n\n  const [owner, ref] = rawRef;\n\n  if ( true && !owner) {\n    warn(`Missing ref owner context. ref cannot be used on hoisted vnodes. ` + `A vnode with ref must be created inside the render function.`);\n    return;\n  }\n\n  const oldRef = oldRawRef && oldRawRef[1];\n  const refs = owner.refs === _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] ? owner.refs = {} : owner.refs;\n  const setupState = owner.setupState; // unset old ref\n\n  if (oldRef != null && oldRef !== ref) {\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(oldRef)) {\n      refs[oldRef] = null;\n\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(setupState, oldRef)) {\n        queuePostRenderEffect(() => {\n          setupState[oldRef] = null;\n        }, parentSuspense);\n      }\n    } else if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isRef */ \"e\"])(oldRef)) {\n      oldRef.value = null;\n    }\n  }\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(ref)) {\n    refs[ref] = value;\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(setupState, ref)) {\n      queuePostRenderEffect(() => {\n        setupState[ref] = value;\n      }, parentSuspense);\n    }\n  } else if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isRef */ \"e\"])(ref)) {\n    ref.value = value;\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(ref)) {\n    callWithErrorHandling(ref, parentComponent, 12\n    /* FUNCTION_REF */\n    , [value, refs]);\n  } else if (true) {\n    warn('Invalid template ref type:', value, `(${typeof value})`);\n  }\n};\n/**\r\n * The createRenderer function accepts two generic arguments:\r\n * HostNode and HostElement, corresponding to Node and Element types in the\r\n * host environment. For example, for runtime-dom, HostNode would be the DOM\r\n * `Node` interface and HostElement would be the DOM `Element` interface.\r\n *\r\n * Custom renderers can pass in the platform specific types like this:\r\n *\r\n * ``` js\r\n * const { render, createApp } = createRenderer<Node, Element>({\r\n *   patchProp,\r\n *   ...nodeOps\r\n * })\r\n * ```\r\n */\n\n\nfunction createRenderer(options) {\n  return baseCreateRenderer(options);\n} // Separate API for creating hydration-enabled renderer.\n// Hydration logic is only used when calling this function, making it\n// tree-shakable.\n\n\nfunction createHydrationRenderer(options) {\n  return baseCreateRenderer(options, createHydrationFunctions);\n} // implementation\n\n\nfunction baseCreateRenderer(options, createHydrationFns) {\n  // compile-time feature flags check\n  {\n    initFeatureFlags();\n  }\n  const {\n    insert: hostInsert,\n    remove: hostRemove,\n    patchProp: hostPatchProp,\n    forcePatchProp: hostForcePatchProp,\n    createElement: hostCreateElement,\n    createText: hostCreateText,\n    createComment: hostCreateComment,\n    setText: hostSetText,\n    setElementText: hostSetElementText,\n    parentNode: hostParentNode,\n    nextSibling: hostNextSibling,\n    setScopeId: hostSetScopeId = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"],\n    cloneNode: hostCloneNode,\n    insertStaticContent: hostInsertStaticContent\n  } = options; // Note: functions inside this closure should use `const xxx = () => {}`\n  // style in order to prevent being inlined by minifiers.\n\n  const patch = (n1, n2, container, anchor = null, parentComponent = null, parentSuspense = null, isSVG = false, optimized = false) => {\n    // patching & not same type, unmount old tree\n    if (n1 && !isSameVNodeType(n1, n2)) {\n      anchor = getNextHostNode(n1);\n      unmount(n1, parentComponent, parentSuspense, true);\n      n1 = null;\n    }\n\n    if (n2.patchFlag === -2\n    /* BAIL */\n    ) {\n        optimized = false;\n        n2.dynamicChildren = null;\n      }\n\n    const {\n      type,\n      ref,\n      shapeFlag\n    } = n2;\n\n    switch (type) {\n      case Text:\n        processText(n1, n2, container, anchor);\n        break;\n\n      case Comment:\n        processCommentNode(n1, n2, container, anchor);\n        break;\n\n      case Static:\n        if (n1 == null) {\n          mountStaticNode(n2, container, anchor, isSVG);\n        } else if (true) {\n          patchStaticNode(n1, n2, container, isSVG);\n        }\n\n        break;\n\n      case Fragment:\n        processFragment(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n        break;\n\n      default:\n        if (shapeFlag & 1\n        /* ELEMENT */\n        ) {\n            processElement(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n          } else if (shapeFlag & 6\n        /* COMPONENT */\n        ) {\n            processComponent(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n          } else if (shapeFlag & 64\n        /* TELEPORT */\n        ) {\n            type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);\n          } else if (shapeFlag & 128\n        /* SUSPENSE */\n        ) {\n            type.process(n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, internals);\n          } else if (true) {\n          warn('Invalid VNode type:', type, `(${typeof type})`);\n        }\n\n    } // set ref\n\n\n    if (ref != null && parentComponent) {\n      setRef(ref, n1 && n1.ref, parentComponent, parentSuspense, n2);\n    }\n  };\n\n  const processText = (n1, n2, container, anchor) => {\n    if (n1 == null) {\n      hostInsert(n2.el = hostCreateText(n2.children), container, anchor);\n    } else {\n      const el = n2.el = n1.el;\n\n      if (n2.children !== n1.children) {\n        hostSetText(el, n2.children);\n      }\n    }\n  };\n\n  const processCommentNode = (n1, n2, container, anchor) => {\n    if (n1 == null) {\n      hostInsert(n2.el = hostCreateComment(n2.children || ''), container, anchor);\n    } else {\n      // there's no support for dynamic comments\n      n2.el = n1.el;\n    }\n  };\n\n  const mountStaticNode = (n2, container, anchor, isSVG) => {\n    [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\n  };\n  /**\r\n   * Dev / HMR only\r\n   */\n\n\n  const patchStaticNode = (n1, n2, container, isSVG) => {\n    // static nodes are only patched during dev for HMR\n    if (n2.children !== n1.children) {\n      const anchor = hostNextSibling(n1.anchor); // remove existing\n\n      removeStaticNode(n1);\n      [n2.el, n2.anchor] = hostInsertStaticContent(n2.children, container, anchor, isSVG);\n    } else {\n      n2.el = n1.el;\n      n2.anchor = n1.anchor;\n    }\n  };\n  /**\r\n   * Dev / HMR only\r\n   */\n\n\n  const moveStaticNode = (vnode, container, anchor) => {\n    let cur = vnode.el;\n    const end = vnode.anchor;\n\n    while (cur && cur !== end) {\n      const next = hostNextSibling(cur);\n      hostInsert(cur, container, anchor);\n      cur = next;\n    }\n\n    hostInsert(end, container, anchor);\n  };\n  /**\r\n   * Dev / HMR only\r\n   */\n\n\n  const removeStaticNode = vnode => {\n    let cur = vnode.el;\n\n    while (cur && cur !== vnode.anchor) {\n      const next = hostNextSibling(cur);\n      hostRemove(cur);\n      cur = next;\n    }\n\n    hostRemove(vnode.anchor);\n  };\n\n  const processElement = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    isSVG = isSVG || n2.type === 'svg';\n\n    if (n1 == null) {\n      mountElement(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n    } else {\n      patchElement(n1, n2, parentComponent, parentSuspense, isSVG, optimized);\n    }\n  };\n\n  const mountElement = (vnode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    let el;\n    let vnodeHook;\n    const {\n      type,\n      props,\n      shapeFlag,\n      transition,\n      scopeId,\n      patchFlag,\n      dirs\n    } = vnode;\n\n    if (false\n    /* HOISTED */\n    ) {} else {\n      el = vnode.el = hostCreateElement(vnode.type, isSVG, props && props.is); // mount children first, since some props may rely on child content\n      // being already rendered, e.g. `<select value>`\n\n      if (shapeFlag & 8\n      /* TEXT_CHILDREN */\n      ) {\n          hostSetElementText(el, vnode.children);\n        } else if (shapeFlag & 16\n      /* ARRAY_CHILDREN */\n      ) {\n          mountChildren(vnode.children, el, null, parentComponent, parentSuspense, isSVG && type !== 'foreignObject', optimized || !!vnode.dynamicChildren);\n        } // props\n\n\n      if (props) {\n        for (const key in props) {\n          if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isReservedProp */ \"v\"])(key)) {\n            hostPatchProp(el, key, null, props[key], isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\n          }\n        }\n\n        if (vnodeHook = props.onVnodeBeforeMount) {\n          invokeVNodeHook(vnodeHook, parentComponent, vnode);\n        }\n      }\n\n      if (dirs) {\n        invokeDirectiveHook(vnode, null, parentComponent, 'beforeMount');\n      } // scopeId\n\n\n      if (scopeId) {\n        hostSetScopeId(el, scopeId);\n      }\n\n      const treeOwnerId = parentComponent && parentComponent.type.__scopeId; // vnode's own scopeId and the current patched component's scopeId is\n      // different - this is a slot content node.\n\n      if (treeOwnerId && treeOwnerId !== scopeId) {\n        hostSetScopeId(el, treeOwnerId + '-s');\n      }\n\n      if (transition && !transition.persisted) {\n        transition.beforeEnter(el);\n      }\n    }\n\n    hostInsert(el, container, anchor); // #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved\n    // #1689 For inside suspense + suspense resolved case, just call it\n\n    const needCallTransitionHooks = (!parentSuspense || parentSuspense && parentSuspense.isResolved) && transition && !transition.persisted;\n\n    if ((vnodeHook = props && props.onVnodeMounted) || needCallTransitionHooks || dirs) {\n      queuePostRenderEffect(() => {\n        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\n        needCallTransitionHooks && transition.enter(el);\n        dirs && invokeDirectiveHook(vnode, null, parentComponent, 'mounted');\n      }, parentSuspense);\n    }\n  };\n\n  const mountChildren = (children, container, anchor, parentComponent, parentSuspense, isSVG, optimized, start = 0) => {\n    for (let i = start; i < children.length; i++) {\n      const child = children[i] = optimized ? cloneIfMounted(children[i]) : normalizeVNode(children[i]);\n      patch(null, child, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n    }\n  };\n\n  const patchElement = (n1, n2, parentComponent, parentSuspense, isSVG, optimized) => {\n    const el = n2.el = n1.el;\n    let {\n      patchFlag,\n      dynamicChildren,\n      dirs\n    } = n2; // #1426 take the old vnode's patch flag into account since user may clone a\n    // compiler-generated vnode, which de-opts to FULL_PROPS\n\n    patchFlag |= n1.patchFlag & 16\n    /* FULL_PROPS */\n    ;\n    const oldProps = n1.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n    const newProps = n2.props || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n    let vnodeHook;\n\n    if (vnodeHook = newProps.onVnodeBeforeUpdate) {\n      invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\n    }\n\n    if (dirs) {\n      invokeDirectiveHook(n2, n1, parentComponent, 'beforeUpdate');\n    }\n\n    if ( true && isHmrUpdating) {\n      // HMR updated, force full diff\n      patchFlag = 0;\n      optimized = false;\n      dynamicChildren = null;\n    }\n\n    if (patchFlag > 0) {\n      // the presence of a patchFlag means this element's render code was\n      // generated by the compiler and can take the fast path.\n      // in this path old node and new node are guaranteed to have the same shape\n      // (i.e. at the exact same position in the source template)\n      if (patchFlag & 16\n      /* FULL_PROPS */\n      ) {\n          // element props contain dynamic keys, full diff needed\n          patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\n        } else {\n        // class\n        // this flag is matched when the element has dynamic class bindings.\n        if (patchFlag & 2\n        /* CLASS */\n        ) {\n            if (oldProps.class !== newProps.class) {\n              hostPatchProp(el, 'class', null, newProps.class, isSVG);\n            }\n          } // style\n        // this flag is matched when the element has dynamic style bindings\n\n\n        if (patchFlag & 4\n        /* STYLE */\n        ) {\n            hostPatchProp(el, 'style', oldProps.style, newProps.style, isSVG);\n          } // props\n        // This flag is matched when the element has dynamic prop/attr bindings\n        // other than class and style. The keys of dynamic prop/attrs are saved for\n        // faster iteration.\n        // Note dynamic keys like :[foo]=\"bar\" will cause this optimization to\n        // bail out and go through a full diff because we need to unset the old key\n\n\n        if (patchFlag & 8\n        /* PROPS */\n        ) {\n            // if the flag is present then dynamicProps must be non-null\n            const propsToUpdate = n2.dynamicProps;\n\n            for (let i = 0; i < propsToUpdate.length; i++) {\n              const key = propsToUpdate[i];\n              const prev = oldProps[key];\n              const next = newProps[key];\n\n              if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) {\n                hostPatchProp(el, key, prev, next, isSVG, n1.children, parentComponent, parentSuspense, unmountChildren);\n              }\n            }\n          }\n      } // text\n      // This flag is matched when the element has only dynamic text children.\n\n\n      if (patchFlag & 1\n      /* TEXT */\n      ) {\n          if (n1.children !== n2.children) {\n            hostSetElementText(el, n2.children);\n          }\n        }\n    } else if (!optimized && dynamicChildren == null) {\n      // unoptimized, full diff\n      patchProps(el, n2, oldProps, newProps, parentComponent, parentSuspense, isSVG);\n    }\n\n    const areChildrenSVG = isSVG && n2.type !== 'foreignObject';\n\n    if (dynamicChildren) {\n      patchBlockChildren(n1.dynamicChildren, dynamicChildren, el, parentComponent, parentSuspense, areChildrenSVG);\n\n      if ( true && parentComponent && parentComponent.type.__hmrId) {\n        traverseStaticChildren(n1, n2);\n      }\n    } else if (!optimized) {\n      // full diff\n      patchChildren(n1, n2, el, null, parentComponent, parentSuspense, areChildrenSVG);\n    }\n\n    if ((vnodeHook = newProps.onVnodeUpdated) || dirs) {\n      queuePostRenderEffect(() => {\n        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, n2, n1);\n        dirs && invokeDirectiveHook(n2, n1, parentComponent, 'updated');\n      }, parentSuspense);\n    }\n  }; // The fast path for blocks.\n\n\n  const patchBlockChildren = (oldChildren, newChildren, fallbackContainer, parentComponent, parentSuspense, isSVG) => {\n    for (let i = 0; i < newChildren.length; i++) {\n      const oldVNode = oldChildren[i];\n      const newVNode = newChildren[i]; // Determine the container (parent element) for the patch.\n\n      const container = // - In the case of a Fragment, we need to provide the actual parent\n      // of the Fragment itself so it can move its children.\n      oldVNode.type === Fragment || // - In the case of different nodes, there is going to be a replacement\n      // which also requires the correct parent container\n      !isSameVNodeType(oldVNode, newVNode) || // - In the case of a component, it could contain anything.\n      oldVNode.shapeFlag & 6\n      /* COMPONENT */\n      || oldVNode.shapeFlag & 64\n      /* TELEPORT */\n      ? hostParentNode(oldVNode.el) : // In other cases, the parent container is not actually used so we\n      // just pass the block element here to avoid a DOM parentNode call.\n      fallbackContainer;\n      patch(oldVNode, newVNode, container, null, parentComponent, parentSuspense, isSVG, true);\n    }\n  };\n\n  const patchProps = (el, vnode, oldProps, newProps, parentComponent, parentSuspense, isSVG) => {\n    if (oldProps !== newProps) {\n      for (const key in newProps) {\n        if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isReservedProp */ \"v\"])(key)) continue;\n        const next = newProps[key];\n        const prev = oldProps[key];\n\n        if (next !== prev || hostForcePatchProp && hostForcePatchProp(el, key)) {\n          hostPatchProp(el, key, prev, next, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\n        }\n      }\n\n      if (oldProps !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"]) {\n        for (const key in oldProps) {\n          if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isReservedProp */ \"v\"])(key) && !(key in newProps)) {\n            hostPatchProp(el, key, oldProps[key], null, isSVG, vnode.children, parentComponent, parentSuspense, unmountChildren);\n          }\n        }\n      }\n    }\n  };\n\n  const processFragment = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    const fragmentStartAnchor = n2.el = n1 ? n1.el : hostCreateText('');\n    const fragmentEndAnchor = n2.anchor = n1 ? n1.anchor : hostCreateText('');\n    let {\n      patchFlag,\n      dynamicChildren\n    } = n2;\n\n    if (patchFlag > 0) {\n      optimized = true;\n    }\n\n    if ( true && isHmrUpdating) {\n      // HMR updated, force full diff\n      patchFlag = 0;\n      optimized = false;\n      dynamicChildren = null;\n    }\n\n    if (n1 == null) {\n      hostInsert(fragmentStartAnchor, container, anchor);\n      hostInsert(fragmentEndAnchor, container, anchor); // a fragment can only have array children\n      // since they are either generated by the compiler, or implicitly created\n      // from arrays.\n\n      mountChildren(n2.children, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);\n    } else {\n      if (patchFlag > 0 && patchFlag & 64\n      /* STABLE_FRAGMENT */\n      && dynamicChildren) {\n        // a stable fragment (template root or <template v-for>) doesn't need to\n        // patch children order, but it may contain dynamicChildren.\n        patchBlockChildren(n1.dynamicChildren, dynamicChildren, container, parentComponent, parentSuspense, isSVG);\n\n        if ( true && parentComponent && parentComponent.type.__hmrId) {\n          traverseStaticChildren(n1, n2);\n        }\n      } else {\n        // keyed / unkeyed, or manual fragments.\n        // for keyed & unkeyed, since they are compiler generated from v-for,\n        // each child is guaranteed to be a block so the fragment will never\n        // have dynamicChildren.\n        patchChildren(n1, n2, container, fragmentEndAnchor, parentComponent, parentSuspense, isSVG, optimized);\n      }\n    }\n  };\n\n  const processComponent = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    if (n1 == null) {\n      if (n2.shapeFlag & 512\n      /* COMPONENT_KEPT_ALIVE */\n      ) {\n          parentComponent.ctx.activate(n2, container, anchor, isSVG, optimized);\n        } else {\n        mountComponent(n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n      }\n    } else {\n      updateComponent(n1, n2, optimized);\n    }\n  };\n\n  const mountComponent = (initialVNode, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    const instance = initialVNode.component = createComponentInstance(initialVNode, parentComponent, parentSuspense);\n\n    if ( true && instance.type.__hmrId) {\n      registerHMR(instance);\n    }\n\n    if (true) {\n      pushWarningContext(initialVNode);\n      startMeasure(instance, `mount`);\n    } // inject renderer internals for keepAlive\n\n\n    if (isKeepAlive(initialVNode)) {\n      instance.ctx.renderer = internals;\n    } // resolve props and slots for setup context\n\n\n    if (true) {\n      startMeasure(instance, `init`);\n    }\n\n    setupComponent(instance);\n\n    if (true) {\n      endMeasure(instance, `init`);\n    } // setup() is async. This component relies on async logic to be resolved\n    // before proceeding\n\n\n    if (instance.asyncDep) {\n      if (!parentSuspense) {\n        if (true) warn('async setup() is used without a suspense boundary!');\n        return;\n      }\n\n      parentSuspense.registerDep(instance, setupRenderEffect); // Give it a placeholder if this is not hydration\n\n      if (!initialVNode.el) {\n        const placeholder = instance.subTree = createVNode(Comment);\n        processCommentNode(null, placeholder, container, anchor);\n      }\n\n      return;\n    }\n\n    setupRenderEffect(instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized);\n\n    if (true) {\n      popWarningContext();\n      endMeasure(instance, `mount`);\n    }\n  };\n\n  const updateComponent = (n1, n2, optimized) => {\n    const instance = n2.component = n1.component;\n\n    if (shouldUpdateComponent(n1, n2, optimized)) {\n      if (instance.asyncDep && !instance.asyncResolved) {\n        // async & still pending - just update props and slots\n        // since the component's reactive effect for render isn't set-up yet\n        if (true) {\n          pushWarningContext(n2);\n        }\n\n        updateComponentPreRender(instance, n2, optimized);\n\n        if (true) {\n          popWarningContext();\n        }\n\n        return;\n      } else {\n        // normal update\n        instance.next = n2; // in case the child component is also queued, remove it to avoid\n        // double updating the same child component in the same flush.\n\n        invalidateJob(instance.update); // instance.update is the reactive effect runner.\n\n        instance.update();\n      }\n    } else {\n      // no update needed. just copy over properties\n      n2.component = n1.component;\n      n2.el = n1.el;\n      instance.vnode = n2;\n    }\n  };\n\n  const setupRenderEffect = (instance, initialVNode, container, anchor, parentSuspense, isSVG, optimized) => {\n    // create reactive effect for rendering\n    instance.update = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* effect */ \"b\"])(function componentEffect() {\n      if (!instance.isMounted) {\n        let vnodeHook;\n        const {\n          el,\n          props\n        } = initialVNode;\n        const {\n          bm,\n          m,\n          a,\n          parent\n        } = instance;\n\n        if (true) {\n          startMeasure(instance, `render`);\n        }\n\n        const subTree = instance.subTree = renderComponentRoot(instance);\n\n        if (true) {\n          endMeasure(instance, `render`);\n        } // beforeMount hook\n\n\n        if (bm) {\n          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(bm);\n        } // onVnodeBeforeMount\n\n\n        if (vnodeHook = props && props.onVnodeBeforeMount) {\n          invokeVNodeHook(vnodeHook, parent, initialVNode);\n        }\n\n        if (el && hydrateNode) {\n          if (true) {\n            startMeasure(instance, `hydrate`);\n          } // vnode has adopted host node - perform hydration instead of mount.\n\n\n          hydrateNode(initialVNode.el, subTree, instance, parentSuspense);\n\n          if (true) {\n            endMeasure(instance, `hydrate`);\n          }\n        } else {\n          if (true) {\n            startMeasure(instance, `patch`);\n          }\n\n          patch(null, subTree, container, anchor, instance, parentSuspense, isSVG);\n\n          if (true) {\n            endMeasure(instance, `patch`);\n          }\n\n          initialVNode.el = subTree.el;\n        } // mounted hook\n\n\n        if (m) {\n          queuePostRenderEffect(m, parentSuspense);\n        } // onVnodeMounted\n\n\n        if (vnodeHook = props && props.onVnodeMounted) {\n          queuePostRenderEffect(() => {\n            invokeVNodeHook(vnodeHook, parent, initialVNode);\n          }, parentSuspense);\n        } // activated hook for keep-alive roots.\n\n\n        if (a && initialVNode.shapeFlag & 256\n        /* COMPONENT_SHOULD_KEEP_ALIVE */\n        ) {\n            queuePostRenderEffect(a, parentSuspense);\n          }\n\n        instance.isMounted = true;\n      } else {\n        // updateComponent\n        // This is triggered by mutation of component's own state (next: null)\n        // OR parent calling processComponent (next: VNode)\n        let {\n          next,\n          bu,\n          u,\n          parent,\n          vnode\n        } = instance;\n        let originNext = next;\n        let vnodeHook;\n\n        if (true) {\n          pushWarningContext(next || instance.vnode);\n        }\n\n        if (next) {\n          updateComponentPreRender(instance, next, optimized);\n        } else {\n          next = vnode;\n        }\n\n        if (true) {\n          startMeasure(instance, `render`);\n        }\n\n        const nextTree = renderComponentRoot(instance);\n\n        if (true) {\n          endMeasure(instance, `render`);\n        }\n\n        const prevTree = instance.subTree;\n        instance.subTree = nextTree;\n        next.el = vnode.el; // beforeUpdate hook\n\n        if (bu) {\n          Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(bu);\n        } // onVnodeBeforeUpdate\n\n\n        if (vnodeHook = next.props && next.props.onVnodeBeforeUpdate) {\n          invokeVNodeHook(vnodeHook, parent, next, vnode);\n        } // reset refs\n        // only needed if previous patch had refs\n\n\n        if (instance.refs !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"]) {\n          instance.refs = {};\n        }\n\n        if (true) {\n          startMeasure(instance, `patch`);\n        }\n\n        patch(prevTree, nextTree, // parent may have changed if it's in a teleport\n        hostParentNode(prevTree.el), // anchor may have changed if it's in a fragment\n        getNextHostNode(prevTree), instance, parentSuspense, isSVG);\n\n        if (true) {\n          endMeasure(instance, `patch`);\n        }\n\n        next.el = nextTree.el;\n\n        if (originNext === null) {\n          // self-triggered update. In case of HOC, update parent component\n          // vnode el. HOC is indicated by parent instance's subTree pointing\n          // to child component's vnode\n          updateHOCHostEl(instance, nextTree.el);\n        } // updated hook\n\n\n        if (u) {\n          queuePostRenderEffect(u, parentSuspense);\n        } // onVnodeUpdated\n\n\n        if (vnodeHook = next.props && next.props.onVnodeUpdated) {\n          queuePostRenderEffect(() => {\n            invokeVNodeHook(vnodeHook, parent, next, vnode);\n          }, parentSuspense);\n        }\n\n        if (true) {\n          devtoolsComponentUpdated(instance);\n        }\n\n        if (true) {\n          popWarningContext();\n        }\n      }\n    },  true ? createDevEffectOptions(instance) : undefined);\n  };\n\n  const updateComponentPreRender = (instance, nextVNode, optimized) => {\n    if ( true && instance.type.__hmrId) {\n      optimized = false;\n    }\n\n    nextVNode.component = instance;\n    const prevProps = instance.vnode.props;\n    instance.vnode = nextVNode;\n    instance.next = null;\n    updateProps(instance, nextVNode.props, prevProps, optimized);\n    updateSlots(instance, nextVNode.children);\n  };\n\n  const patchChildren = (n1, n2, container, anchor, parentComponent, parentSuspense, isSVG, optimized = false) => {\n    const c1 = n1 && n1.children;\n    const prevShapeFlag = n1 ? n1.shapeFlag : 0;\n    const c2 = n2.children;\n    const {\n      patchFlag,\n      shapeFlag\n    } = n2; // fast path\n\n    if (patchFlag > 0) {\n      if (patchFlag & 128\n      /* KEYED_FRAGMENT */\n      ) {\n          // this could be either fully-keyed or mixed (some keyed some not)\n          // presence of patchFlag means children are guaranteed to be arrays\n          patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n          return;\n        } else if (patchFlag & 256\n      /* UNKEYED_FRAGMENT */\n      ) {\n          // unkeyed\n          patchUnkeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n          return;\n        }\n    } // children has 3 possibilities: text, array or no children.\n\n\n    if (shapeFlag & 8\n    /* TEXT_CHILDREN */\n    ) {\n        // text children fast path\n        if (prevShapeFlag & 16\n        /* ARRAY_CHILDREN */\n        ) {\n            unmountChildren(c1, parentComponent, parentSuspense);\n          }\n\n        if (c2 !== c1) {\n          hostSetElementText(container, c2);\n        }\n      } else {\n      if (prevShapeFlag & 16\n      /* ARRAY_CHILDREN */\n      ) {\n          // prev children was array\n          if (shapeFlag & 16\n          /* ARRAY_CHILDREN */\n          ) {\n              // two arrays, cannot assume anything, do full diff\n              patchKeyedChildren(c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n            } else {\n            // no new children, just unmount old\n            unmountChildren(c1, parentComponent, parentSuspense, true);\n          }\n        } else {\n        // prev children was text OR null\n        // new children is array OR null\n        if (prevShapeFlag & 8\n        /* TEXT_CHILDREN */\n        ) {\n            hostSetElementText(container, '');\n          } // mount new if array\n\n\n        if (shapeFlag & 16\n        /* ARRAY_CHILDREN */\n        ) {\n            mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized);\n          }\n      }\n    }\n  };\n\n  const patchUnkeyedChildren = (c1, c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    c1 = c1 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_ARR */ \"a\"];\n    c2 = c2 || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_ARR */ \"a\"];\n    const oldLength = c1.length;\n    const newLength = c2.length;\n    const commonLength = Math.min(oldLength, newLength);\n    let i;\n\n    for (i = 0; i < commonLength; i++) {\n      const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);\n      patch(c1[i], nextChild, container, null, parentComponent, parentSuspense, isSVG, optimized);\n    }\n\n    if (oldLength > newLength) {\n      // remove old\n      unmountChildren(c1, parentComponent, parentSuspense, true, commonLength);\n    } else {\n      // mount new\n      mountChildren(c2, container, anchor, parentComponent, parentSuspense, isSVG, optimized, commonLength);\n    }\n  }; // can be all-keyed or mixed\n\n\n  const patchKeyedChildren = (c1, c2, container, parentAnchor, parentComponent, parentSuspense, isSVG, optimized) => {\n    let i = 0;\n    const l2 = c2.length;\n    let e1 = c1.length - 1; // prev ending index\n\n    let e2 = l2 - 1; // next ending index\n    // 1. sync from start\n    // (a b) c\n    // (a b) d e\n\n    while (i <= e1 && i <= e2) {\n      const n1 = c1[i];\n      const n2 = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);\n\n      if (isSameVNodeType(n1, n2)) {\n        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);\n      } else {\n        break;\n      }\n\n      i++;\n    } // 2. sync from end\n    // a (b c)\n    // d e (b c)\n\n\n    while (i <= e1 && i <= e2) {\n      const n1 = c1[e1];\n      const n2 = c2[e2] = optimized ? cloneIfMounted(c2[e2]) : normalizeVNode(c2[e2]);\n\n      if (isSameVNodeType(n1, n2)) {\n        patch(n1, n2, container, null, parentComponent, parentSuspense, isSVG, optimized);\n      } else {\n        break;\n      }\n\n      e1--;\n      e2--;\n    } // 3. common sequence + mount\n    // (a b)\n    // (a b) c\n    // i = 2, e1 = 1, e2 = 2\n    // (a b)\n    // c (a b)\n    // i = 0, e1 = -1, e2 = 0\n\n\n    if (i > e1) {\n      if (i <= e2) {\n        const nextPos = e2 + 1;\n        const anchor = nextPos < l2 ? c2[nextPos].el : parentAnchor;\n\n        while (i <= e2) {\n          patch(null, c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]), container, anchor, parentComponent, parentSuspense, isSVG);\n          i++;\n        }\n      }\n    } // 4. common sequence + unmount\n    // (a b) c\n    // (a b)\n    // i = 2, e1 = 2, e2 = 1\n    // a (b c)\n    // (b c)\n    // i = 0, e1 = 0, e2 = -1\n    else if (i > e2) {\n        while (i <= e1) {\n          unmount(c1[i], parentComponent, parentSuspense, true);\n          i++;\n        }\n      } // 5. unknown sequence\n      // [i ... e1 + 1]: a b [c d e] f g\n      // [i ... e2 + 1]: a b [e d c h] f g\n      // i = 2, e1 = 4, e2 = 5\n      else {\n          const s1 = i; // prev starting index\n\n          const s2 = i; // next starting index\n          // 5.1 build key:index map for newChildren\n\n          const keyToNewIndexMap = new Map();\n\n          for (i = s2; i <= e2; i++) {\n            const nextChild = c2[i] = optimized ? cloneIfMounted(c2[i]) : normalizeVNode(c2[i]);\n\n            if (nextChild.key != null) {\n              if ( true && keyToNewIndexMap.has(nextChild.key)) {\n                warn(`Duplicate keys found during update:`, JSON.stringify(nextChild.key), `Make sure keys are unique.`);\n              }\n\n              keyToNewIndexMap.set(nextChild.key, i);\n            }\n          } // 5.2 loop through old children left to be patched and try to patch\n          // matching nodes & remove nodes that are no longer present\n\n\n          let j;\n          let patched = 0;\n          const toBePatched = e2 - s2 + 1;\n          let moved = false; // used to track whether any node has moved\n\n          let maxNewIndexSoFar = 0; // works as Map<newIndex, oldIndex>\n          // Note that oldIndex is offset by +1\n          // and oldIndex = 0 is a special value indicating the new node has\n          // no corresponding old node.\n          // used for determining longest stable subsequence\n\n          const newIndexToOldIndexMap = new Array(toBePatched);\n\n          for (i = 0; i < toBePatched; i++) newIndexToOldIndexMap[i] = 0;\n\n          for (i = s1; i <= e1; i++) {\n            const prevChild = c1[i];\n\n            if (patched >= toBePatched) {\n              // all new children have been patched so this can only be a removal\n              unmount(prevChild, parentComponent, parentSuspense, true);\n              continue;\n            }\n\n            let newIndex;\n\n            if (prevChild.key != null) {\n              newIndex = keyToNewIndexMap.get(prevChild.key);\n            } else {\n              // key-less node, try to locate a key-less node of the same type\n              for (j = s2; j <= e2; j++) {\n                if (newIndexToOldIndexMap[j - s2] === 0 && isSameVNodeType(prevChild, c2[j])) {\n                  newIndex = j;\n                  break;\n                }\n              }\n            }\n\n            if (newIndex === undefined) {\n              unmount(prevChild, parentComponent, parentSuspense, true);\n            } else {\n              newIndexToOldIndexMap[newIndex - s2] = i + 1;\n\n              if (newIndex >= maxNewIndexSoFar) {\n                maxNewIndexSoFar = newIndex;\n              } else {\n                moved = true;\n              }\n\n              patch(prevChild, c2[newIndex], container, null, parentComponent, parentSuspense, isSVG, optimized);\n              patched++;\n            }\n          } // 5.3 move and mount\n          // generate longest stable subsequence only when nodes have moved\n\n\n          const increasingNewIndexSequence = moved ? getSequence(newIndexToOldIndexMap) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_ARR */ \"a\"];\n          j = increasingNewIndexSequence.length - 1; // looping backwards so that we can use last patched node as anchor\n\n          for (i = toBePatched - 1; i >= 0; i--) {\n            const nextIndex = s2 + i;\n            const nextChild = c2[nextIndex];\n            const anchor = nextIndex + 1 < l2 ? c2[nextIndex + 1].el : parentAnchor;\n\n            if (newIndexToOldIndexMap[i] === 0) {\n              // mount new\n              patch(null, nextChild, container, anchor, parentComponent, parentSuspense, isSVG);\n            } else if (moved) {\n              // move if:\n              // There is no stable subsequence (e.g. a reverse)\n              // OR current node is not among the stable sequence\n              if (j < 0 || i !== increasingNewIndexSequence[j]) {\n                move(nextChild, container, anchor, 2\n                /* REORDER */\n                );\n              } else {\n                j--;\n              }\n            }\n          }\n        }\n  };\n\n  const move = (vnode, container, anchor, moveType, parentSuspense = null) => {\n    const {\n      el,\n      type,\n      transition,\n      children,\n      shapeFlag\n    } = vnode;\n\n    if (shapeFlag & 6\n    /* COMPONENT */\n    ) {\n        move(vnode.component.subTree, container, anchor, moveType);\n        return;\n      }\n\n    if (shapeFlag & 128\n    /* SUSPENSE */\n    ) {\n        vnode.suspense.move(container, anchor, moveType);\n        return;\n      }\n\n    if (shapeFlag & 64\n    /* TELEPORT */\n    ) {\n        type.move(vnode, container, anchor, internals);\n        return;\n      }\n\n    if (type === Fragment) {\n      hostInsert(el, container, anchor);\n\n      for (let i = 0; i < children.length; i++) {\n        move(children[i], container, anchor, moveType);\n      }\n\n      hostInsert(vnode.anchor, container, anchor);\n      return;\n    } // static node move can only happen when force updating HMR\n\n\n    if ( true && type === Static) {\n      moveStaticNode(vnode, container, anchor);\n      return;\n    } // single nodes\n\n\n    const needTransition = moveType !== 2\n    /* REORDER */\n    && shapeFlag & 1\n    /* ELEMENT */\n    && transition;\n\n    if (needTransition) {\n      if (moveType === 0\n      /* ENTER */\n      ) {\n          transition.beforeEnter(el);\n          hostInsert(el, container, anchor);\n          queuePostRenderEffect(() => transition.enter(el), parentSuspense);\n        } else {\n        const {\n          leave,\n          delayLeave,\n          afterLeave\n        } = transition;\n\n        const remove = () => hostInsert(el, container, anchor);\n\n        const performLeave = () => {\n          leave(el, () => {\n            remove();\n            afterLeave && afterLeave();\n          });\n        };\n\n        if (delayLeave) {\n          delayLeave(el, remove, performLeave);\n        } else {\n          performLeave();\n        }\n      }\n    } else {\n      hostInsert(el, container, anchor);\n    }\n  };\n\n  const unmount = (vnode, parentComponent, parentSuspense, doRemove = false) => {\n    const {\n      type,\n      props,\n      ref,\n      children,\n      dynamicChildren,\n      shapeFlag,\n      patchFlag,\n      dirs\n    } = vnode; // unset ref\n\n    if (ref != null && parentComponent) {\n      setRef(ref, null, parentComponent, parentSuspense, null);\n    }\n\n    if (shapeFlag & 256\n    /* COMPONENT_SHOULD_KEEP_ALIVE */\n    ) {\n        parentComponent.ctx.deactivate(vnode);\n        return;\n      }\n\n    const shouldInvokeDirs = shapeFlag & 1\n    /* ELEMENT */\n    && dirs;\n    let vnodeHook;\n\n    if (vnodeHook = props && props.onVnodeBeforeUnmount) {\n      invokeVNodeHook(vnodeHook, parentComponent, vnode);\n    }\n\n    if (shapeFlag & 6\n    /* COMPONENT */\n    ) {\n        unmountComponent(vnode.component, parentSuspense, doRemove);\n      } else {\n      if (shapeFlag & 128\n      /* SUSPENSE */\n      ) {\n          vnode.suspense.unmount(parentSuspense, doRemove);\n          return;\n        }\n\n      if (shouldInvokeDirs) {\n        invokeDirectiveHook(vnode, null, parentComponent, 'beforeUnmount');\n      }\n\n      if (dynamicChildren && ( // #1153: fast path should not be taken for non-stable (v-for) fragments\n      type !== Fragment || patchFlag > 0 && patchFlag & 64\n      /* STABLE_FRAGMENT */\n      )) {\n        // fast path for block nodes: only need to unmount dynamic children.\n        unmountChildren(dynamicChildren, parentComponent, parentSuspense);\n      } else if (shapeFlag & 16\n      /* ARRAY_CHILDREN */\n      ) {\n          unmountChildren(children, parentComponent, parentSuspense);\n        } // an unmounted teleport should always remove its children\n\n\n      if (shapeFlag & 64\n      /* TELEPORT */\n      ) {\n          vnode.type.remove(vnode, internals);\n        }\n\n      if (doRemove) {\n        remove(vnode);\n      }\n    }\n\n    if ((vnodeHook = props && props.onVnodeUnmounted) || shouldInvokeDirs) {\n      queuePostRenderEffect(() => {\n        vnodeHook && invokeVNodeHook(vnodeHook, parentComponent, vnode);\n        shouldInvokeDirs && invokeDirectiveHook(vnode, null, parentComponent, 'unmounted');\n      }, parentSuspense);\n    }\n  };\n\n  const remove = vnode => {\n    const {\n      type,\n      el,\n      anchor,\n      transition\n    } = vnode;\n\n    if (type === Fragment) {\n      removeFragment(el, anchor);\n      return;\n    }\n\n    if ( true && type === Static) {\n      removeStaticNode(vnode);\n      return;\n    }\n\n    const performRemove = () => {\n      hostRemove(el);\n\n      if (transition && !transition.persisted && transition.afterLeave) {\n        transition.afterLeave();\n      }\n    };\n\n    if (vnode.shapeFlag & 1\n    /* ELEMENT */\n    && transition && !transition.persisted) {\n      const {\n        leave,\n        delayLeave\n      } = transition;\n\n      const performLeave = () => leave(el, performRemove);\n\n      if (delayLeave) {\n        delayLeave(vnode.el, performRemove, performLeave);\n      } else {\n        performLeave();\n      }\n    } else {\n      performRemove();\n    }\n  };\n\n  const removeFragment = (cur, end) => {\n    // For fragments, directly remove all contained DOM nodes.\n    // (fragment child nodes cannot have transition)\n    let next;\n\n    while (cur !== end) {\n      next = hostNextSibling(cur);\n      hostRemove(cur);\n      cur = next;\n    }\n\n    hostRemove(end);\n  };\n\n  const unmountComponent = (instance, parentSuspense, doRemove) => {\n    if ( true && instance.type.__hmrId) {\n      unregisterHMR(instance);\n    }\n\n    const {\n      bum,\n      effects,\n      update,\n      subTree,\n      um,\n      da,\n      isDeactivated\n    } = instance; // beforeUnmount hook\n\n    if (bum) {\n      Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(bum);\n    }\n\n    if (effects) {\n      for (let i = 0; i < effects.length; i++) {\n        Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* stop */ \"n\"])(effects[i]);\n      }\n    } // update may be null if a component is unmounted before its async\n    // setup has resolved.\n\n\n    if (update) {\n      Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* stop */ \"n\"])(update);\n      unmount(subTree, instance, parentSuspense, doRemove);\n    } // unmounted hook\n\n\n    if (um) {\n      queuePostRenderEffect(um, parentSuspense);\n    } // deactivated hook\n\n\n    if (da && !isDeactivated && instance.vnode.shapeFlag & 256\n    /* COMPONENT_SHOULD_KEEP_ALIVE */\n    ) {\n        queuePostRenderEffect(da, parentSuspense);\n      }\n\n    queuePostRenderEffect(() => {\n      instance.isUnmounted = true;\n    }, parentSuspense); // A component with async dep inside a pending suspense is unmounted before\n    // its async dep resolves. This should remove the dep from the suspense, and\n    // cause the suspense to resolve immediately if that was the last dep.\n\n    if (parentSuspense && !parentSuspense.isResolved && !parentSuspense.isUnmounted && instance.asyncDep && !instance.asyncResolved) {\n      parentSuspense.deps--;\n\n      if (parentSuspense.deps === 0) {\n        parentSuspense.resolve();\n      }\n    }\n\n    if (true) {\n      devtoolsComponentRemoved(instance);\n    }\n  };\n\n  const unmountChildren = (children, parentComponent, parentSuspense, doRemove = false, start = 0) => {\n    for (let i = start; i < children.length; i++) {\n      unmount(children[i], parentComponent, parentSuspense, doRemove);\n    }\n  };\n\n  const getNextHostNode = vnode => {\n    if (vnode.shapeFlag & 6\n    /* COMPONENT */\n    ) {\n        return getNextHostNode(vnode.component.subTree);\n      }\n\n    if (vnode.shapeFlag & 128\n    /* SUSPENSE */\n    ) {\n        return vnode.suspense.next();\n      }\n\n    return hostNextSibling(vnode.anchor || vnode.el);\n  };\n  /**\r\n   * #1156\r\n   * When a component is HMR-enabled, we need to make sure that all static nodes\r\n   * inside a block also inherit the DOM element from the previous tree so that\r\n   * HMR updates (which are full updates) can retrieve the element for patching.\r\n   *\r\n   * Dev only.\r\n   */\n\n\n  const traverseStaticChildren = (n1, n2) => {\n    const ch1 = n1.children;\n    const ch2 = n2.children;\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(ch1) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(ch2)) {\n      for (let i = 0; i < ch1.length; i++) {\n        // this is only called in the optimized path so array children are\n        // guaranteed to be vnodes\n        const c1 = ch1[i];\n        const c2 = ch2[i] = cloneIfMounted(ch2[i]);\n\n        if (c2.shapeFlag & 1\n        /* ELEMENT */\n        && !c2.dynamicChildren) {\n          if (c2.patchFlag <= 0 || c2.patchFlag === 32\n          /* HYDRATE_EVENTS */\n          ) {\n              c2.el = c1.el;\n            }\n\n          traverseStaticChildren(c1, c2);\n        }\n      }\n    }\n  };\n\n  const render = (vnode, container) => {\n    if (vnode == null) {\n      if (container._vnode) {\n        unmount(container._vnode, null, null, true);\n      }\n    } else {\n      patch(container._vnode || null, vnode, container);\n    }\n\n    flushPostFlushCbs();\n    container._vnode = vnode;\n  };\n\n  const internals = {\n    p: patch,\n    um: unmount,\n    m: move,\n    r: remove,\n    mt: mountComponent,\n    mc: mountChildren,\n    pc: patchChildren,\n    pbc: patchBlockChildren,\n    n: getNextHostNode,\n    o: options\n  };\n  let hydrate;\n  let hydrateNode;\n\n  if (createHydrationFns) {\n    [hydrate, hydrateNode] = createHydrationFns(internals);\n  }\n\n  return {\n    render,\n    hydrate,\n    createApp: createAppAPI(render, hydrate)\n  };\n}\n\nfunction invokeVNodeHook(hook, instance, vnode, prevVNode = null) {\n  callWithAsyncErrorHandling(hook, instance, 7\n  /* VNODE_HOOK */\n  , [vnode, prevVNode]);\n} // https://en.wikipedia.org/wiki/Longest_increasing_subsequence\n\n\nfunction getSequence(arr) {\n  const p = arr.slice();\n  const result = [0];\n  let i, j, u, v, c;\n  const len = arr.length;\n\n  for (i = 0; i < len; i++) {\n    const arrI = arr[i];\n\n    if (arrI !== 0) {\n      j = result[result.length - 1];\n\n      if (arr[j] < arrI) {\n        p[i] = j;\n        result.push(i);\n        continue;\n      }\n\n      u = 0;\n      v = result.length - 1;\n\n      while (u < v) {\n        c = (u + v) / 2 | 0;\n\n        if (arr[result[c]] < arrI) {\n          u = c + 1;\n        } else {\n          v = c;\n        }\n      }\n\n      if (arrI < arr[result[u]]) {\n        if (u > 0) {\n          p[i] = result[u - 1];\n        }\n\n        result[u] = i;\n      }\n    }\n  }\n\n  u = result.length;\n  v = result[u - 1];\n\n  while (u-- > 0) {\n    result[u] = v;\n    v = p[v];\n  }\n\n  return result;\n} // Simple effect.\n\n\nfunction watchEffect(effect, options) {\n  return doWatch(effect, null, options);\n} // initial value for watchers to trigger on undefined initial values\n\n\nconst INITIAL_WATCHER_VALUE = {}; // implementation\n\nfunction watch(source, cb, options) {\n  if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(cb)) {\n    warn(`\\`watch(fn, options?)\\` signature has been moved to a separate API. ` + `Use \\`watchEffect(fn, options?)\\` instead. \\`watch\\` now only ` + `supports \\`watch(source, cb, options?) signature.`);\n  }\n\n  return doWatch(source, cb, options);\n}\n\nfunction doWatch(source, cb, {\n  immediate,\n  deep,\n  flush,\n  onTrack,\n  onTrigger\n} = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"], instance = currentInstance) {\n  if ( true && !cb) {\n    if (immediate !== undefined) {\n      warn(`watch() \"immediate\" option is only respected when using the ` + `watch(source, callback, options?) signature.`);\n    }\n\n    if (deep !== undefined) {\n      warn(`watch() \"deep\" option is only respected when using the ` + `watch(source, callback, options?) signature.`);\n    }\n  }\n\n  const warnInvalidSource = s => {\n    warn(`Invalid watch source: `, s, `A watch source can only be a getter/effect function, a ref, ` + `a reactive object, or an array of these types.`);\n  };\n\n  let getter;\n\n  if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isRef */ \"e\"])(source)) {\n    getter = () => source.value;\n  } else if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isReactive */ \"d\"])(source)) {\n    getter = () => source;\n\n    deep = true;\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(source)) {\n    getter = () => source.map(s => {\n      if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isRef */ \"e\"])(s)) {\n        return s.value;\n      } else if (Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* isReactive */ \"d\"])(s)) {\n        return traverse(s);\n      } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(s)) {\n        return callWithErrorHandling(s, instance, 2\n        /* WATCH_GETTER */\n        );\n      } else {\n         true && warnInvalidSource(s);\n      }\n    });\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(source)) {\n    if (cb) {\n      // getter with cb\n      getter = () => callWithErrorHandling(source, instance, 2\n      /* WATCH_GETTER */\n      );\n    } else {\n      // no cb -> simple effect\n      getter = () => {\n        if (instance && instance.isUnmounted) {\n          return;\n        }\n\n        if (cleanup) {\n          cleanup();\n        }\n\n        return callWithErrorHandling(source, instance, 3\n        /* WATCH_CALLBACK */\n        , [onInvalidate]);\n      };\n    }\n  } else {\n    getter = _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"];\n     true && warnInvalidSource(source);\n  }\n\n  if (cb && deep) {\n    const baseGetter = getter;\n\n    getter = () => traverse(baseGetter());\n  }\n\n  let cleanup;\n\n  const onInvalidate = fn => {\n    cleanup = runner.options.onStop = () => {\n      callWithErrorHandling(fn, instance, 4\n      /* WATCH_CLEANUP */\n      );\n    };\n  };\n\n  let oldValue = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(source) ? [] : INITIAL_WATCHER_VALUE;\n\n  const job = () => {\n    if (!runner.active) {\n      return;\n    }\n\n    if (cb) {\n      // watch(source, cb)\n      const newValue = runner();\n\n      if (deep || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasChanged */ \"j\"])(newValue, oldValue)) {\n        // cleanup before running cb again\n        if (cleanup) {\n          cleanup();\n        }\n\n        callWithAsyncErrorHandling(cb, instance, 3\n        /* WATCH_CALLBACK */\n        , [newValue, // pass undefined as the old value when it's changed for the first time\n        oldValue === INITIAL_WATCHER_VALUE ? undefined : oldValue, onInvalidate]);\n        oldValue = newValue;\n      }\n    } else {\n      // watchEffect\n      runner();\n    }\n  };\n\n  let scheduler;\n\n  if (flush === 'sync') {\n    scheduler = job;\n  } else if (flush === 'pre') {\n    // ensure it's queued before component updates (which have positive ids)\n    job.id = -1;\n\n    scheduler = () => {\n      if (!instance || instance.isMounted) {\n        queueJob(job);\n      } else {\n        // with 'pre' option, the first call must happen before\n        // the component is mounted so it is called synchronously.\n        job();\n      }\n    };\n  } else {\n    scheduler = () => queuePostRenderEffect(job, instance && instance.suspense);\n  }\n\n  const runner = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* effect */ \"b\"])(getter, {\n    lazy: true,\n    onTrack,\n    onTrigger,\n    scheduler\n  });\n  recordInstanceBoundEffect(runner); // initial run\n\n  if (cb) {\n    if (immediate) {\n      job();\n    } else {\n      oldValue = runner();\n    }\n  } else {\n    runner();\n  }\n\n  return () => {\n    Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* stop */ \"n\"])(runner);\n\n    if (instance) {\n      Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* remove */ \"F\"])(instance.effects, runner);\n    }\n  };\n} // this.$watch\n\n\nfunction instanceWatch(source, cb, options) {\n  const publicThis = this.proxy;\n  const getter = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(source) ? () => publicThis[source] : source.bind(publicThis);\n  return doWatch(getter, cb.bind(publicThis), options, this);\n}\n\nfunction traverse(value, seen = new Set()) {\n  if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(value) || seen.has(value)) {\n    return value;\n  }\n\n  seen.add(value);\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(value)) {\n    for (let i = 0; i < value.length; i++) {\n      traverse(value[i], seen);\n    }\n  } else if (value instanceof Map) {\n    value.forEach((v, key) => {\n      // to register mutation dep for existing keys\n      traverse(value.get(key), seen);\n    });\n  } else if (value instanceof Set) {\n    value.forEach(v => {\n      traverse(v, seen);\n    });\n  } else {\n    for (const key in value) {\n      traverse(value[key], seen);\n    }\n  }\n\n  return value;\n}\n\nfunction provide(key, value) {\n  if (!currentInstance) {\n    if (true) {\n      warn(`provide() can only be used inside setup().`);\n    }\n  } else {\n    let provides = currentInstance.provides; // by default an instance inherits its parent's provides object\n    // but when it needs to provide values of its own, it creates its\n    // own provides object using parent provides object as prototype.\n    // this way in `inject` we can simply look up injections from direct\n    // parent and let the prototype chain do the work.\n\n    const parentProvides = currentInstance.parent && currentInstance.parent.provides;\n\n    if (parentProvides === provides) {\n      provides = currentInstance.provides = Object.create(parentProvides);\n    } // TS doesn't allow symbol as index type\n\n\n    provides[key] = value;\n  }\n}\n\nfunction inject(key, defaultValue) {\n  // fallback to `currentRenderingInstance` so that this can be called in\n  // a functional component\n  const instance = currentInstance || currentRenderingInstance;\n\n  if (instance) {\n    const provides = instance.provides;\n\n    if (key in provides) {\n      // TS doesn't allow symbol as index type\n      return provides[key];\n    } else if (arguments.length > 1) {\n      return defaultValue;\n    } else if (true) {\n      warn(`injection \"${String(key)}\" not found.`);\n    }\n  } else if (true) {\n    warn(`inject() can only be used inside setup() or functional components.`);\n  }\n}\n\nfunction createDuplicateChecker() {\n  const cache = Object.create(null);\n  return (type, key) => {\n    if (cache[key]) {\n      warn(`${type} property \"${key}\" is already defined in ${cache[key]}.`);\n    } else {\n      cache[key] = type;\n    }\n  };\n}\n\nfunction applyOptions(instance, options, deferredData = [], deferredWatch = [], asMixin = false) {\n  const {\n    // composition\n    mixins,\n    extends: extendsOptions,\n    // state\n    data: dataOptions,\n    computed: computedOptions,\n    methods,\n    watch: watchOptions,\n    provide: provideOptions,\n    inject: injectOptions,\n    // lifecycle\n    beforeMount,\n    mounted,\n    beforeUpdate,\n    updated,\n    activated,\n    deactivated,\n    beforeUnmount,\n    unmounted,\n    render,\n    renderTracked,\n    renderTriggered,\n    errorCaptured\n  } = options;\n  const publicThis = instance.proxy;\n  const ctx = instance.ctx;\n  const globalMixins = instance.appContext.mixins;\n\n  if (asMixin && render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]) {\n    instance.render = render;\n  } // applyOptions is called non-as-mixin once per instance\n\n\n  if (!asMixin) {\n    callSyncHook('beforeCreate', options, publicThis, globalMixins); // global mixins are applied first\n\n    applyMixins(instance, globalMixins, deferredData, deferredWatch);\n  } // extending a base component...\n\n\n  if (extendsOptions) {\n    applyOptions(instance, extendsOptions, deferredData, deferredWatch, true);\n  } // local mixins\n\n\n  if (mixins) {\n    applyMixins(instance, mixins, deferredData, deferredWatch);\n  }\n\n  const checkDuplicateProperties =  true ? createDuplicateChecker() : undefined;\n\n  if (true) {\n    const propsOptions = normalizePropsOptions(options)[0];\n\n    if (propsOptions) {\n      for (const key in propsOptions) {\n        checkDuplicateProperties(\"Props\"\n        /* PROPS */\n        , key);\n      }\n    }\n  } // options initialization order (to be consistent with Vue 2):\n  // - props (already done outside of this function)\n  // - inject\n  // - methods\n  // - data (deferred since it relies on `this` access)\n  // - computed\n  // - watch (deferred since it relies on `this` access)\n\n\n  if (injectOptions) {\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(injectOptions)) {\n      for (let i = 0; i < injectOptions.length; i++) {\n        const key = injectOptions[i];\n        ctx[key] = inject(key);\n\n        if (true) {\n          checkDuplicateProperties(\"Inject\"\n          /* INJECT */\n          , key);\n        }\n      }\n    } else {\n      for (const key in injectOptions) {\n        const opt = injectOptions[key];\n\n        if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(opt)) {\n          ctx[key] = inject(opt.from, opt.default);\n        } else {\n          ctx[key] = inject(opt);\n        }\n\n        if (true) {\n          checkDuplicateProperties(\"Inject\"\n          /* INJECT */\n          , key);\n        }\n      }\n    }\n  }\n\n  if (methods) {\n    for (const key in methods) {\n      const methodHandler = methods[key];\n\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(methodHandler)) {\n        ctx[key] = methodHandler.bind(publicThis);\n\n        if (true) {\n          checkDuplicateProperties(\"Methods\"\n          /* METHODS */\n          , key);\n        }\n      } else if (true) {\n        warn(`Method \"${key}\" has type \"${typeof methodHandler}\" in the component definition. ` + `Did you reference the function correctly?`);\n      }\n    }\n  }\n\n  if (dataOptions) {\n    if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(dataOptions)) {\n      warn(`The data option must be a function. ` + `Plain object usage is no longer supported.`);\n    }\n\n    if (asMixin) {\n      deferredData.push(dataOptions);\n    } else {\n      resolveData(instance, dataOptions, publicThis);\n    }\n  }\n\n  if (!asMixin) {\n    if (deferredData.length) {\n      deferredData.forEach(dataFn => resolveData(instance, dataFn, publicThis));\n    }\n\n    if (true) {\n      const rawData = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(instance.data);\n\n      for (const key in rawData) {\n        checkDuplicateProperties(\"Data\"\n        /* DATA */\n        , key); // expose data on ctx during dev\n\n        if (key[0] !== '$' && key[0] !== '_') {\n          Object.defineProperty(ctx, key, {\n            configurable: true,\n            enumerable: true,\n            get: () => rawData[key],\n            set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]\n          });\n        }\n      }\n    }\n  }\n\n  if (computedOptions) {\n    for (const key in computedOptions) {\n      const opt = computedOptions[key];\n      const get = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(opt) ? opt.bind(publicThis, publicThis) : Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(opt.get) ? opt.get.bind(publicThis, publicThis) : _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"];\n\n      if ( true && get === _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]) {\n        warn(`Computed property \"${key}\" has no getter.`);\n      }\n\n      const set = !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(opt) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(opt.set) ? opt.set.bind(publicThis) :  true ? () => {\n        warn(`Write operation failed: computed property \"${key}\" is readonly.`);\n      } : undefined;\n      const c = computed({\n        get,\n        set\n      });\n      Object.defineProperty(ctx, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => c.value,\n        set: v => c.value = v\n      });\n\n      if (true) {\n        checkDuplicateProperties(\"Computed\"\n        /* COMPUTED */\n        , key);\n      }\n    }\n  }\n\n  if (watchOptions) {\n    deferredWatch.push(watchOptions);\n  }\n\n  if (!asMixin && deferredWatch.length) {\n    deferredWatch.forEach(watchOptions => {\n      for (const key in watchOptions) {\n        createWatcher(watchOptions[key], ctx, publicThis, key);\n      }\n    });\n  }\n\n  if (provideOptions) {\n    const provides = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(provideOptions) ? provideOptions.call(publicThis) : provideOptions;\n\n    for (const key in provides) {\n      provide(key, provides[key]);\n    }\n  } // lifecycle options\n\n\n  if (!asMixin) {\n    callSyncHook('created', options, publicThis, globalMixins);\n  }\n\n  if (beforeMount) {\n    onBeforeMount(beforeMount.bind(publicThis));\n  }\n\n  if (mounted) {\n    onMounted(mounted.bind(publicThis));\n  }\n\n  if (beforeUpdate) {\n    onBeforeUpdate(beforeUpdate.bind(publicThis));\n  }\n\n  if (updated) {\n    onUpdated(updated.bind(publicThis));\n  }\n\n  if (activated) {\n    onActivated(activated.bind(publicThis));\n  }\n\n  if (deactivated) {\n    onDeactivated(deactivated.bind(publicThis));\n  }\n\n  if (errorCaptured) {\n    onErrorCaptured(errorCaptured.bind(publicThis));\n  }\n\n  if (renderTracked) {\n    onRenderTracked(renderTracked.bind(publicThis));\n  }\n\n  if (renderTriggered) {\n    onRenderTriggered(renderTriggered.bind(publicThis));\n  }\n\n  if (beforeUnmount) {\n    onBeforeUnmount(beforeUnmount.bind(publicThis));\n  }\n\n  if (unmounted) {\n    onUnmounted(unmounted.bind(publicThis));\n  }\n}\n\nfunction callSyncHook(name, options, ctx, globalMixins) {\n  callHookFromMixins(name, globalMixins, ctx);\n  const baseHook = options.extends && options.extends[name];\n\n  if (baseHook) {\n    baseHook.call(ctx);\n  }\n\n  const mixins = options.mixins;\n\n  if (mixins) {\n    callHookFromMixins(name, mixins, ctx);\n  }\n\n  const selfHook = options[name];\n\n  if (selfHook) {\n    selfHook.call(ctx);\n  }\n}\n\nfunction callHookFromMixins(name, mixins, ctx) {\n  for (let i = 0; i < mixins.length; i++) {\n    const fn = mixins[i][name];\n\n    if (fn) {\n      fn.call(ctx);\n    }\n  }\n}\n\nfunction applyMixins(instance, mixins, deferredData, deferredWatch) {\n  for (let i = 0; i < mixins.length; i++) {\n    applyOptions(instance, mixins[i], deferredData, deferredWatch, true);\n  }\n}\n\nfunction resolveData(instance, dataFn, publicThis) {\n  const data = dataFn.call(publicThis, publicThis);\n\n  if ( true && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isPromise */ \"u\"])(data)) {\n    warn(`data() returned a Promise - note data() cannot be async; If you ` + `intend to perform data fetching before component renders, use ` + `async setup() + <Suspense>.`);\n  }\n\n  if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(data)) {\n     true && warn(`data() should return an object.`);\n  } else if (instance.data === _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"]) {\n    instance.data = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* reactive */ \"h\"])(data);\n  } else {\n    // existing data: this is a mixin or extends.\n    Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(instance.data, data);\n  }\n}\n\nfunction createWatcher(raw, ctx, publicThis, key) {\n  const getter = () => publicThis[key];\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(raw)) {\n    const handler = ctx[raw];\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(handler)) {\n      watch(getter, handler);\n    } else if (true) {\n      warn(`Invalid watch handler specified by key \"${raw}\"`, handler);\n    }\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(raw)) {\n    watch(getter, raw.bind(publicThis));\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(raw)) {\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(raw)) {\n      raw.forEach(r => createWatcher(r, ctx, publicThis, key));\n    } else {\n      watch(getter, raw.handler.bind(publicThis), raw);\n    }\n  } else if (true) {\n    warn(`Invalid watch option: \"${key}\"`);\n  }\n}\n\nfunction resolveMergedOptions(instance) {\n  const raw = instance.type;\n  const {\n    __merged,\n    mixins,\n    extends: extendsOptions\n  } = raw;\n  if (__merged) return __merged;\n  const globalMixins = instance.appContext.mixins;\n  if (!globalMixins.length && !mixins && !extendsOptions) return raw;\n  const options = {};\n  globalMixins.forEach(m => mergeOptions(options, m, instance));\n  extendsOptions && mergeOptions(options, extendsOptions, instance);\n  mixins && mixins.forEach(m => mergeOptions(options, m, instance));\n  mergeOptions(options, raw, instance);\n  return raw.__merged = options;\n}\n\nfunction mergeOptions(to, from, instance) {\n  const strats = instance.appContext.config.optionMergeStrategies;\n\n  for (const key in from) {\n    if (strats && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(strats, key)) {\n      to[key] = strats[key](to[key], from[key], instance.proxy, key);\n    } else if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(to, key)) {\n      to[key] = from[key];\n    }\n  }\n}\n\nconst publicPropertiesMap = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(Object.create(null), {\n  $: i => i,\n  $el: i => i.vnode.el,\n  $data: i => i.data,\n  $props: i =>  true ? Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReadonly */ \"l\"])(i.props) : undefined,\n  $attrs: i =>  true ? Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReadonly */ \"l\"])(i.attrs) : undefined,\n  $slots: i =>  true ? Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReadonly */ \"l\"])(i.slots) : undefined,\n  $refs: i =>  true ? Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReadonly */ \"l\"])(i.refs) : undefined,\n  $parent: i => i.parent && i.parent.proxy,\n  $root: i => i.root && i.root.proxy,\n  $emit: i => i.emit,\n  $options: i =>  true ? resolveMergedOptions(i) : undefined,\n  $forceUpdate: i => () => queueJob(i.update),\n  $nextTick: () => nextTick,\n  $watch: i =>  true ? instanceWatch.bind(i) : undefined\n});\nconst PublicInstanceProxyHandlers = {\n  get({\n    _: instance\n  }, key) {\n    const {\n      ctx,\n      setupState,\n      data,\n      props,\n      accessCache,\n      type,\n      appContext\n    } = instance; // let @vue/reactivity know it should never observe Vue public instances.\n\n    if (key === \"__v_skip\"\n    /* SKIP */\n    ) {\n        return true;\n      } // data / props / ctx\n    // This getter gets called for every property access on the render context\n    // during render and is a major hotspot. The most expensive part of this\n    // is the multiple hasOwn() calls. It's much faster to do a simple property\n    // access on a plain object, so we use an accessCache object (with null\n    // prototype) to memoize what access type a key corresponds to.\n\n\n    let normalizedProps;\n\n    if (key[0] !== '$') {\n      const n = accessCache[key];\n\n      if (n !== undefined) {\n        switch (n) {\n          case 0\n          /* SETUP */\n          :\n            return setupState[key];\n\n          case 1\n          /* DATA */\n          :\n            return data[key];\n\n          case 3\n          /* CONTEXT */\n          :\n            return ctx[key];\n\n          case 2\n          /* PROPS */\n          :\n            return props[key];\n          // default: just fallthrough\n        }\n      } else if (setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(setupState, key)) {\n        accessCache[key] = 0\n        /* SETUP */\n        ;\n        return setupState[key];\n      } else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(data, key)) {\n        accessCache[key] = 1\n        /* DATA */\n        ;\n        return data[key];\n      } else if ( // only cache other properties when instance has declared (thus stable)\n      // props\n      (normalizedProps = normalizePropsOptions(type)[0]) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(normalizedProps, key)) {\n        accessCache[key] = 2\n        /* PROPS */\n        ;\n        return props[key];\n      } else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(ctx, key)) {\n        accessCache[key] = 3\n        /* CONTEXT */\n        ;\n        return ctx[key];\n      } else {\n        accessCache[key] = 4\n        /* OTHER */\n        ;\n      }\n    }\n\n    const publicGetter = publicPropertiesMap[key];\n    let cssModule, globalProperties; // public $xxx properties\n\n    if (publicGetter) {\n      if (key === '$attrs') {\n        Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* track */ \"p\"])(instance, \"get\"\n        /* GET */\n        , key);\n         true && markAttrsAccessed();\n      }\n\n      return publicGetter(instance);\n    } else if ( // css module (injected by vue-loader)\n    (cssModule = type.__cssModules) && (cssModule = cssModule[key])) {\n      return cssModule;\n    } else if (ctx !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(ctx, key)) {\n      // user may set custom properties to `this` that start with `$`\n      accessCache[key] = 3\n      /* CONTEXT */\n      ;\n      return ctx[key];\n    } else if ( // global properties\n    globalProperties = appContext.config.globalProperties, Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(globalProperties, key)) {\n      return globalProperties[key];\n    } else if ( true && currentRenderingInstance && // #1091 avoid internal isRef/isVNode checks on component instance leading\n    // to infinite warning loop\n    key.indexOf('__v') !== 0) {\n      if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && key[0] === '$' && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(data, key)) {\n        warn(`Property ${JSON.stringify(key)} must be accessed via $data because it starts with a reserved ` + `character and is not proxied on the render context.`);\n      } else {\n        warn(`Property ${JSON.stringify(key)} was accessed during render ` + `but is not defined on instance.`);\n      }\n    }\n  },\n\n  set({\n    _: instance\n  }, key, value) {\n    const {\n      data,\n      setupState,\n      ctx\n    } = instance;\n\n    if (setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(setupState, key)) {\n      setupState[key] = value;\n    } else if (data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(data, key)) {\n      data[key] = value;\n    } else if (key in instance.props) {\n       true && warn(`Attempting to mutate prop \"${key}\". Props are readonly.`, instance);\n      return false;\n    }\n\n    if (key[0] === '$' && key.slice(1) in instance) {\n       true && warn(`Attempting to mutate public property \"${key}\". ` + `Properties starting with $ are reserved and readonly.`, instance);\n      return false;\n    } else {\n      if ( true && key in instance.appContext.config.globalProperties) {\n        Object.defineProperty(ctx, key, {\n          enumerable: true,\n          configurable: true,\n          value\n        });\n      } else {\n        ctx[key] = value;\n      }\n    }\n\n    return true;\n  },\n\n  has({\n    _: {\n      data,\n      setupState,\n      accessCache,\n      ctx,\n      type,\n      appContext\n    }\n  }, key) {\n    let normalizedProps;\n    return accessCache[key] !== undefined || data !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(data, key) || setupState !== _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"] && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(setupState, key) || (normalizedProps = normalizePropsOptions(type)[0]) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(normalizedProps, key) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(ctx, key) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(publicPropertiesMap, key) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hasOwn */ \"k\"])(appContext.config.globalProperties, key);\n  }\n\n};\n\nif (true) {\n  PublicInstanceProxyHandlers.ownKeys = target => {\n    warn(`Avoid app logic that relies on enumerating keys on a component instance. ` + `The keys will be empty in production mode to avoid performance overhead.`);\n    return Reflect.ownKeys(target);\n  };\n}\n\nconst RuntimeCompiledPublicInstanceProxyHandlers = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, PublicInstanceProxyHandlers, {\n  get(target, key) {\n    // fast path for unscopables when using `with` block\n    if (key === Symbol.unscopables) {\n      return;\n    }\n\n    return PublicInstanceProxyHandlers.get(target, key, target);\n  },\n\n  has(_, key) {\n    const has = key[0] !== '_' && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isGloballyWhitelisted */ \"p\"])(key);\n\n    if ( true && !has && PublicInstanceProxyHandlers.has(_, key)) {\n      warn(`Property ${JSON.stringify(key)} should not start with _ which is a reserved prefix for Vue internals.`);\n    }\n\n    return has;\n  }\n\n}); // In dev mode, the proxy target exposes the same properties as seen on `this`\n// for easier console inspection. In prod mode it will be an empty object so\n// these properties definitions can be skipped.\n\nfunction createRenderContext(instance) {\n  const target = {}; // expose internal instance for proxy handlers\n\n  Object.defineProperty(target, `_`, {\n    configurable: true,\n    enumerable: false,\n    get: () => instance\n  }); // expose public properties\n\n  Object.keys(publicPropertiesMap).forEach(key => {\n    Object.defineProperty(target, key, {\n      configurable: true,\n      enumerable: false,\n      get: () => publicPropertiesMap[key](instance),\n      // intercepted by the proxy so no need for implementation,\n      // but needed to prevent set errors\n      set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]\n    });\n  }); // expose global properties\n\n  const {\n    globalProperties\n  } = instance.appContext.config;\n  Object.keys(globalProperties).forEach(key => {\n    Object.defineProperty(target, key, {\n      configurable: true,\n      enumerable: false,\n      get: () => globalProperties[key],\n      set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]\n    });\n  });\n  return target;\n} // dev only\n\n\nfunction exposePropsOnRenderContext(instance) {\n  const {\n    ctx,\n    type\n  } = instance;\n  const propsOptions = normalizePropsOptions(type)[0];\n\n  if (propsOptions) {\n    Object.keys(propsOptions).forEach(key => {\n      Object.defineProperty(ctx, key, {\n        enumerable: true,\n        configurable: true,\n        get: () => instance.props[key],\n        set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]\n      });\n    });\n  }\n} // dev only\n\n\nfunction exposeSetupStateOnRenderContext(instance) {\n  const {\n    ctx,\n    setupState\n  } = instance;\n  Object.keys(Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* toRaw */ \"o\"])(setupState)).forEach(key => {\n    Object.defineProperty(ctx, key, {\n      enumerable: true,\n      configurable: true,\n      get: () => setupState[key],\n      set: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]\n    });\n  });\n}\n\nconst emptyAppContext = createAppContext();\nlet uid = 0;\n\nfunction createComponentInstance(vnode, parent, suspense) {\n  const type = vnode.type; // inherit parent app context - or - if root, adopt from root vnode\n\n  const appContext = (parent ? parent.appContext : vnode.appContext) || emptyAppContext;\n  const instance = {\n    uid: uid++,\n    vnode,\n    type,\n    parent,\n    appContext,\n    root: null,\n    next: null,\n    subTree: null,\n    update: null,\n    render: null,\n    proxy: null,\n    withProxy: null,\n    effects: null,\n    provides: parent ? parent.provides : Object.create(appContext.provides),\n    accessCache: null,\n    renderCache: [],\n    // state\n    ctx: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    data: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    props: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    attrs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    slots: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    refs: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    setupState: _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"],\n    setupContext: null,\n    // suspense related\n    suspense,\n    asyncDep: null,\n    asyncResolved: false,\n    // lifecycle hooks\n    // not using enums here because it results in computed properties\n    isMounted: false,\n    isUnmounted: false,\n    isDeactivated: false,\n    bc: null,\n    c: null,\n    bm: null,\n    m: null,\n    bu: null,\n    u: null,\n    um: null,\n    bum: null,\n    da: null,\n    a: null,\n    rtg: null,\n    rtc: null,\n    ec: null,\n    emit: null,\n    emitted: null\n  };\n\n  if (true) {\n    instance.ctx = createRenderContext(instance);\n  } else {}\n\n  instance.root = parent ? parent.root : instance;\n  instance.emit = emit.bind(null, instance);\n\n  if (true) {\n    devtoolsComponentAdded(instance);\n  }\n\n  return instance;\n}\n\nlet currentInstance = null;\n\nconst getCurrentInstance = () => currentInstance || currentRenderingInstance;\n\nconst setCurrentInstance = instance => {\n  currentInstance = instance;\n};\n\nconst isBuiltInTag = /*#__PURE__*/Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* makeMap */ \"C\"])('slot,component');\n\nfunction validateComponentName(name, config) {\n  const appIsNativeTag = config.isNativeTag || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NO */ \"c\"];\n\n  if (isBuiltInTag(name) || appIsNativeTag(name)) {\n    warn('Do not use built-in or reserved HTML elements as component id: ' + name);\n  }\n}\n\nlet isInSSRComponentSetup = false;\n\nfunction setupComponent(instance, isSSR = false) {\n  isInSSRComponentSetup = isSSR;\n  const {\n    props,\n    children,\n    shapeFlag\n  } = instance.vnode;\n  const isStateful = shapeFlag & 4\n  /* STATEFUL_COMPONENT */\n  ;\n  initProps(instance, props, isStateful, isSSR);\n  initSlots(instance, children);\n  const setupResult = isStateful ? setupStatefulComponent(instance, isSSR) : undefined;\n  isInSSRComponentSetup = false;\n  return setupResult;\n}\n\nfunction setupStatefulComponent(instance, isSSR) {\n  const Component = instance.type;\n\n  if (true) {\n    if (Component.name) {\n      validateComponentName(Component.name, instance.appContext.config);\n    }\n\n    if (Component.components) {\n      const names = Object.keys(Component.components);\n\n      for (let i = 0; i < names.length; i++) {\n        validateComponentName(names[i], instance.appContext.config);\n      }\n    }\n\n    if (Component.directives) {\n      const names = Object.keys(Component.directives);\n\n      for (let i = 0; i < names.length; i++) {\n        validateDirectiveName(names[i]);\n      }\n    }\n  } // 0. create render proxy property access cache\n\n\n  instance.accessCache = {}; // 1. create public instance / render proxy\n  // also mark it raw so it's never observed\n\n  instance.proxy = new Proxy(instance.ctx, PublicInstanceProxyHandlers);\n\n  if (true) {\n    exposePropsOnRenderContext(instance);\n  } // 2. call setup()\n\n\n  const {\n    setup\n  } = Component;\n\n  if (setup) {\n    const setupContext = instance.setupContext = setup.length > 1 ? createSetupContext(instance) : null;\n    currentInstance = instance;\n    Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* pauseTracking */ \"f\"])();\n    const setupResult = callWithErrorHandling(setup, instance, 0\n    /* SETUP_FUNCTION */\n    , [ true ? Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReadonly */ \"l\"])(instance.props) : undefined, setupContext]);\n    Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* resetTracking */ \"j\"])();\n    currentInstance = null;\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isPromise */ \"u\"])(setupResult)) {\n      if (isSSR) {\n        // return the promise so server-renderer can wait on it\n        return setupResult.then(resolvedResult => {\n          handleSetupResult(instance, resolvedResult);\n        });\n      } else {\n        // async setup returned Promise.\n        // bail here and wait for re-entry.\n        instance.asyncDep = setupResult;\n      }\n    } else {\n      handleSetupResult(instance, setupResult);\n    }\n  } else {\n    finishComponentSetup(instance);\n  }\n}\n\nfunction handleSetupResult(instance, setupResult, isSSR) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(setupResult)) {\n    // setup returned an inline render function\n    instance.render = setupResult;\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(setupResult)) {\n    if ( true && isVNode(setupResult)) {\n      warn(`setup() should not return VNodes directly - ` + `return a render function instead.`);\n    } // setup returned bindings.\n    // assuming a render function compiled from template is present.\n\n\n    instance.setupState = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* proxyRefs */ \"g\"])(setupResult);\n\n    if (true) {\n      exposeSetupStateOnRenderContext(instance);\n    }\n  } else if ( true && setupResult !== undefined) {\n    warn(`setup() should return an object. Received: ${setupResult === null ? 'null' : typeof setupResult}`);\n  }\n\n  finishComponentSetup(instance);\n}\n\nlet compile;\n/**\r\n * For runtime-dom to register the compiler.\r\n * Note the exported method uses any to avoid d.ts relying on the compiler types.\r\n */\n\nfunction registerRuntimeCompiler(_compile) {\n  compile = _compile;\n}\n\nfunction finishComponentSetup(instance, isSSR) {\n  const Component = instance.type; // template / render function normalization\n\n  if (!instance.render) {\n    // could be set from setup()\n    if (compile && Component.template && !Component.render) {\n      if (true) {\n        startMeasure(instance, `compile`);\n      }\n\n      Component.render = compile(Component.template, {\n        isCustomElement: instance.appContext.config.isCustomElement,\n        delimiters: Component.delimiters\n      });\n\n      if (true) {\n        endMeasure(instance, `compile`);\n      }\n    }\n\n    instance.render = Component.render || _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]; // for runtime-compiled render functions using `with` blocks, the render\n    // proxy used needs a different `has` handler which is more performant and\n    // also only allows a whitelist of globals to fallthrough.\n\n    if (instance.render._rc) {\n      instance.withProxy = new Proxy(instance.ctx, RuntimeCompiledPublicInstanceProxyHandlers);\n    }\n  } // support for 2.x options\n\n\n  if (true) {\n    currentInstance = instance;\n    applyOptions(instance, Component);\n    currentInstance = null;\n  } // warn missing template/render\n\n\n  if ( true && !Component.render && instance.render === _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* NOOP */ \"d\"]) {\n    /* istanbul ignore if */\n    if (!compile && Component.template) {\n      warn(`Component provided template option but ` + `runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\n      /* should not happen */\n      );\n    } else {\n      warn(`Component is missing template or render function.`);\n    }\n  }\n}\n\nconst attrHandlers = {\n  get: (target, key) => {\n    if (true) {\n      markAttrsAccessed();\n    }\n\n    return target[key];\n  },\n  set: () => {\n    warn(`setupContext.attrs is readonly.`);\n    return false;\n  },\n  deleteProperty: () => {\n    warn(`setupContext.attrs is readonly.`);\n    return false;\n  }\n};\n\nfunction createSetupContext(instance) {\n  if (true) {\n    // We use getters in dev in case libs like test-utils overwrite instance\n    // properties (overwrites should not be done in prod)\n    return Object.freeze({\n      get attrs() {\n        return new Proxy(instance.attrs, attrHandlers);\n      },\n\n      get slots() {\n        return Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* shallowReadonly */ \"l\"])(instance.slots);\n      },\n\n      get emit() {\n        return (event, ...args) => instance.emit(event, ...args);\n      }\n\n    });\n  } else {}\n} // record effects created during a component's setup() so that they can be\n// stopped when the component unmounts\n\n\nfunction recordInstanceBoundEffect(effect) {\n  if (currentInstance) {\n    (currentInstance.effects || (currentInstance.effects = [])).push(effect);\n  }\n}\n\nconst classifyRE = /(?:^|[-_])(\\w)/g;\n\nconst classify = str => str.replace(classifyRE, c => c.toUpperCase()).replace(/[-_]/g, '');\n/* istanbul ignore next */\n\n\nfunction formatComponentName(instance, Component, isRoot = false) {\n  let name = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(Component) ? Component.displayName || Component.name : Component.name;\n\n  if (!name && Component.__file) {\n    const match = Component.__file.match(/([^/\\\\]+)\\.vue$/);\n\n    if (match) {\n      name = match[1];\n    }\n  }\n\n  if (!name && instance && instance.parent) {\n    // try to infer the name based on reverse resolution\n    const inferFromRegistry = registry => {\n      for (const key in registry) {\n        if (registry[key] === Component) {\n          return key;\n        }\n      }\n    };\n\n    name = inferFromRegistry(instance.parent.type.components) || inferFromRegistry(instance.appContext.components);\n  }\n\n  return name ? classify(name) : isRoot ? `App` : `Anonymous`;\n}\n\nfunction computed(getterOrOptions) {\n  const c = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(getterOrOptions);\n  recordInstanceBoundEffect(c.effect);\n  return c;\n} // implementation, close to no-op\n\n\nfunction defineComponent(options) {\n  return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(options) ? {\n    setup: options,\n    name: options.name\n  } : options;\n}\n\nfunction defineAsyncComponent(source) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(source)) {\n    source = {\n      loader: source\n    };\n  }\n\n  const {\n    loader,\n    loadingComponent: loadingComponent,\n    errorComponent: errorComponent,\n    delay = 200,\n    timeout,\n    // undefined = never times out\n    suspensible = true,\n    onError: userOnError\n  } = source;\n  let pendingRequest = null;\n  let resolvedComp;\n  let retries = 0;\n\n  const retry = () => {\n    retries++;\n    pendingRequest = null;\n    return load();\n  };\n\n  const load = () => {\n    let thisRequest;\n    return pendingRequest || (thisRequest = pendingRequest = loader().catch(err => {\n      err = err instanceof Error ? err : new Error(String(err));\n\n      if (userOnError) {\n        return new Promise((resolve, reject) => {\n          const userRetry = () => resolve(retry());\n\n          const userFail = () => reject(err);\n\n          userOnError(err, userRetry, userFail, retries + 1);\n        });\n      } else {\n        throw err;\n      }\n    }).then(comp => {\n      if (thisRequest !== pendingRequest && pendingRequest) {\n        return pendingRequest;\n      }\n\n      if ( true && !comp) {\n        warn(`Async component loader resolved to undefined. ` + `If you are using retry(), make sure to return its return value.`);\n      } // interop module default\n\n\n      if (comp && (comp.__esModule || comp[Symbol.toStringTag] === 'Module')) {\n        comp = comp.default;\n      }\n\n      if ( true && comp && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(comp) && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(comp)) {\n        throw new Error(`Invalid async component load result: ${comp}`);\n      }\n\n      resolvedComp = comp;\n      return comp;\n    }));\n  };\n\n  return defineComponent({\n    __asyncLoader: load,\n    name: 'AsyncComponentWrapper',\n\n    setup() {\n      const instance = currentInstance; // already resolved\n\n      if (resolvedComp) {\n        return () => createInnerComp(resolvedComp, instance);\n      }\n\n      const onError = err => {\n        pendingRequest = null;\n        handleError(err, instance, 13\n        /* ASYNC_COMPONENT_LOADER */\n        );\n      }; // suspense-controlled or SSR.\n\n\n      if (suspensible && instance.suspense || false) {\n        return load().then(comp => {\n          return () => createInnerComp(comp, instance);\n        }).catch(err => {\n          onError(err);\n          return () => errorComponent ? createVNode(errorComponent, {\n            error: err\n          }) : null;\n        });\n      }\n\n      const loaded = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* ref */ \"i\"])(false);\n      const error = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* ref */ \"i\"])();\n      const delayed = Object(_vue_reactivity__WEBPACK_IMPORTED_MODULE_0__[/* ref */ \"i\"])(!!delay);\n\n      if (delay) {\n        setTimeout(() => {\n          delayed.value = false;\n        }, delay);\n      }\n\n      if (timeout != null) {\n        setTimeout(() => {\n          if (!loaded.value) {\n            const err = new Error(`Async component timed out after ${timeout}ms.`);\n            onError(err);\n            error.value = err;\n          }\n        }, timeout);\n      }\n\n      load().then(() => {\n        loaded.value = true;\n      }).catch(err => {\n        onError(err);\n        error.value = err;\n      });\n      return () => {\n        if (loaded.value && resolvedComp) {\n          return createInnerComp(resolvedComp, instance);\n        } else if (error.value && errorComponent) {\n          return createVNode(errorComponent, {\n            error: error.value\n          });\n        } else if (loadingComponent && !delayed.value) {\n          return createVNode(loadingComponent);\n        }\n      };\n    }\n\n  });\n}\n\nfunction createInnerComp(comp, {\n  vnode: {\n    props,\n    children\n  }\n}) {\n  return createVNode(comp, props, children);\n} // Actual implementation\n\n\nfunction h(type, propsOrChildren, children) {\n  if (arguments.length === 2) {\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(propsOrChildren) && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(propsOrChildren)) {\n      // single vnode without props\n      if (isVNode(propsOrChildren)) {\n        return createVNode(type, null, [propsOrChildren]);\n      } // props without children\n\n\n      return createVNode(type, propsOrChildren);\n    } else {\n      // omit props\n      return createVNode(type, null, propsOrChildren);\n    }\n  } else {\n    if (isVNode(children)) {\n      children = [children];\n    }\n\n    return createVNode(type, propsOrChildren, children);\n  }\n}\n\nconst ssrContextKey = Symbol( true ? `ssrContext` : undefined);\n\nconst useSSRContext = () => {\n  {\n    const ctx = inject(ssrContextKey);\n\n    if (!ctx) {\n      warn(`Server rendering context not provided. Make sure to only call ` + `useSsrContext() conditionally in the server build.`);\n    }\n\n    return ctx;\n  }\n};\n/**\r\n * Actual implementation\r\n */\n\n\nfunction renderList(source, renderItem) {\n  let ret;\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(source) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(source)) {\n    ret = new Array(source.length);\n\n    for (let i = 0, l = source.length; i < l; i++) {\n      ret[i] = renderItem(source[i], i);\n    }\n  } else if (typeof source === 'number') {\n    ret = new Array(source);\n\n    for (let i = 0; i < source; i++) {\n      ret[i] = renderItem(i + 1, i);\n    }\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(source)) {\n    if (source[Symbol.iterator]) {\n      ret = Array.from(source, renderItem);\n    } else {\n      const keys = Object.keys(source);\n      ret = new Array(keys.length);\n\n      for (let i = 0, l = keys.length; i < l; i++) {\n        const key = keys[i];\n        ret[i] = renderItem(source[key], key, i);\n      }\n    }\n  } else {\n    ret = [];\n  }\n\n  return ret;\n}\n/**\r\n * For prefixing keys in v-on=\"obj\" with \"on\"\r\n * @private\r\n */\n\n\nfunction toHandlers(obj) {\n  const ret = {};\n\n  if ( true && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(obj)) {\n    warn(`v-on with no argument expects an object value.`);\n    return ret;\n  }\n\n  for (const key in obj) {\n    ret[`on${Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(key)}`] = obj[key];\n  }\n\n  return ret;\n}\n/**\r\n * Compiler runtime helper for rendering `<slot/>`\r\n * @private\r\n */\n\n\nfunction renderSlot(slots, name, props = {}, // this is not a user-facing function, so the fallback is always generated by\n// the compiler and guaranteed to be a function returning an array\nfallback) {\n  let slot = slots[name];\n\n  if ( true && slot && slot.length > 1) {\n    warn(`SSR-optimized slot function detected in a non-SSR-optimized render ` + `function. You need to mark this component with $dynamic-slots in the ` + `parent template.`);\n\n    slot = () => [];\n  }\n\n  return openBlock(), createBlock(Fragment, {\n    key: props.key\n  }, slot ? slot(props) : fallback ? fallback() : [], slots._ === 1\n  /* STABLE */\n  ? 64\n  /* STABLE_FRAGMENT */\n  : -2\n  /* BAIL */\n  );\n}\n/**\r\n * Compiler runtime helper for creating dynamic slots object\r\n * @private\r\n */\n\n\nfunction createSlots(slots, dynamicSlots) {\n  for (let i = 0; i < dynamicSlots.length; i++) {\n    const slot = dynamicSlots[i]; // array of dynamic slot generated by <template v-for=\"...\" #[...]>\n\n    if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(slot)) {\n      for (let j = 0; j < slot.length; j++) {\n        slots[slot[j].name] = slot[j].fn;\n      }\n    } else if (slot) {\n      // conditional single slot generated by <template v-if=\"...\" #foo>\n      slots[slot.name] = slot.fn;\n    }\n  }\n\n  return slots;\n} // Core API ------------------------------------------------------------------\n\n\nconst version = \"3.0.0-rc.5\";\n/**\r\n * SSR utils for \\@vue/server-renderer. Only exposed in cjs builds.\r\n * @internal\r\n */\n\nconst ssrUtils = null;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"../../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:////Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js?");

/***/ }),

/***/ "../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js":
/*!*******************************************************************************************************************************!*\
  !*** /Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js ***!
  \*******************************************************************************************************************************/
/*! exports provided: customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, camelize, capitalize, toDisplayString, BaseTransition, Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, inject, isVNode, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useSSRContext, useTransitionState, version, warn, watch, watchEffect, withCtx, withDirectives, withScopeId, Transition, TransitionGroup, createApp, createSSRApp, hydrate, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers */
/*! exports used: computed, createBlock, createSSRApp, createTextVNode, createVNode, defineComponent, getCurrentInstance, h, inject, nextTick, openBlock, popScopeId, provide, pushScopeId, reactive, ref, resolveComponent, setDevtoolsHook, shallowRef, toDisplayString, unref, warn, withScopeId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export Transition */\n/* unused harmony export TransitionGroup */\n/* unused harmony export createApp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return createSSRApp; });\n/* unused harmony export hydrate */\n/* unused harmony export render */\n/* unused harmony export useCssModule */\n/* unused harmony export useCssVars */\n/* unused harmony export vModelCheckbox */\n/* unused harmony export vModelDynamic */\n/* unused harmony export vModelRadio */\n/* unused harmony export vModelSelect */\n/* unused harmony export vModelText */\n/* unused harmony export vShow */\n/* unused harmony export withKeys */\n/* unused harmony export withModifiers */\n/* harmony import */ var _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/runtime-core */ \"../../node_modules/@vue/runtime-core/dist/runtime-core.esm-bundler.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"e\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"f\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"i\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"j\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"k\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"l\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"n\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"o\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"p\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"s\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"t\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"u\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"v\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"w\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"x\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"y\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"A\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"C\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"D\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"E\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"G\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[\"I\"]; });\n\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ \"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n\n\n\nconst svgNS = 'http://www.w3.org/2000/svg';\nconst doc = typeof document !== 'undefined' ? document : null;\nlet tempContainer;\nlet tempSVGContainer;\nconst nodeOps = {\n  insert: (child, parent, anchor) => {\n    parent.insertBefore(child, anchor || null);\n  },\n  remove: child => {\n    const parent = child.parentNode;\n\n    if (parent) {\n      parent.removeChild(child);\n    }\n  },\n  createElement: (tag, isSVG, is) => isSVG ? doc.createElementNS(svgNS, tag) : doc.createElement(tag, is ? {\n    is\n  } : undefined),\n  createText: text => doc.createTextNode(text),\n  createComment: text => doc.createComment(text),\n  setText: (node, text) => {\n    node.nodeValue = text;\n  },\n  setElementText: (el, text) => {\n    el.textContent = text;\n  },\n  parentNode: node => node.parentNode,\n  nextSibling: node => node.nextSibling,\n  querySelector: selector => doc.querySelector(selector),\n\n  setScopeId(el, id) {\n    el.setAttribute(id, '');\n  },\n\n  cloneNode(el) {\n    return el.cloneNode(true);\n  },\n\n  // __UNSAFE__\n  // Reason: innerHTML.\n  // Static content here can only come from compiled templates.\n  // As long as the user only uses trusted templates, this is safe.\n  insertStaticContent(content, parent, anchor, isSVG) {\n    const temp = isSVG ? tempSVGContainer || (tempSVGContainer = doc.createElementNS(svgNS, 'svg')) : tempContainer || (tempContainer = doc.createElement('div'));\n    temp.innerHTML = content;\n    const first = temp.firstChild;\n    let node = first;\n    let last = node;\n\n    while (node) {\n      last = node;\n      nodeOps.insert(node, parent, anchor);\n      node = temp.firstChild;\n    }\n\n    return [first, last];\n  }\n\n}; // compiler should normalize class + :class bindings on the same element\n// into a single binding ['staticClass', dynamic]\n\nfunction patchClass(el, value, isSVG) {\n  if (value == null) {\n    value = '';\n  }\n\n  if (isSVG) {\n    el.setAttribute('class', value);\n  } else {\n    // directly setting className should be faster than setAttribute in theory\n    // if this is an element during a transition, take the temporary transition\n    // classes into account.\n    const transitionClasses = el._vtc;\n\n    if (transitionClasses) {\n      value = (value ? [value, ...transitionClasses] : [...transitionClasses]).join(' ');\n    }\n\n    el.className = value;\n  }\n}\n\nfunction patchStyle(el, prev, next) {\n  const style = el.style;\n\n  if (!next) {\n    el.removeAttribute('style');\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(next)) {\n    if (prev !== next) {\n      style.cssText = next;\n    }\n  } else {\n    for (const key in next) {\n      setStyle(style, key, next[key]);\n    }\n\n    if (prev && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(prev)) {\n      for (const key in prev) {\n        if (next[key] == null) {\n          setStyle(style, key, '');\n        }\n      }\n    }\n  }\n}\n\nconst importantRE = /\\s*!important$/;\n\nfunction setStyle(style, name, val) {\n  if (name.startsWith('--')) {\n    // custom property definition\n    style.setProperty(name, val);\n  } else {\n    const prefixed = autoPrefix(style, name);\n\n    if (importantRE.test(val)) {\n      // !important\n      style.setProperty(Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hyphenate */ \"l\"])(prefixed), val.replace(importantRE, ''), 'important');\n    } else {\n      style[prefixed] = val;\n    }\n  }\n}\n\nconst prefixes = ['Webkit', 'Moz', 'ms'];\nconst prefixCache = {};\n\nfunction autoPrefix(style, rawName) {\n  const cached = prefixCache[rawName];\n\n  if (cached) {\n    return cached;\n  }\n\n  let name = Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* camelize */ \"d\"])(rawName);\n\n  if (name !== 'filter' && name in style) {\n    return prefixCache[rawName] = name;\n  }\n\n  name = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* capitalize */ \"f\"])(name);\n\n  for (let i = 0; i < prefixes.length; i++) {\n    const prefixed = prefixes[i] + name;\n\n    if (prefixed in style) {\n      return prefixCache[rawName] = prefixed;\n    }\n  }\n\n  return rawName;\n}\n\nconst xlinkNS = 'http://www.w3.org/1999/xlink';\n\nfunction patchAttr(el, key, value, isSVG) {\n  if (isSVG && key.startsWith('xlink:')) {\n    if (value == null) {\n      el.removeAttributeNS(xlinkNS, key.slice(6, key.length));\n    } else {\n      el.setAttributeNS(xlinkNS, key, value);\n    }\n  } else {\n    // note we are only checking boolean attributes that don't have a\n    // corresponding dom prop of the same name here.\n    const isBoolean = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isSpecialBooleanAttr */ \"x\"])(key);\n\n    if (value == null || isBoolean && value === false) {\n      el.removeAttribute(key);\n    } else {\n      el.setAttribute(key, isBoolean ? '' : value);\n    }\n  }\n} // __UNSAFE__\n// functions. The user is responsible for using them with only trusted content.\n\n\nfunction patchDOMProp(el, key, value, // the following args are passed only due to potential innerHTML/textContent\n// overriding existing VNodes, in which case the old tree must be properly\n// unmounted.\nprevChildren, parentComponent, parentSuspense, unmountChildren) {\n  if (key === 'innerHTML' || key === 'textContent') {\n    if (prevChildren) {\n      unmountChildren(prevChildren, parentComponent, parentSuspense);\n    }\n\n    el[key] = value == null ? '' : value;\n    return;\n  }\n\n  if (key === 'value' && el.tagName !== 'PROGRESS') {\n    // store value as _value as well since\n    // non-string values will be stringified.\n    el._value = value;\n    el.value = value == null ? '' : value;\n    return;\n  }\n\n  if (value === '' && typeof el[key] === 'boolean') {\n    // e.g. <select multiple> compiles to { multiple: '' }\n    el[key] = true;\n  } else if (value == null && typeof el[key] === 'string') {\n    // e.g. <div :id=\"null\">\n    el[key] = '';\n    el.removeAttribute(key);\n  } else {\n    // some properties perform value validation and throw\n    try {\n      el[key] = value;\n    } catch (e) {\n      if (true) {\n        Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`Failed setting prop \"${key}\" on <${el.tagName.toLowerCase()}>: ` + `value ${value} is invalid.`, e);\n      }\n    }\n  }\n} // Async edge case fix requires storing an event listener's attach timestamp.\n\n\nlet _getNow = Date.now; // Determine what event timestamp the browser is using. Annoyingly, the\n// timestamp can either be hi-res (relative to page load) or low-res\n// (relative to UNIX epoch), so in order to compare time we have to use the\n// same timestamp type when saving the flush timestamp.\n\nif (typeof document !== 'undefined' && _getNow() > document.createEvent('Event').timeStamp) {\n  // if the low-res timestamp which is bigger than the event timestamp\n  // (which is evaluated AFTER) it means the event is using a hi-res timestamp,\n  // and we need to use the hi-res version for event listeners as well.\n  _getNow = () => performance.now();\n} // To avoid the overhead of repeatedly calling performance.now(), we cache\n// and use the same timestamp for all event listeners attached in the same tick.\n\n\nlet cachedNow = 0;\nconst p = Promise.resolve();\n\nconst reset = () => {\n  cachedNow = 0;\n};\n\nconst getNow = () => cachedNow || (p.then(reset), cachedNow = _getNow());\n\nfunction addEventListener(el, event, handler, options) {\n  el.addEventListener(event, handler, options);\n}\n\nfunction removeEventListener(el, event, handler, options) {\n  el.removeEventListener(event, handler, options);\n}\n\nfunction patchEvent(el, rawName, prevValue, nextValue, instance = null) {\n  const invoker = prevValue && prevValue.invoker;\n\n  if (nextValue && invoker) {\n    prevValue.invoker = null;\n    invoker.value = nextValue;\n    nextValue.invoker = invoker;\n  } else {\n    const [name, options] = parseName(rawName);\n\n    if (nextValue) {\n      addEventListener(el, name, createInvoker(nextValue, instance), options);\n    } else if (invoker) {\n      // remove\n      removeEventListener(el, name, invoker, options);\n    }\n  }\n}\n\nconst optionsModifierRE = /(?:Once|Passive|Capture)$/;\n\nfunction parseName(name) {\n  let options;\n\n  if (optionsModifierRE.test(name)) {\n    options = {};\n    let m;\n\n    while (m = name.match(optionsModifierRE)) {\n      name = name.slice(0, name.length - m[0].length);\n      options[m[0].toLowerCase()] = true;\n    }\n  }\n\n  return [name.slice(2).toLowerCase(), options];\n}\n\nfunction createInvoker(initialValue, instance) {\n  const invoker = e => {\n    // async edge case #6566: inner click event triggers patch, event handler\n    // attached to outer element during patch, and triggered again. This\n    // happens because browsers fire microtask ticks between event propagation.\n    // the solution is simple: we save the timestamp when a handler is attached,\n    // and the handler would only fire if the event passed to it was fired\n    // AFTER it was attached.\n    const timeStamp = e.timeStamp || _getNow();\n\n    if (timeStamp >= invoker.attached - 1) {\n      Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* callWithAsyncErrorHandling */ \"c\"])(patchStopImmediatePropagation(e, invoker.value), instance, 5\n      /* NATIVE_EVENT_HANDLER */\n      , [e]);\n    }\n  };\n\n  invoker.value = initialValue;\n  initialValue.invoker = invoker;\n  invoker.attached = getNow();\n  return invoker;\n}\n\nfunction patchStopImmediatePropagation(e, value) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(value)) {\n    const originalStop = e.stopImmediatePropagation;\n\n    e.stopImmediatePropagation = () => {\n      originalStop.call(e);\n      e._stopped = true;\n    };\n\n    return value.map(fn => e => !e._stopped && fn(e));\n  } else {\n    return value;\n  }\n}\n\nconst nativeOnRE = /^on[a-z]/;\n\nconst forcePatchProp = (_, key) => key === 'value';\n\nconst patchProp = (el, key, prevValue, nextValue, isSVG = false, prevChildren, parentComponent, parentSuspense, unmountChildren) => {\n  switch (key) {\n    // special\n    case 'class':\n      patchClass(el, nextValue, isSVG);\n      break;\n\n    case 'style':\n      patchStyle(el, prevValue, nextValue);\n      break;\n\n    default:\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isOn */ \"t\"])(key)) {\n        // ignore v-model listeners\n        if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isModelListener */ \"r\"])(key)) {\n          patchEvent(el, key, prevValue, nextValue, parentComponent);\n        }\n      } else if (shouldSetAsProp(el, key, nextValue, isSVG)) {\n        patchDOMProp(el, key, nextValue, prevChildren, parentComponent, parentSuspense, unmountChildren);\n      } else {\n        // special case for <input v-model type=\"checkbox\"> with\n        // :true-value & :false-value\n        // store value as dom properties since non-string values will be\n        // stringified.\n        if (key === 'true-value') {\n          el._trueValue = nextValue;\n        } else if (key === 'false-value') {\n          el._falseValue = nextValue;\n        }\n\n        patchAttr(el, key, nextValue, isSVG);\n      }\n\n      break;\n  }\n};\n\nfunction shouldSetAsProp(el, key, value, isSVG) {\n  if (isSVG) {\n    // most keys must be set as attribute on svg elements to work\n    // ...except innerHTML\n    if (key === 'innerHTML') {\n      return true;\n    } // or native onclick with function values\n\n\n    if (key in el && nativeOnRE.test(key) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(value)) {\n      return true;\n    }\n\n    return false;\n  } // spellcheck and draggable are numerated attrs, however their\n  // corresponding DOM properties are actually booleans - this leads to\n  // setting it with a string \"false\" value leading it to be coerced to\n  // `true`, so we need to always treat them as attributes.\n  // Note that `contentEditable` doesn't have this problem: its DOM\n  // property is also enumerated string values.\n\n\n  if (key === 'spellcheck' || key === 'draggable') {\n    return false;\n  } // #1526 <input list> must be set as attribute\n\n\n  if (key === 'list' && el.tagName === 'INPUT') {\n    return false;\n  } // native onclick with string value, must be set as attribute\n\n\n  if (nativeOnRE.test(key) && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(value)) {\n    return false;\n  }\n\n  return key in el;\n}\n\nfunction useCssModule(name = '$style') {\n  /* istanbul ignore else */\n  {\n    const instance = Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* getCurrentInstance */ \"l\"])();\n\n    if (!instance) {\n       true && Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`useCssModule must be called inside setup()`);\n      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n    }\n\n    const modules = instance.type.__cssModules;\n\n    if (!modules) {\n       true && Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`Current instance does not have CSS modules injected.`);\n      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n    }\n\n    const mod = modules[name];\n\n    if (!mod) {\n       true && Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`Current instance does not have CSS module named \"${name}\".`);\n      return _vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* EMPTY_OBJ */ \"b\"];\n    }\n\n    return mod;\n  }\n}\n\nfunction useCssVars(getter, scoped = false) {\n  const instance = Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* getCurrentInstance */ \"l\"])();\n  /* istanbul ignore next */\n\n  if (!instance) {\n     true && Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`useCssVars is called without current active component instance.`);\n    return;\n  }\n\n  const prefix = scoped && instance.type.__scopeId ? `${instance.type.__scopeId.replace(/^data-v-/, '')}-` : ``;\n  Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* onMounted */ \"q\"])(() => {\n    Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* watchEffect */ \"H\"])(() => {\n      setVarsOnVNode(instance.subTree, getter(instance.proxy), prefix);\n    });\n  });\n}\n\nfunction setVarsOnVNode(vnode, vars, prefix) {\n  if (vnode.shapeFlag & 128\n  /* SUSPENSE */\n  ) {\n      const {\n        isResolved,\n        isHydrating,\n        fallbackTree,\n        subTree\n      } = vnode.suspense;\n\n      if (isResolved || isHydrating) {\n        vnode = subTree;\n      } else {\n        vnode.suspense.effects.push(() => {\n          setVarsOnVNode(subTree, vars, prefix);\n        });\n        vnode = fallbackTree;\n      }\n    } // drill down HOCs until it's a non-component vnode\n\n\n  while (vnode.component) {\n    vnode = vnode.component.subTree;\n  }\n\n  if (vnode.shapeFlag & 1\n  /* ELEMENT */\n  && vnode.el) {\n    const style = vnode.el.style;\n\n    for (const key in vars) {\n      style.setProperty(`--${prefix}${key}`, Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* unref */ \"E\"])(vars[key]));\n    }\n  } else if (vnode.type === _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* Fragment */ \"b\"]) {\n    vnode.children.forEach(c => setVarsOnVNode(c, vars, prefix));\n  }\n}\n\nconst TRANSITION = 'transition';\nconst ANIMATION = 'animation'; // DOM Transition is a higher-order-component based on the platform-agnostic\n// base Transition component, with DOM-specific logic.\n\nconst Transition = (props, {\n  slots\n}) => Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* h */ \"n\"])(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* BaseTransition */ \"a\"], resolveTransitionProps(props), slots);\n\nTransition.displayName = 'Transition';\nconst DOMTransitionPropsValidators = {\n  name: String,\n  type: String,\n  css: {\n    type: Boolean,\n    default: true\n  },\n  duration: [String, Number, Object],\n  enterFromClass: String,\n  enterActiveClass: String,\n  enterToClass: String,\n  appearFromClass: String,\n  appearActiveClass: String,\n  appearToClass: String,\n  leaveFromClass: String,\n  leaveActiveClass: String,\n  leaveToClass: String\n};\nconst TransitionPropsValidators = Transition.props = /*#__PURE__*/Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* BaseTransition */ \"a\"].props, DOMTransitionPropsValidators);\n\nfunction resolveTransitionProps(rawProps) {\n  let {\n    name = 'v',\n    type,\n    css = true,\n    duration,\n    enterFromClass = `${name}-enter-from`,\n    enterActiveClass = `${name}-enter-active`,\n    enterToClass = `${name}-enter-to`,\n    appearFromClass = enterFromClass,\n    appearActiveClass = enterActiveClass,\n    appearToClass = enterToClass,\n    leaveFromClass = `${name}-leave-from`,\n    leaveActiveClass = `${name}-leave-active`,\n    leaveToClass = `${name}-leave-to`\n  } = rawProps;\n  const baseProps = {};\n\n  for (const key in rawProps) {\n    if (!(key in DOMTransitionPropsValidators)) {\n      baseProps[key] = rawProps[key];\n    }\n  }\n\n  if (!css) {\n    return baseProps;\n  }\n\n  const durations = normalizeDuration(duration);\n  const enterDuration = durations && durations[0];\n  const leaveDuration = durations && durations[1];\n  const {\n    onBeforeEnter,\n    onEnter,\n    onEnterCancelled,\n    onLeave,\n    onLeaveCancelled,\n    onBeforeAppear = onBeforeEnter,\n    onAppear = onEnter,\n    onAppearCancelled = onEnterCancelled\n  } = baseProps;\n\n  const finishEnter = (el, isAppear, done) => {\n    removeTransitionClass(el, isAppear ? appearToClass : enterToClass);\n    removeTransitionClass(el, isAppear ? appearActiveClass : enterActiveClass);\n    done && done();\n  };\n\n  const finishLeave = (el, done) => {\n    removeTransitionClass(el, leaveToClass);\n    removeTransitionClass(el, leaveActiveClass);\n    done && done();\n  };\n\n  const makeEnterHook = isAppear => {\n    return (el, done) => {\n      const hook = isAppear ? onAppear : onEnter;\n\n      const resolve = () => finishEnter(el, isAppear, done);\n\n      hook && hook(el, resolve);\n      nextFrame(() => {\n        removeTransitionClass(el, isAppear ? appearFromClass : enterFromClass);\n        addTransitionClass(el, isAppear ? appearToClass : enterToClass);\n\n        if (!(hook && hook.length > 1)) {\n          if (enterDuration) {\n            setTimeout(resolve, enterDuration);\n          } else {\n            whenTransitionEnds(el, type, resolve);\n          }\n        }\n      });\n    };\n  };\n\n  return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])(baseProps, {\n    onBeforeEnter(el) {\n      onBeforeEnter && onBeforeEnter(el);\n      addTransitionClass(el, enterActiveClass);\n      addTransitionClass(el, enterFromClass);\n    },\n\n    onBeforeAppear(el) {\n      onBeforeAppear && onBeforeAppear(el);\n      addTransitionClass(el, appearActiveClass);\n      addTransitionClass(el, appearFromClass);\n    },\n\n    onEnter: makeEnterHook(false),\n    onAppear: makeEnterHook(true),\n\n    onLeave(el, done) {\n      const resolve = () => finishLeave(el, done);\n\n      addTransitionClass(el, leaveActiveClass);\n      addTransitionClass(el, leaveFromClass);\n      nextFrame(() => {\n        removeTransitionClass(el, leaveFromClass);\n        addTransitionClass(el, leaveToClass);\n\n        if (!(onLeave && onLeave.length > 1)) {\n          if (leaveDuration) {\n            setTimeout(resolve, leaveDuration);\n          } else {\n            whenTransitionEnds(el, type, resolve);\n          }\n        }\n      });\n      onLeave && onLeave(el, resolve);\n    },\n\n    onEnterCancelled(el) {\n      finishEnter(el, false);\n      onEnterCancelled && onEnterCancelled(el);\n    },\n\n    onAppearCancelled(el) {\n      finishEnter(el, true);\n      onAppearCancelled && onAppearCancelled(el);\n    },\n\n    onLeaveCancelled(el) {\n      finishLeave(el);\n      onLeaveCancelled && onLeaveCancelled(el);\n    }\n\n  });\n}\n\nfunction normalizeDuration(duration) {\n  if (duration == null) {\n    return null;\n  } else if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isObject */ \"s\"])(duration)) {\n    return [NumberOf(duration.enter), NumberOf(duration.leave)];\n  } else {\n    const n = NumberOf(duration);\n    return [n, n];\n  }\n}\n\nfunction NumberOf(val) {\n  const res = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* toNumber */ \"H\"])(val);\n  if (true) validateDuration(res);\n  return res;\n}\n\nfunction validateDuration(val) {\n  if (typeof val !== 'number') {\n    Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`<transition> explicit duration is not a valid number - ` + `got ${JSON.stringify(val)}.`);\n  } else if (isNaN(val)) {\n    Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`<transition> explicit duration is NaN - ` + 'the duration expression might be incorrect.');\n  }\n}\n\nfunction addTransitionClass(el, cls) {\n  cls.split(/\\s+/).forEach(c => c && el.classList.add(c));\n  (el._vtc || (el._vtc = new Set())).add(cls);\n}\n\nfunction removeTransitionClass(el, cls) {\n  cls.split(/\\s+/).forEach(c => c && el.classList.remove(c));\n  const {\n    _vtc\n  } = el;\n\n  if (_vtc) {\n    _vtc.delete(cls);\n\n    if (!_vtc.size) {\n      el._vtc = undefined;\n    }\n  }\n}\n\nfunction nextFrame(cb) {\n  requestAnimationFrame(() => {\n    requestAnimationFrame(cb);\n  });\n}\n\nfunction whenTransitionEnds(el, expectedType, cb) {\n  const {\n    type,\n    timeout,\n    propCount\n  } = getTransitionInfo(el, expectedType);\n\n  if (!type) {\n    return cb();\n  }\n\n  const endEvent = type + 'end';\n  let ended = 0;\n\n  const end = () => {\n    el.removeEventListener(endEvent, onEnd);\n    cb();\n  };\n\n  const onEnd = e => {\n    if (e.target === el) {\n      if (++ended >= propCount) {\n        end();\n      }\n    }\n  };\n\n  setTimeout(() => {\n    if (ended < propCount) {\n      end();\n    }\n  }, timeout + 1);\n  el.addEventListener(endEvent, onEnd);\n}\n\nfunction getTransitionInfo(el, expectedType) {\n  const styles = window.getComputedStyle(el); // JSDOM may return undefined for transition properties\n\n  const getStyleProperties = key => (styles[key] || '').split(', ');\n\n  const transitionDelays = getStyleProperties(TRANSITION + 'Delay');\n  const transitionDurations = getStyleProperties(TRANSITION + 'Duration');\n  const transitionTimeout = getTimeout(transitionDelays, transitionDurations);\n  const animationDelays = getStyleProperties(ANIMATION + 'Delay');\n  const animationDurations = getStyleProperties(ANIMATION + 'Duration');\n  const animationTimeout = getTimeout(animationDelays, animationDurations);\n  let type = null;\n  let timeout = 0;\n  let propCount = 0;\n  /* istanbul ignore if */\n\n  if (expectedType === TRANSITION) {\n    if (transitionTimeout > 0) {\n      type = TRANSITION;\n      timeout = transitionTimeout;\n      propCount = transitionDurations.length;\n    }\n  } else if (expectedType === ANIMATION) {\n    if (animationTimeout > 0) {\n      type = ANIMATION;\n      timeout = animationTimeout;\n      propCount = animationDurations.length;\n    }\n  } else {\n    timeout = Math.max(transitionTimeout, animationTimeout);\n    type = timeout > 0 ? transitionTimeout > animationTimeout ? TRANSITION : ANIMATION : null;\n    propCount = type ? type === TRANSITION ? transitionDurations.length : animationDurations.length : 0;\n  }\n\n  const hasTransform = type === TRANSITION && /\\b(transform|all)(,|$)/.test(styles[TRANSITION + 'Property']);\n  return {\n    type,\n    timeout,\n    propCount,\n    hasTransform\n  };\n}\n\nfunction getTimeout(delays, durations) {\n  while (delays.length < durations.length) {\n    delays = delays.concat(delays);\n  }\n\n  return Math.max(...durations.map((d, i) => toMs(d) + toMs(delays[i])));\n} // Old versions of Chromium (below 61.0.3163.100) formats floating pointer\n// numbers in a locale-dependent way, using a comma instead of a dot.\n// If comma is not replaced with a dot, the input will be rounded down\n// (i.e. acting as a floor function) causing unexpected behaviors\n\n\nfunction toMs(s) {\n  return Number(s.slice(0, -1).replace(',', '.')) * 1000;\n}\n\nfunction toRaw(observed) {\n  return observed && toRaw(observed[\"__v_raw\"\n  /* RAW */\n  ]) || observed;\n}\n\nconst positionMap = new WeakMap();\nconst newPositionMap = new WeakMap();\nconst TransitionGroupImpl = {\n  name: 'TransitionGroup',\n  props: /*#__PURE__*/Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({}, TransitionPropsValidators, {\n    tag: String,\n    moveClass: String\n  }),\n\n  setup(props, {\n    slots\n  }) {\n    const instance = Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* getCurrentInstance */ \"l\"])();\n    const state = Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* useTransitionState */ \"F\"])();\n    let prevChildren;\n    let children;\n    Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* onUpdated */ \"r\"])(() => {\n      // children is guaranteed to exist after initial render\n      if (!prevChildren.length) {\n        return;\n      }\n\n      const moveClass = props.moveClass || `${props.name || 'v'}-move`;\n\n      if (!hasCSSTransform(prevChildren[0].el, instance.vnode.el, moveClass)) {\n        return;\n      } // we divide the work into three loops to avoid mixing DOM reads and writes\n      // in each iteration - which helps prevent layout thrashing.\n\n\n      prevChildren.forEach(callPendingCbs);\n      prevChildren.forEach(recordPosition);\n      const movedChildren = prevChildren.filter(applyTranslation); // force reflow to put everything in position\n\n      forceReflow();\n      movedChildren.forEach(c => {\n        const el = c.el;\n        const style = el.style;\n        addTransitionClass(el, moveClass);\n        style.transform = style.webkitTransform = style.transitionDuration = '';\n\n        const cb = el._moveCb = e => {\n          if (e && e.target !== el) {\n            return;\n          }\n\n          if (!e || /transform$/.test(e.propertyName)) {\n            el.removeEventListener('transitionend', cb);\n            el._moveCb = null;\n            removeTransitionClass(el, moveClass);\n          }\n        };\n\n        el.addEventListener('transitionend', cb);\n      });\n    });\n    return () => {\n      const rawProps = toRaw(props);\n      const cssTransitionProps = resolveTransitionProps(rawProps);\n      const tag = rawProps.tag || _vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* Fragment */ \"b\"];\n      prevChildren = children;\n      children = slots.default ? Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* getTransitionRawChildren */ \"m\"])(slots.default()) : [];\n\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n\n        if (child.key != null) {\n          Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* setTransitionHooks */ \"B\"])(child, Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* resolveTransitionHooks */ \"z\"])(child, cssTransitionProps, state, instance));\n        } else if (true) {\n          Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`<TransitionGroup> children must be keyed.`);\n        }\n      }\n\n      if (prevChildren) {\n        for (let i = 0; i < prevChildren.length; i++) {\n          const child = prevChildren[i];\n          Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* setTransitionHooks */ \"B\"])(child, Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* resolveTransitionHooks */ \"z\"])(child, cssTransitionProps, state, instance));\n          positionMap.set(child, child.el.getBoundingClientRect());\n        }\n      }\n\n      return Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* createVNode */ \"j\"])(tag, null, children);\n    };\n  }\n\n};\nconst TransitionGroup = TransitionGroupImpl;\n\nfunction callPendingCbs(c) {\n  const el = c.el;\n\n  if (el._moveCb) {\n    el._moveCb();\n  }\n\n  if (el._enterCb) {\n    el._enterCb();\n  }\n}\n\nfunction recordPosition(c) {\n  newPositionMap.set(c, c.el.getBoundingClientRect());\n}\n\nfunction applyTranslation(c) {\n  const oldPos = positionMap.get(c);\n  const newPos = newPositionMap.get(c);\n  const dx = oldPos.left - newPos.left;\n  const dy = oldPos.top - newPos.top;\n\n  if (dx || dy) {\n    const s = c.el.style;\n    s.transform = s.webkitTransform = `translate(${dx}px,${dy}px)`;\n    s.transitionDuration = '0s';\n    return c;\n  }\n} // this is put in a dedicated function to avoid the line from being treeshaken\n\n\nfunction forceReflow() {\n  return document.body.offsetHeight;\n}\n\nfunction hasCSSTransform(el, root, moveClass) {\n  // Detect whether an element with the move class applied has\n  // CSS transitions. Since the element may be inside an entering\n  // transition at this very moment, we make a clone of it and remove\n  // all other transition classes applied to ensure only the move class\n  // is applied.\n  const clone = el.cloneNode();\n\n  if (el._vtc) {\n    el._vtc.forEach(cls => {\n      cls.split(/\\s+/).forEach(c => c && clone.classList.remove(c));\n    });\n  }\n\n  moveClass.split(/\\s+/).forEach(c => c && clone.classList.add(c));\n  clone.style.display = 'none';\n  const container = root.nodeType === 1 ? root : root.parentNode;\n  container.appendChild(clone);\n  const {\n    hasTransform\n  } = getTransitionInfo(clone);\n  container.removeChild(clone);\n  return hasTransform;\n}\n\nconst getModelAssigner = vnode => {\n  const fn = vnode.props['onUpdate:modelValue'];\n  return Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(fn) ? value => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* invokeArrayFns */ \"m\"])(fn, value) : fn;\n};\n\nfunction onCompositionStart(e) {\n  e.target.composing = true;\n}\n\nfunction onCompositionEnd(e) {\n  const target = e.target;\n\n  if (target.composing) {\n    target.composing = false;\n    trigger(target, 'input');\n  }\n}\n\nfunction trigger(el, type) {\n  const e = document.createEvent('HTMLEvents');\n  e.initEvent(type, true, true);\n  el.dispatchEvent(e);\n} // We are exporting the v-model runtime directly as vnode hooks so that it can\n// be tree-shaken in case v-model is never used.\n\n\nconst vModelText = {\n  beforeMount(el, {\n    value,\n    modifiers: {\n      lazy,\n      trim,\n      number\n    }\n  }, vnode) {\n    el.value = value == null ? '' : value;\n    el._assign = getModelAssigner(vnode);\n    const castToNumber = number || el.type === 'number';\n    addEventListener(el, lazy ? 'change' : 'input', e => {\n      if (e.target.composing) return;\n      let domValue = el.value;\n\n      if (trim) {\n        domValue = domValue.trim();\n      } else if (castToNumber) {\n        domValue = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* toNumber */ \"H\"])(domValue);\n      }\n\n      el._assign(domValue);\n    });\n\n    if (trim) {\n      addEventListener(el, 'change', () => {\n        el.value = el.value.trim();\n      });\n    }\n\n    if (!lazy) {\n      addEventListener(el, 'compositionstart', onCompositionStart);\n      addEventListener(el, 'compositionend', onCompositionEnd); // Safari < 10.2 & UIWebView doesn't fire compositionend when\n      // switching focus before confirming composition choice\n      // this also fixes the issue where some browsers e.g. iOS Chrome\n      // fires \"change\" instead of \"input\" on autocomplete.\n\n      addEventListener(el, 'change', onCompositionEnd);\n    }\n  },\n\n  beforeUpdate(el, {\n    value,\n    modifiers: {\n      trim,\n      number\n    }\n  }, vnode) {\n    el._assign = getModelAssigner(vnode);\n\n    if (document.activeElement === el) {\n      if (trim && el.value.trim() === value) {\n        return;\n      }\n\n      if ((number || el.type === 'number') && Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* toNumber */ \"H\"])(el.value) === value) {\n        return;\n      }\n    }\n\n    el.value = value == null ? '' : value;\n  }\n\n};\nconst vModelCheckbox = {\n  beforeMount(el, binding, vnode) {\n    setChecked(el, binding, vnode);\n    el._assign = getModelAssigner(vnode);\n    addEventListener(el, 'change', () => {\n      const modelValue = el._modelValue;\n      const elementValue = getValue(el);\n      const checked = el.checked;\n      const assign = el._assign;\n\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(modelValue)) {\n        const index = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseIndexOf */ \"B\"])(modelValue, elementValue);\n        const found = index !== -1;\n\n        if (checked && !found) {\n          assign(modelValue.concat(elementValue));\n        } else if (!checked && found) {\n          const filtered = [...modelValue];\n          filtered.splice(index, 1);\n          assign(filtered);\n        }\n      } else {\n        assign(getCheckboxValue(el, checked));\n      }\n    });\n  },\n\n  beforeUpdate(el, binding, vnode) {\n    el._assign = getModelAssigner(vnode);\n    setChecked(el, binding, vnode);\n  }\n\n};\n\nfunction setChecked(el, {\n  value,\n  oldValue\n}, vnode) {\n  el._modelValue = value;\n\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(value)) {\n    el.checked = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseIndexOf */ \"B\"])(value, vnode.props.value) > -1;\n  } else if (value !== oldValue) {\n    el.checked = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseEqual */ \"A\"])(value, getCheckboxValue(el, true));\n  }\n}\n\nconst vModelRadio = {\n  beforeMount(el, {\n    value\n  }, vnode) {\n    el.checked = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseEqual */ \"A\"])(value, vnode.props.value);\n    el._assign = getModelAssigner(vnode);\n    addEventListener(el, 'change', () => {\n      el._assign(getValue(el));\n    });\n  },\n\n  beforeUpdate(el, {\n    value,\n    oldValue\n  }, vnode) {\n    el._assign = getModelAssigner(vnode);\n\n    if (value !== oldValue) {\n      el.checked = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseEqual */ \"A\"])(value, vnode.props.value);\n    }\n  }\n\n};\nconst vModelSelect = {\n  // use mounted & updated because <select> relies on its children <option>s.\n  mounted(el, {\n    value\n  }, vnode) {\n    setSelected(el, value);\n    el._assign = getModelAssigner(vnode);\n    addEventListener(el, 'change', () => {\n      const selectedVal = Array.prototype.filter.call(el.options, o => o.selected).map(getValue);\n\n      el._assign(el.multiple ? selectedVal : selectedVal[0]);\n    });\n  },\n\n  beforeUpdate(el, _binding, vnode) {\n    el._assign = getModelAssigner(vnode);\n  },\n\n  updated(el, {\n    value\n  }) {\n    setSelected(el, value);\n  }\n\n};\n\nfunction setSelected(el, value) {\n  const isMultiple = el.multiple;\n\n  if (isMultiple && !Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isArray */ \"n\"])(value)) {\n     true && Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`<select multiple v-model> expects an Array value for its binding, ` + `but got ${Object.prototype.toString.call(value).slice(8, -1)}.`);\n    return;\n  }\n\n  for (let i = 0, l = el.options.length; i < l; i++) {\n    const option = el.options[i];\n    const optionValue = getValue(option);\n\n    if (isMultiple) {\n      option.selected = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseIndexOf */ \"B\"])(value, optionValue) > -1;\n    } else {\n      if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* looseEqual */ \"A\"])(getValue(option), value)) {\n        el.selectedIndex = i;\n        return;\n      }\n    }\n  }\n\n  if (!isMultiple) {\n    el.selectedIndex = -1;\n  }\n} // retrieve raw value set via :value bindings\n\n\nfunction getValue(el) {\n  return '_value' in el ? el._value : el.value;\n} // retrieve raw value for true-value and false-value set via :true-value or :false-value bindings\n\n\nfunction getCheckboxValue(el, checked) {\n  const key = checked ? '_trueValue' : '_falseValue';\n  return key in el ? el[key] : checked;\n}\n\nconst vModelDynamic = {\n  beforeMount(el, binding, vnode) {\n    callModelHook(el, binding, vnode, null, 'beforeMount');\n  },\n\n  mounted(el, binding, vnode) {\n    callModelHook(el, binding, vnode, null, 'mounted');\n  },\n\n  beforeUpdate(el, binding, vnode, prevVNode) {\n    callModelHook(el, binding, vnode, prevVNode, 'beforeUpdate');\n  },\n\n  updated(el, binding, vnode, prevVNode) {\n    callModelHook(el, binding, vnode, prevVNode, 'updated');\n  }\n\n};\n\nfunction callModelHook(el, binding, vnode, prevVNode, hook) {\n  let modelToUse;\n\n  switch (el.tagName) {\n    case 'SELECT':\n      modelToUse = vModelSelect;\n      break;\n\n    case 'TEXTAREA':\n      modelToUse = vModelText;\n      break;\n\n    default:\n      switch (el.type) {\n        case 'checkbox':\n          modelToUse = vModelCheckbox;\n          break;\n\n        case 'radio':\n          modelToUse = vModelRadio;\n          break;\n\n        default:\n          modelToUse = vModelText;\n      }\n\n  }\n\n  const fn = modelToUse[hook];\n  fn && fn(el, binding, vnode, prevVNode);\n}\n\nconst systemModifiers = ['ctrl', 'shift', 'alt', 'meta'];\nconst modifierGuards = {\n  stop: e => e.stopPropagation(),\n  prevent: e => e.preventDefault(),\n  self: e => e.target !== e.currentTarget,\n  ctrl: e => !e.ctrlKey,\n  shift: e => !e.shiftKey,\n  alt: e => !e.altKey,\n  meta: e => !e.metaKey,\n  left: e => 'button' in e && e.button !== 0,\n  middle: e => 'button' in e && e.button !== 1,\n  right: e => 'button' in e && e.button !== 2,\n  exact: (e, modifiers) => systemModifiers.some(m => e[`${m}Key`] && !modifiers.includes(m))\n};\n/**\r\n * @private\r\n */\n\nconst withModifiers = (fn, modifiers) => {\n  return (event, ...args) => {\n    for (let i = 0; i < modifiers.length; i++) {\n      const guard = modifierGuards[modifiers[i]];\n      if (guard && guard(event, modifiers)) return;\n    }\n\n    return fn(event, ...args);\n  };\n}; // Kept for 2.x compat.\n// Note: IE11 compat for `spacebar` and `del` is removed for now.\n\n\nconst keyNames = {\n  esc: 'escape',\n  space: ' ',\n  up: 'arrow-up',\n  left: 'arrow-left',\n  right: 'arrow-right',\n  down: 'arrow-down',\n  delete: 'backspace'\n};\n/**\r\n * @private\r\n */\n\nconst withKeys = (fn, modifiers) => {\n  return event => {\n    if (!('key' in event)) return;\n    const eventKey = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* hyphenate */ \"l\"])(event.key);\n\n    if ( // None of the provided key modifiers match the current event key\n    !modifiers.some(k => k === eventKey || keyNames[k] === eventKey)) {\n      return;\n    }\n\n    return fn(event);\n  };\n};\n\nconst vShow = {\n  beforeMount(el, {\n    value\n  }, {\n    transition\n  }) {\n    el._vod = el.style.display === 'none' ? '' : el.style.display;\n\n    if (transition && value) {\n      transition.beforeEnter(el);\n    } else {\n      setDisplay(el, value);\n    }\n  },\n\n  mounted(el, {\n    value\n  }, {\n    transition\n  }) {\n    if (transition && value) {\n      transition.enter(el);\n    }\n  },\n\n  updated(el, {\n    value,\n    oldValue\n  }, {\n    transition\n  }) {\n    if (!value === !oldValue) return;\n\n    if (transition) {\n      if (value) {\n        transition.beforeEnter(el);\n        setDisplay(el, true);\n        transition.enter(el);\n      } else {\n        transition.leave(el, () => {\n          setDisplay(el, false);\n        });\n      }\n    } else {\n      setDisplay(el, value);\n    }\n  },\n\n  beforeUnmount(el, {\n    value\n  }) {\n    setDisplay(el, value);\n  }\n\n};\n\nfunction setDisplay(el, value) {\n  el.style.display = value ? el._vod : 'none';\n}\n\nconst rendererOptions = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* extend */ \"h\"])({\n  patchProp,\n  forcePatchProp\n}, nodeOps); // lazy create the renderer - this makes core renderer logic tree-shakable\n// in case the user only imports reactivity utilities from Vue.\n\nlet renderer;\nlet enabledHydration = false;\n\nfunction ensureRenderer() {\n  return renderer || (renderer = Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* createRenderer */ \"h\"])(rendererOptions));\n}\n\nfunction ensureHydrationRenderer() {\n  renderer = enabledHydration ? renderer : Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* createHydrationRenderer */ \"g\"])(rendererOptions);\n  enabledHydration = true;\n  return renderer;\n} // use explicit type casts here to avoid import() calls in rolled-up d.ts\n\n\nconst render = (...args) => {\n  ensureRenderer().render(...args);\n};\n\nconst hydrate = (...args) => {\n  ensureHydrationRenderer().hydrate(...args);\n};\n\nconst createApp = (...args) => {\n  const app = ensureRenderer().createApp(...args);\n\n  if (true) {\n    injectNativeTagCheck(app);\n  }\n\n  const {\n    mount\n  } = app;\n\n  app.mount = containerOrSelector => {\n    const container = normalizeContainer(containerOrSelector);\n    if (!container) return;\n    const component = app._component;\n\n    if (!Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isFunction */ \"o\"])(component) && !component.render && !component.template) {\n      component.template = container.innerHTML;\n    } // clear content before mounting\n\n\n    container.innerHTML = '';\n    const proxy = mount(container);\n    container.removeAttribute('v-cloak');\n    container.setAttribute('data-v-app', '');\n    return proxy;\n  };\n\n  return app;\n};\n\nconst createSSRApp = (...args) => {\n  const app = ensureHydrationRenderer().createApp(...args);\n\n  if (true) {\n    injectNativeTagCheck(app);\n  }\n\n  const {\n    mount\n  } = app;\n\n  app.mount = containerOrSelector => {\n    const container = normalizeContainer(containerOrSelector);\n\n    if (container) {\n      return mount(container, true);\n    }\n  };\n\n  return app;\n};\n\nfunction injectNativeTagCheck(app) {\n  // Inject `isNativeTag`\n  // this is used for component name validation (dev only)\n  Object.defineProperty(app.config, 'isNativeTag', {\n    value: tag => Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isHTMLTag */ \"q\"])(tag) || Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isSVGTag */ \"w\"])(tag),\n    writable: false\n  });\n}\n\nfunction normalizeContainer(container) {\n  if (Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* isString */ \"y\"])(container)) {\n    const res = document.querySelector(container);\n\n    if ( true && !res) {\n      Object(_vue_runtime_core__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"G\"])(`Failed to mount app: mount target selector returned null.`);\n    }\n\n    return res;\n  }\n\n  return container;\n}\n\n\n\n//# sourceURL=webpack:////Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js?");

/***/ }),

/***/ "../../node_modules/@vue/shared/dist/shared.esm-bundler.js":
/*!*********************************************************************************************************************!*\
  !*** /Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/shared/dist/shared.esm-bundler.js ***!
  \*********************************************************************************************************************/
/*! exports provided: EMPTY_ARR, EMPTY_OBJ, NO, NOOP, PatchFlagNames, babelParserDefautPlugins, camelize, capitalize, def, escapeHtml, escapeHtmlComment, extend, generateCodeFrame, getGlobalThis, hasChanged, hasOwn, hyphenate, invokeArrayFns, isArray, isBooleanAttr, isDate, isFunction, isGloballyWhitelisted, isHTMLTag, isKnownAttr, isModelListener, isNoUnitNumericStyleProp, isObject, isOn, isPlainObject, isPromise, isReservedProp, isSSRSafeAttrName, isSVGTag, isSpecialBooleanAttr, isString, isSymbol, isVoidTag, looseEqual, looseIndexOf, makeMap, normalizeClass, normalizeStyle, objectToString, parseStringStyle, propsToAttrMap, remove, stringifyStyle, toDisplayString, toNumber, toRawType, toTypeString */
/*! exports used: EMPTY_ARR, EMPTY_OBJ, NO, NOOP, camelize, capitalize, def, extend, getGlobalThis, hasChanged, hasOwn, hyphenate, invokeArrayFns, isArray, isFunction, isGloballyWhitelisted, isHTMLTag, isModelListener, isObject, isOn, isPromise, isReservedProp, isSVGTag, isSpecialBooleanAttr, isString, isSymbol, looseEqual, looseIndexOf, makeMap, normalizeClass, normalizeStyle, remove, toDisplayString, toNumber, toRawType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return EMPTY_ARR; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return EMPTY_OBJ; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return NO; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return NOOP; });\n/* unused harmony export PatchFlagNames */\n/* unused harmony export babelParserDefautPlugins */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return camelize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return capitalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return def; });\n/* unused harmony export escapeHtml */\n/* unused harmony export escapeHtmlComment */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return extend; });\n/* unused harmony export generateCodeFrame */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return getGlobalThis; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return hasChanged; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return hasOwn; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return hyphenate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return invokeArrayFns; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return isArray; });\n/* unused harmony export isBooleanAttr */\n/* unused harmony export isDate */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return isFunction; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return isGloballyWhitelisted; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return isHTMLTag; });\n/* unused harmony export isKnownAttr */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return isModelListener; });\n/* unused harmony export isNoUnitNumericStyleProp */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return isObject; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return isOn; });\n/* unused harmony export isPlainObject */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return isPromise; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return isReservedProp; });\n/* unused harmony export isSSRSafeAttrName */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"w\", function() { return isSVGTag; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"x\", function() { return isSpecialBooleanAttr; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"y\", function() { return isString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"z\", function() { return isSymbol; });\n/* unused harmony export isVoidTag */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"A\", function() { return looseEqual; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"B\", function() { return looseIndexOf; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"C\", function() { return makeMap; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"D\", function() { return normalizeClass; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"E\", function() { return normalizeStyle; });\n/* unused harmony export objectToString */\n/* unused harmony export parseStringStyle */\n/* unused harmony export propsToAttrMap */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"F\", function() { return remove; });\n/* unused harmony export stringifyStyle */\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"G\", function() { return toDisplayString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"H\", function() { return toNumber; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"I\", function() { return toRawType; });\n/* unused harmony export toTypeString */\n/**\r\n * Make a map and return a function for checking if a key\r\n * is in that map.\r\n * IMPORTANT: all calls of this function must be prefixed with\r\n * \\/\\*#\\_\\_PURE\\_\\_\\*\\/\r\n * So that rollup can tree-shake them if necessary.\r\n */\nfunction makeMap(str, expectsLowerCase) {\n  const map = Object.create(null);\n  const list = str.split(',');\n\n  for (let i = 0; i < list.length; i++) {\n    map[list[i]] = true;\n  }\n\n  return expectsLowerCase ? val => !!map[val.toLowerCase()] : val => !!map[val];\n} // Patch flags are optimization hints generated by the compiler.\n// when a block with dynamicChildren is encountered during diff, the algorithm\n// enters \"optimized mode\". In this mode, we know that the vdom is produced by\n// a render function generated by the compiler, so the algorithm only needs to\n// handle updates explicitly marked by these patch flags.\n// dev only flag -> name mapping\n\n\nconst PatchFlagNames = {\n  [1\n  /* TEXT */\n  ]: `TEXT`,\n  [2\n  /* CLASS */\n  ]: `CLASS`,\n  [4\n  /* STYLE */\n  ]: `STYLE`,\n  [8\n  /* PROPS */\n  ]: `PROPS`,\n  [16\n  /* FULL_PROPS */\n  ]: `FULL_PROPS`,\n  [32\n  /* HYDRATE_EVENTS */\n  ]: `HYDRATE_EVENTS`,\n  [64\n  /* STABLE_FRAGMENT */\n  ]: `STABLE_FRAGMENT`,\n  [128\n  /* KEYED_FRAGMENT */\n  ]: `KEYED_FRAGMENT`,\n  [256\n  /* UNKEYED_FRAGMENT */\n  ]: `UNKEYED_FRAGMENT`,\n  [1024\n  /* DYNAMIC_SLOTS */\n  ]: `DYNAMIC_SLOTS`,\n  [512\n  /* NEED_PATCH */\n  ]: `NEED_PATCH`,\n  [-1\n  /* HOISTED */\n  ]: `HOISTED`,\n  [-2\n  /* BAIL */\n  ]: `BAIL`\n};\nconst GLOBALS_WHITE_LISTED = 'Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,' + 'decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,' + 'Object,Boolean,String,RegExp,Map,Set,JSON,Intl';\nconst isGloballyWhitelisted = /*#__PURE__*/makeMap(GLOBALS_WHITE_LISTED);\nconst range = 2;\n\nfunction generateCodeFrame(source, start = 0, end = source.length) {\n  const lines = source.split(/\\r?\\n/);\n  let count = 0;\n  const res = [];\n\n  for (let i = 0; i < lines.length; i++) {\n    count += lines[i].length + 1;\n\n    if (count >= start) {\n      for (let j = i - range; j <= i + range || end > count; j++) {\n        if (j < 0 || j >= lines.length) continue;\n        const line = j + 1;\n        res.push(`${line}${' '.repeat(3 - String(line).length)}|  ${lines[j]}`);\n        const lineLength = lines[j].length;\n\n        if (j === i) {\n          // push underline\n          const pad = start - (count - lineLength) + 1;\n          const length = Math.max(1, end > count ? lineLength - pad : end - start);\n          res.push(`   |  ` + ' '.repeat(pad) + '^'.repeat(length));\n        } else if (j > i) {\n          if (end > count) {\n            const length = Math.max(Math.min(end - count, lineLength), 1);\n            res.push(`   |  ` + '^'.repeat(length));\n          }\n\n          count += lineLength + 1;\n        }\n      }\n\n      break;\n    }\n  }\n\n  return res.join('\\n');\n}\n/**\r\n * On the client we only need to offer special cases for boolean attributes that\r\n * have different names from their corresponding dom properties:\r\n * - itemscope -> N/A\r\n * - allowfullscreen -> allowFullscreen\r\n * - formnovalidate -> formNoValidate\r\n * - ismap -> isMap\r\n * - nomodule -> noModule\r\n * - novalidate -> noValidate\r\n * - readonly -> readOnly\r\n */\n\n\nconst specialBooleanAttrs = `itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly`;\nconst isSpecialBooleanAttr = /*#__PURE__*/makeMap(specialBooleanAttrs);\n/**\r\n * The full list is needed during SSR to produce the correct initial markup.\r\n */\n\nconst isBooleanAttr = /*#__PURE__*/makeMap(specialBooleanAttrs + `,async,autofocus,autoplay,controls,default,defer,disabled,hidden,` + `loop,open,required,reversed,scoped,seamless,` + `checked,muted,multiple,selected`);\nconst unsafeAttrCharRE = /[>/=\"'\\u0009\\u000a\\u000c\\u0020]/;\nconst attrValidationCache = {};\n\nfunction isSSRSafeAttrName(name) {\n  if (attrValidationCache.hasOwnProperty(name)) {\n    return attrValidationCache[name];\n  }\n\n  const isUnsafe = unsafeAttrCharRE.test(name);\n\n  if (isUnsafe) {\n    console.error(`unsafe attribute name: ${name}`);\n  }\n\n  return attrValidationCache[name] = !isUnsafe;\n}\n\nconst propsToAttrMap = {\n  acceptCharset: 'accept-charset',\n  className: 'class',\n  htmlFor: 'for',\n  httpEquiv: 'http-equiv'\n};\n/**\r\n * CSS properties that accept plain numbers\r\n */\n\nconst isNoUnitNumericStyleProp = /*#__PURE__*/makeMap(`animation-iteration-count,border-image-outset,border-image-slice,` + `border-image-width,box-flex,box-flex-group,box-ordinal-group,column-count,` + `columns,flex,flex-grow,flex-positive,flex-shrink,flex-negative,flex-order,` + `grid-row,grid-row-end,grid-row-span,grid-row-start,grid-column,` + `grid-column-end,grid-column-span,grid-column-start,font-weight,line-clamp,` + `line-height,opacity,order,orphans,tab-size,widows,z-index,zoom,` + // SVG\n`fill-opacity,flood-opacity,stop-opacity,stroke-dasharray,stroke-dashoffset,` + `stroke-miterlimit,stroke-opacity,stroke-width`);\n/**\r\n * Known attributes, this is used for stringification of runtime static nodes\r\n * so that we don't stringify bindings that cannot be set from HTML.\r\n * Don't also forget to allow `data-*` and `aria-*`!\r\n * Generated from https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\r\n */\n\nconst isKnownAttr = /*#__PURE__*/makeMap(`accept,accept-charset,accesskey,action,align,allow,alt,async,` + `autocapitalize,autocomplete,autofocus,autoplay,background,bgcolor,` + `border,buffered,capture,challenge,charset,checked,cite,class,code,` + `codebase,color,cols,colspan,content,contenteditable,contextmenu,controls,` + `coords,crossorigin,csp,data,datetime,decoding,default,defer,dir,dirname,` + `disabled,download,draggable,dropzone,enctype,enterkeyhint,for,form,` + `formaction,formenctype,formmethod,formnovalidate,formtarget,headers,` + `height,hidden,high,href,hreflang,http-equiv,icon,id,importance,integrity,` + `ismap,itemprop,keytype,kind,label,lang,language,loading,list,loop,low,` + `manifest,max,maxlength,minlength,media,min,multiple,muted,name,novalidate,` + `open,optimum,pattern,ping,placeholder,poster,preload,radiogroup,readonly,` + `referrerpolicy,rel,required,reversed,rows,rowspan,sandbox,scope,scoped,` + `selected,shape,size,sizes,slot,span,spellcheck,src,srcdoc,srclang,srcset,` + `start,step,style,summary,tabindex,target,title,translate,type,usemap,` + `value,width,wrap`);\n\nfunction normalizeStyle(value) {\n  if (isArray(value)) {\n    const res = {};\n\n    for (let i = 0; i < value.length; i++) {\n      const item = value[i];\n      const normalized = normalizeStyle(isString(item) ? parseStringStyle(item) : item);\n\n      if (normalized) {\n        for (const key in normalized) {\n          res[key] = normalized[key];\n        }\n      }\n    }\n\n    return res;\n  } else if (isObject(value)) {\n    return value;\n  }\n}\n\nconst listDelimiterRE = /;(?![^(]*\\))/g;\nconst propertyDelimiterRE = /:(.+)/;\n\nfunction parseStringStyle(cssText) {\n  const ret = {};\n  cssText.split(listDelimiterRE).forEach(item => {\n    if (item) {\n      const tmp = item.split(propertyDelimiterRE);\n      tmp.length > 1 && (ret[tmp[0].trim()] = tmp[1].trim());\n    }\n  });\n  return ret;\n}\n\nfunction stringifyStyle(styles) {\n  let ret = '';\n\n  if (!styles) {\n    return ret;\n  }\n\n  for (const key in styles) {\n    const value = styles[key];\n    const normalizedKey = key.startsWith(`--`) ? key : hyphenate(key);\n\n    if (isString(value) || typeof value === 'number' && isNoUnitNumericStyleProp(normalizedKey)) {\n      // only render valid values\n      ret += `${normalizedKey}:${value};`;\n    }\n  }\n\n  return ret;\n}\n\nfunction normalizeClass(value) {\n  let res = '';\n\n  if (isString(value)) {\n    res = value;\n  } else if (isArray(value)) {\n    for (let i = 0; i < value.length; i++) {\n      res += normalizeClass(value[i]) + ' ';\n    }\n  } else if (isObject(value)) {\n    for (const name in value) {\n      if (value[name]) {\n        res += name + ' ';\n      }\n    }\n  }\n\n  return res.trim();\n} // These tag configs are shared between compiler-dom and runtime-dom, so they\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Element\n\n\nconst HTML_TAGS = 'html,body,base,head,link,meta,style,title,address,article,aside,footer,' + 'header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,' + 'figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,' + 'data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,' + 'time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,' + 'canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,' + 'th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,' + 'option,output,progress,select,textarea,details,dialog,menu,' + 'summary,content,template,blockquote,iframe,tfoot'; // https://developer.mozilla.org/en-US/docs/Web/SVG/Element\n\nconst SVG_TAGS = 'svg,animate,animateMotion,animateTransform,circle,clipPath,color-profile,' + 'defs,desc,discard,ellipse,feBlend,feColorMatrix,feComponentTransfer,' + 'feComposite,feConvolveMatrix,feDiffuseLighting,feDisplacementMap,' + 'feDistanceLight,feDropShadow,feFlood,feFuncA,feFuncB,feFuncG,feFuncR,' + 'feGaussianBlur,feImage,feMerge,feMergeNode,feMorphology,feOffset,' + 'fePointLight,feSpecularLighting,feSpotLight,feTile,feTurbulence,filter,' + 'foreignObject,g,hatch,hatchpath,image,line,linearGradient,marker,mask,' + 'mesh,meshgradient,meshpatch,meshrow,metadata,mpath,path,pattern,' + 'polygon,polyline,radialGradient,rect,set,solidcolor,stop,switch,symbol,' + 'text,textPath,title,tspan,unknown,use,view';\nconst VOID_TAGS = 'area,base,br,col,embed,hr,img,input,link,meta,param,source,track,wbr';\nconst isHTMLTag = /*#__PURE__*/makeMap(HTML_TAGS);\nconst isSVGTag = /*#__PURE__*/makeMap(SVG_TAGS);\nconst isVoidTag = /*#__PURE__*/makeMap(VOID_TAGS);\nconst escapeRE = /[\"'&<>]/;\n\nfunction escapeHtml(string) {\n  const str = '' + string;\n  const match = escapeRE.exec(str);\n\n  if (!match) {\n    return str;\n  }\n\n  let html = '';\n  let escaped;\n  let index;\n  let lastIndex = 0;\n\n  for (index = match.index; index < str.length; index++) {\n    switch (str.charCodeAt(index)) {\n      case 34:\n        // \"\n        escaped = '&quot;';\n        break;\n\n      case 38:\n        // &\n        escaped = '&amp;';\n        break;\n\n      case 39:\n        // '\n        escaped = '&#39;';\n        break;\n\n      case 60:\n        // <\n        escaped = '&lt;';\n        break;\n\n      case 62:\n        // >\n        escaped = '&gt;';\n        break;\n\n      default:\n        continue;\n    }\n\n    if (lastIndex !== index) {\n      html += str.substring(lastIndex, index);\n    }\n\n    lastIndex = index + 1;\n    html += escaped;\n  }\n\n  return lastIndex !== index ? html + str.substring(lastIndex, index) : html;\n} // https://www.w3.org/TR/html52/syntax.html#comments\n\n\nconst commentStripRE = /^-?>|<!--|-->|--!>|<!-$/g;\n\nfunction escapeHtmlComment(src) {\n  return src.replace(commentStripRE, '');\n}\n\nfunction looseCompareArrays(a, b) {\n  if (a.length !== b.length) return false;\n  let equal = true;\n\n  for (let i = 0; equal && i < a.length; i++) {\n    equal = looseEqual(a[i], b[i]);\n  }\n\n  return equal;\n}\n\nfunction looseEqual(a, b) {\n  if (a === b) return true;\n  let aValidType = isDate(a);\n  let bValidType = isDate(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? a.getTime() === b.getTime() : false;\n  }\n\n  aValidType = isArray(a);\n  bValidType = isArray(b);\n\n  if (aValidType || bValidType) {\n    return aValidType && bValidType ? looseCompareArrays(a, b) : false;\n  }\n\n  aValidType = isObject(a);\n  bValidType = isObject(b);\n\n  if (aValidType || bValidType) {\n    /* istanbul ignore if: this if will probably never be called */\n    if (!aValidType || !bValidType) {\n      return false;\n    }\n\n    const aKeysCount = Object.keys(a).length;\n    const bKeysCount = Object.keys(b).length;\n\n    if (aKeysCount !== bKeysCount) {\n      return false;\n    }\n\n    for (const key in a) {\n      const aHasKey = a.hasOwnProperty(key);\n      const bHasKey = b.hasOwnProperty(key);\n\n      if (aHasKey && !bHasKey || !aHasKey && bHasKey || !looseEqual(a[key], b[key])) {\n        return false;\n      }\n    }\n  }\n\n  return String(a) === String(b);\n}\n\nfunction looseIndexOf(arr, val) {\n  return arr.findIndex(item => looseEqual(item, val));\n}\n/**\r\n * For converting {{ interpolation }} values to displayed strings.\r\n * @private\r\n */\n\n\nconst toDisplayString = val => {\n  return val == null ? '' : isObject(val) ? JSON.stringify(val, replacer, 2) : String(val);\n};\n\nconst replacer = (_key, val) => {\n  if (val instanceof Map) {\n    return {\n      [`Map(${val.size})`]: [...val.entries()].reduce((entries, [key, val]) => {\n        entries[`${key} =>`] = val;\n        return entries;\n      }, {})\n    };\n  } else if (val instanceof Set) {\n    return {\n      [`Set(${val.size})`]: [...val.values()]\n    };\n  } else if (isObject(val) && !isArray(val) && !isPlainObject(val)) {\n    return String(val);\n  }\n\n  return val;\n};\n/**\r\n * List of @babel/parser plugins that are used for template expression\r\n * transforms and SFC script transforms. By default we enable proposals slated\r\n * for ES2020. This will need to be updated as the spec moves forward.\r\n * Full list at https://babeljs.io/docs/en/next/babel-parser#plugins\r\n */\n\n\nconst babelParserDefautPlugins = ['bigInt', 'optionalChaining', 'nullishCoalescingOperator'];\nconst EMPTY_OBJ =  true ? Object.freeze({}) : undefined;\nconst EMPTY_ARR = [];\n\nconst NOOP = () => {};\n/**\r\n * Always return false.\r\n */\n\n\nconst NO = () => false;\n\nconst onRE = /^on[^a-z]/;\n\nconst isOn = key => onRE.test(key);\n\nconst isModelListener = key => key.startsWith('onUpdate:');\n\nconst extend = Object.assign;\n\nconst remove = (arr, el) => {\n  const i = arr.indexOf(el);\n\n  if (i > -1) {\n    arr.splice(i, 1);\n  }\n};\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\nconst hasOwn = (val, key) => hasOwnProperty.call(val, key);\n\nconst isArray = Array.isArray;\n\nconst isDate = val => val instanceof Date;\n\nconst isFunction = val => typeof val === 'function';\n\nconst isString = val => typeof val === 'string';\n\nconst isSymbol = val => typeof val === 'symbol';\n\nconst isObject = val => val !== null && typeof val === 'object';\n\nconst isPromise = val => {\n  return isObject(val) && isFunction(val.then) && isFunction(val.catch);\n};\n\nconst objectToString = Object.prototype.toString;\n\nconst toTypeString = value => objectToString.call(value);\n\nconst toRawType = value => {\n  return toTypeString(value).slice(8, -1);\n};\n\nconst isPlainObject = val => toTypeString(val) === '[object Object]';\n\nconst isReservedProp = /*#__PURE__*/makeMap('key,ref,' + 'onVnodeBeforeMount,onVnodeMounted,' + 'onVnodeBeforeUpdate,onVnodeUpdated,' + 'onVnodeBeforeUnmount,onVnodeUnmounted');\n\nconst cacheStringFunction = fn => {\n  const cache = Object.create(null);\n  return str => {\n    const hit = cache[str];\n    return hit || (cache[str] = fn(str));\n  };\n};\n\nconst camelizeRE = /-(\\w)/g;\n/**\r\n * @private\r\n */\n\nconst camelize = cacheStringFunction(str => {\n  return str.replace(camelizeRE, (_, c) => c ? c.toUpperCase() : '');\n});\nconst hyphenateRE = /\\B([A-Z])/g;\n/**\r\n * @private\r\n */\n\nconst hyphenate = cacheStringFunction(str => {\n  return str.replace(hyphenateRE, '-$1').toLowerCase();\n});\n/**\r\n * @private\r\n */\n\nconst capitalize = cacheStringFunction(str => {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}); // compare whether a value has changed, accounting for NaN.\n\nconst hasChanged = (value, oldValue) => value !== oldValue && (value === value || oldValue === oldValue);\n\nconst invokeArrayFns = (fns, arg) => {\n  for (let i = 0; i < fns.length; i++) {\n    fns[i](arg);\n  }\n};\n\nconst def = (obj, key, value) => {\n  Object.defineProperty(obj, key, {\n    configurable: true,\n    enumerable: false,\n    value\n  });\n};\n\nconst toNumber = val => {\n  const n = parseFloat(val);\n  return isNaN(n) ? val : n;\n};\n\nlet _globalThis;\n\nconst getGlobalThis = () => {\n  return _globalThis || (_globalThis = typeof globalThis !== 'undefined' ? globalThis : typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : {});\n};\n\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../../webpack/buildin/global.js */ \"../../node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:////Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/@vue/shared/dist/shared.esm-bundler.js?");

/***/ }),

/***/ "../../node_modules/vue-router/dist/vue-router.esm.js":
/*!****************************************************************************************************************!*\
  !*** /Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/vue-router/dist/vue-router.esm.js ***!
  \****************************************************************************************************************/
/*! exports provided: NavigationFailureType, RouterLink, RouterView, START_LOCATION, createMemoryHistory, createRouter, createRouterMatcher, createWebHashHistory, createWebHistory, isNavigationFailure, onBeforeRouteLeave, onBeforeRouteUpdate, parseQuery, stringifyQuery, useLink, useRoute, useRouter */
/*! all exports used */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"NavigationFailureType\", function() { return NavigationFailureType; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterLink\", function() { return RouterLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RouterView\", function() { return RouterView; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"START_LOCATION\", function() { return START_LOCATION_NORMALIZED; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createMemoryHistory\", function() { return createMemoryHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRouter\", function() { return createRouter; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createRouterMatcher\", function() { return createRouterMatcher; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createWebHashHistory\", function() { return createWebHashHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createWebHistory\", function() { return createWebHistory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"isNavigationFailure\", function() { return isNavigationFailure; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onBeforeRouteLeave\", function() { return onBeforeRouteLeave; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"onBeforeRouteUpdate\", function() { return onBeforeRouteUpdate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseQuery\", function() { return parseQuery; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"stringifyQuery\", function() { return stringifyQuery; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useLink\", function() { return useLink; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useRoute\", function() { return useRoute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"useRouter\", function() { return useRouter; });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"../../node_modules/vue/dist/vue.runtime.esm-bundler.js\");\n/*!\n  * vue-router v4.0.0-beta.5\n  * (c) 2020 Eduardo San Martin Morote\n  * @license MIT\n  */\n\nconst hasSymbol = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';\n\nconst PolySymbol = name => // vr = vue router\nhasSymbol ? Symbol('[vue-router]: ' + name) : '[vue-router]: ' + name; // rvlm = Router View Location Matched\n\n\nconst matchedRouteKey = PolySymbol('router view location matched'); // rvd = Router View Depth\n\nconst viewDepthKey = PolySymbol('router view depth'); // r = router\n\nconst routerKey = PolySymbol('router'); // rt = route location\n\nconst routeLocationKey = PolySymbol('route location');\nconst isBrowser = typeof window !== 'undefined';\n\nfunction isESModule(obj) {\n  return obj.__esModule || hasSymbol && obj[Symbol.toStringTag] === 'Module';\n}\n\nconst assign = Object.assign;\n\nfunction applyToParams(fn, params) {\n  const newParams = {};\n\n  for (const key in params) {\n    const value = params[key];\n    newParams[key] = Array.isArray(value) ? value.map(fn) : fn(value);\n  }\n\n  return newParams;\n}\n\nlet noop = () => {};\n\nfunction warn(msg, ...args) {\n  console.warn('[Vue Router warn]: ' + msg, ...args);\n}\n\nconst TRAILING_SLASH_RE = /\\/$/;\n\nconst removeTrailingSlash = path => path.replace(TRAILING_SLASH_RE, '');\n/**\r\n * Transforms an URI into a normalized history location\r\n *\r\n * @param parseQuery\r\n * @param location - URI to normalize\r\n * @param currentLocation - current absolute location. Allows resolving relative\r\n * paths. Must start with `/`. Defaults to `/`\r\n * @returns a normalized history location\r\n */\n\n\nfunction parseURL(parseQuery, location, currentLocation = '/') {\n  let path,\n      query = {},\n      searchString = '',\n      hash = ''; // Could use URL and URLSearchParams but IE 11 doesn't support it\n\n  const searchPos = location.indexOf('?');\n  const hashPos = location.indexOf('#', searchPos > -1 ? searchPos : 0);\n\n  if (searchPos > -1) {\n    path = location.slice(0, searchPos);\n    searchString = location.slice(searchPos + 1, hashPos > -1 ? hashPos : location.length);\n    query = parseQuery(searchString);\n  }\n\n  if (hashPos > -1) {\n    path = path || location.slice(0, hashPos); // keep the # character\n\n    hash = location.slice(hashPos, location.length);\n  } // no search and no query\n\n\n  path = resolveRelativePath(path != null ? path : location, currentLocation); // empty path means a relative query or hash `?foo=f`, `#thing`\n\n  return {\n    fullPath: path + (searchString && '?') + searchString + hash,\n    path,\n    query,\n    hash\n  };\n}\n/**\r\n * Stringifies a URL object\r\n *\r\n * @param stringifyQuery\r\n * @param location\r\n */\n\n\nfunction stringifyURL(stringifyQuery, location) {\n  let query = location.query ? stringifyQuery(location.query) : '';\n  return location.path + (query && '?') + query + (location.hash || '');\n}\n/**\r\n * Strips off the base from the beginning of a location.pathname in a non\r\n * case-sensitive way.\r\n *\r\n * @param pathname - location.pathname\r\n * @param base - base to strip off\r\n */\n\n\nfunction stripBase(pathname, base) {\n  // no base or base is not found at the beginning\n  if (!base || pathname.toLowerCase().indexOf(base.toLowerCase())) return pathname;\n  return pathname.slice(base.length) || '/';\n}\n/**\r\n * Checks if two RouteLocation are equal. This means that both locations are\r\n * pointing towards the same {@link RouteRecord} and that all `params`, `query`\r\n * parameters and `hash` are the same\r\n *\r\n * @param a first {@link RouteLocation}\r\n * @param b second {@link RouteLocation}\r\n */\n\n\nfunction isSameRouteLocation(stringifyQuery, a, b) {\n  let aLastIndex = a.matched.length - 1;\n  let bLastIndex = b.matched.length - 1;\n  return aLastIndex > -1 && aLastIndex === bLastIndex && isSameRouteRecord(a.matched[aLastIndex], b.matched[bLastIndex]) && isSameRouteLocationParams(a.params, b.params) && stringifyQuery(a.query) === stringifyQuery(b.query) && a.hash === b.hash;\n}\n/**\r\n * Check if two `RouteRecords` are equal. Takes into account aliases: they are\r\n * considered equal to the `RouteRecord` they are aliasing.\r\n *\r\n * @param a first {@link RouteRecord}\r\n * @param b second {@link RouteRecord}\r\n */\n\n\nfunction isSameRouteRecord(a, b) {\n  // since the original record has an undefined value for aliasOf\n  // but all aliases point to the original record, this will always compare\n  // the original record\n  return (a.aliasOf || a) === (b.aliasOf || b);\n}\n\nfunction isSameRouteLocationParams(a, b) {\n  if (Object.keys(a).length !== Object.keys(b).length) return false;\n\n  for (let key in a) {\n    if (!isSameRouteLocationParamsValue(a[key], b[key])) return false;\n  }\n\n  return true;\n}\n\nfunction isSameRouteLocationParamsValue(a, b) {\n  return Array.isArray(a) ? isEquivalentArray(a, b) : Array.isArray(b) ? isEquivalentArray(b, a) : a === b;\n}\n/**\r\n * Check if two arrays are the same or if an array with one single entry is the\r\n * same as another primitive value. Used to check query and parameters\r\n *\r\n * @param a - array of values\r\n * @param b - array of values or a single value\r\n */\n\n\nfunction isEquivalentArray(a, b) {\n  return Array.isArray(b) ? a.length === b.length && a.every((value, i) => value === b[i]) : a.length === 1 && a[0] === b;\n}\n/**\r\n * Resolves a relative path that starts with `.`.\r\n *\r\n * @param to - path location we are resolving\r\n * @param from - currentLocation.path, should start with `/`\r\n */\n\n\nfunction resolveRelativePath(to, from) {\n  if (to.startsWith('/')) return to;\n\n  if (!from.startsWith('/')) {\n    warn(`Cannot resolve a relative location without an absolute path. Trying to resolve \"${to}\" from \"${from}\". It should look like \"/${from}\".`);\n    return to;\n  }\n\n  if (!to) return from;\n  const fromSegments = from.split('/');\n  const toSegments = to.split('/');\n  let position = fromSegments.length - 1;\n  let toPosition;\n  let segment;\n\n  for (toPosition = 0; toPosition < toSegments.length; toPosition++) {\n    segment = toSegments[toPosition]; // can't go below zero\n\n    if (position === 1 || segment === '.') continue;\n    if (segment === '..') position--; // found something that is not relative path\n    else break;\n  }\n\n  return fromSegments.slice(0, position).join('/') + '/' + toSegments.slice(toPosition - (toPosition === toSegments.length ? 1 : 0)).join('/');\n}\n\nvar NavigationType;\n\n(function (NavigationType) {\n  NavigationType[\"pop\"] = \"pop\";\n  NavigationType[\"push\"] = \"push\";\n})(NavigationType || (NavigationType = {}));\n\nvar NavigationDirection;\n\n(function (NavigationDirection) {\n  NavigationDirection[\"back\"] = \"back\";\n  NavigationDirection[\"forward\"] = \"forward\";\n  NavigationDirection[\"unknown\"] = \"\";\n})(NavigationDirection || (NavigationDirection = {}));\n/**\r\n * Starting location for Histories\r\n */\n\n\nconst START = ''; // Generic utils\n\n/**\r\n * Normalizes a base by removing any trailing slash and reading the base tag if\r\n * present.\r\n *\r\n * @param base - base to normalize\r\n */\n\nfunction normalizeBase(base) {\n  if (!base) {\n    if (isBrowser) {\n      // respect <base> tag\n      const baseEl = document.querySelector('base');\n      base = baseEl && baseEl.getAttribute('href') || '/'; // strip full URL origin\n\n      base = base.replace(/^\\w+:\\/\\/[^\\/]+/, '');\n    } else {\n      base = '/';\n    }\n  } // ensure leading slash when it was removed by the regex above avoid leading\n  // slash with hash because the file could be read from the disk like file://\n  // and the leading slash would cause problems\n\n\n  if (base[0] !== '/' && base[0] !== '#') base = '/' + base; // remove the trailing slash so all other method can just do `base + fullPath`\n  // to build an href\n\n  return removeTrailingSlash(base);\n} // remove any character before the hash\n\n\nconst BEFORE_HASH_RE = /^[^#]+#/;\n\nfunction createHref(base, location) {\n  return base.replace(BEFORE_HASH_RE, '#') + location;\n}\n\nfunction getElementPosition(el, offset) {\n  const docRect = document.documentElement.getBoundingClientRect();\n  const elRect = el.getBoundingClientRect();\n  return {\n    behavior: offset.behavior,\n    left: elRect.left - docRect.left - (offset.left || 0),\n    top: elRect.top - docRect.top - (offset.top || 0)\n  };\n}\n\nconst computeScrollPosition = () => ({\n  left: window.pageXOffset,\n  top: window.pageYOffset\n});\n\nfunction scrollToPosition(position) {\n  let scrollToOptions;\n\n  if ('el' in position) {\n    let positionEl = position.el;\n    const isIdSelector = typeof positionEl === 'string' && positionEl.startsWith('#');\n    /**\r\n     * `id`s can accept pretty much any characters, including CSS combinators\r\n     * like `>` or `~`. It's still possible to retrieve elements using\r\n     * `document.getElementById('~')` but it needs to be escaped when using\r\n     * `document.querySelector('#\\\\~')` for it to be valid. The only\r\n     * requirements for `id`s are them to be unique on the page and to not be\r\n     * empty (`id=\"\"`). Because of that, when passing an id selector, it should\r\n     * be properly escaped for it to work with `querySelector`. We could check\r\n     * for the id selector to be simple (no CSS combinators `+ >~`) but that\r\n     * would make things inconsistent since they are valid characters for an\r\n     * `id` but would need to be escaped when using `querySelector`, breaking\r\n     * their usage and ending up in no selector returned. Selectors need to be\r\n     * escaped:\r\n     *\r\n     * - `#1-thing` becomes `#\\31 -thing`\r\n     * - `#with~symbols` becomes `#with\\\\~symbols`\r\n     *\r\n     * - More information about  the topic can be found at\r\n     *   https://mathiasbynens.be/notes/html5-id-class.\r\n     * - Practical example: https://mathiasbynens.be/demo/html5-id\r\n     */\n\n    if (typeof position.el === 'string') {\n      if (!isIdSelector || !document.getElementById(position.el.slice(1))) {\n        try {\n          let foundEl = document.querySelector(position.el);\n\n          if (isIdSelector && foundEl) {\n            warn(`The selector \"${position.el}\" should be passed as \"el: document.querySelector('${position.el}')\" because it starts with \"#\".`); // return to avoid other warnings\n\n            return;\n          }\n        } catch (err) {\n          warn(`The selector \"${position.el}\" is invalid. If you are using an id selector, make sure to escape it. You can find more information about escaping characters in selectors at https://mathiasbynens.be/notes/css-escapes or use CSS.escape (https://developer.mozilla.org/en-US/docs/Web/API/CSS/escape).`); // return to avoid other warnings\n\n          return;\n        }\n      }\n    }\n\n    const el = typeof positionEl === 'string' ? isIdSelector ? document.getElementById(positionEl.slice(1)) : document.querySelector(positionEl) : positionEl;\n\n    if (!el) {\n      warn(`Couldn't find element using selector \"${position.el}\"`);\n      return;\n    }\n\n    scrollToOptions = getElementPosition(el, position);\n  } else {\n    scrollToOptions = position;\n  }\n\n  if ('scrollBehavior' in document.documentElement.style) window.scrollTo(scrollToOptions);else {\n    window.scrollTo(scrollToOptions.left != null ? scrollToOptions.left : window.pageXOffset, scrollToOptions.top != null ? scrollToOptions.top : window.pageYOffset);\n  }\n}\n\nfunction getScrollKey(path, delta) {\n  const position = history.state ? history.state.position - delta : -1;\n  return position + path;\n}\n\nconst scrollPositions = new Map();\n\nfunction saveScrollPosition(key, scrollPosition) {\n  scrollPositions.set(key, scrollPosition);\n}\n\nfunction getSavedScrollPosition(key) {\n  const scroll = scrollPositions.get(key); // consume it so it's not used again\n\n  scrollPositions.delete(key);\n  return scroll;\n} // TODO: RFC about how to save scroll position\n\n/**\r\n * ScrollBehavior instance used by the router to compute and restore the scroll\r\n * position when navigating.\r\n */\n// export interface ScrollHandler<ScrollPositionEntry extends HistoryStateValue, ScrollPosition extends ScrollPositionEntry> {\n//   // returns a scroll position that can be saved in history\n//   compute(): ScrollPositionEntry\n//   // can take an extended ScrollPositionEntry\n//   scroll(position: ScrollPosition): void\n// }\n// export const scrollHandler: ScrollHandler<ScrollPosition> = {\n//   compute: computeScroll,\n//   scroll: scrollToPosition,\n// }\n\n\nlet createBaseLocation = () => location.protocol + '//' + location.host;\n/**\r\n * Creates a normalized history location from a window.location object\r\n * @param location\r\n */\n\n\nfunction createCurrentLocation(base, location) {\n  const {\n    pathname,\n    search,\n    hash\n  } = location; // allows hash based url\n\n  const hashPos = base.indexOf('#');\n\n  if (hashPos > -1) {\n    // prepend the starting slash to hash so the url starts with /#\n    let pathFromHash = hash.slice(1);\n    if (pathFromHash[0] !== '/') pathFromHash = '/' + pathFromHash;\n    return stripBase(pathFromHash, '');\n  }\n\n  const path = stripBase(pathname, base);\n  return path + search + hash;\n}\n\nfunction useHistoryListeners(base, historyState, currentLocation, replace) {\n  let listeners = [];\n  let teardowns = []; // TODO: should it be a stack? a Dict. Check if the popstate listener\n  // can trigger twice\n\n  let pauseState = null;\n\n  const popStateHandler = ({\n    state\n  }) => {\n    const to = createCurrentLocation(base, location);\n    const from = currentLocation.value;\n    const fromState = historyState.value;\n    let delta = 0;\n\n    if (state) {\n      currentLocation.value = to;\n      historyState.value = state; // ignore the popstate and reset the pauseState\n\n      if (pauseState && pauseState === from) {\n        pauseState = null;\n        return;\n      }\n\n      delta = fromState ? state.position - fromState.position : 0;\n    } else {\n      replace(to);\n    } // console.log({ deltaFromCurrent })\n    // Here we could also revert the navigation by calling history.go(-delta)\n    // this listener will have to be adapted to not trigger again and to wait for the url\n    // to be updated before triggering the listeners. Some kind of validation function would also\n    // need to be passed to the listeners so the navigation can be accepted\n    // call all listeners\n\n\n    listeners.forEach(listener => {\n      listener(currentLocation.value, from, {\n        delta,\n        type: NavigationType.pop,\n        direction: delta ? delta > 0 ? NavigationDirection.forward : NavigationDirection.back : NavigationDirection.unknown\n      });\n    });\n  };\n\n  function pauseListeners() {\n    pauseState = currentLocation.value;\n  }\n\n  function listen(callback) {\n    // setup the listener and prepare teardown callbacks\n    listeners.push(callback);\n\n    const teardown = () => {\n      const index = listeners.indexOf(callback);\n      if (index > -1) listeners.splice(index, 1);\n    };\n\n    teardowns.push(teardown);\n    return teardown;\n  }\n\n  function beforeUnloadListener() {\n    const {\n      history\n    } = window;\n    if (!history.state) return;\n    history.replaceState(assign({}, history.state, {\n      scroll: computeScrollPosition()\n    }), '');\n  }\n\n  function destroy() {\n    for (const teardown of teardowns) teardown();\n\n    teardowns = [];\n    window.removeEventListener('popstate', popStateHandler);\n    window.removeEventListener('beforeunload', beforeUnloadListener);\n  } // setup the listeners and prepare teardown callbacks\n\n\n  window.addEventListener('popstate', popStateHandler);\n  window.addEventListener('beforeunload', beforeUnloadListener);\n  return {\n    pauseListeners,\n    listen,\n    destroy\n  };\n}\n/**\r\n * Creates a state object\r\n */\n\n\nfunction buildState(back, current, forward, replaced = false, computeScroll = false) {\n  return {\n    back,\n    current,\n    forward,\n    replaced,\n    position: window.history.length,\n    scroll: computeScroll ? computeScrollPosition() : null\n  };\n}\n\nfunction useHistoryStateNavigation(base) {\n  const {\n    history,\n    location\n  } = window; // private variables\n\n  let currentLocation = {\n    value: createCurrentLocation(base, location)\n  };\n  let historyState = {\n    value: history.state\n  }; // build current history entry as this is a fresh navigation\n\n  if (!historyState.value) {\n    changeLocation(currentLocation.value, {\n      back: null,\n      current: currentLocation.value,\n      forward: null,\n      // the length is off by one, we need to decrease it\n      position: history.length - 1,\n      replaced: true,\n      // don't add a scroll as the user may have an anchor and we want\n      // scrollBehavior to be triggered without a saved position\n      scroll: null\n    }, true);\n  }\n\n  function changeLocation(to, state, replace) {\n    const url = createBaseLocation() + ( // preserve any existing query when base has a hash\n    base.indexOf('#') > -1 && location.search ? location.pathname + location.search + '#' : base) + to;\n\n    try {\n      // BROWSER QUIRK\n      // NOTE: Safari throws a SecurityError when calling this function 100 times in 30 seconds\n      history[replace ? 'replaceState' : 'pushState'](state, '', url);\n      historyState.value = state;\n    } catch (err) {\n      warn('Error with push/replace State', err); // Force the navigation, this also resets the call count\n\n      location[replace ? 'replace' : 'assign'](url);\n    }\n  }\n\n  function replace(to, data) {\n    const state = assign({}, history.state, buildState(historyState.value.back, // keep back and forward entries but override current position\n    to, historyState.value.forward, true), data, {\n      position: historyState.value.position\n    });\n    changeLocation(to, state, true);\n    currentLocation.value = to;\n  }\n\n  function push(to, data) {\n    // Add to current entry the information of where we are going\n    // as well as saving the current position\n    const currentState = assign({}, history.state, {\n      forward: to,\n      scroll: computeScrollPosition()\n    });\n    changeLocation(currentState.current, currentState, true);\n    const state = assign({}, buildState(currentLocation.value, to, null), {\n      position: currentState.position + 1\n    }, data);\n    changeLocation(to, state, false);\n    currentLocation.value = to;\n  }\n\n  return {\n    location: currentLocation,\n    state: historyState,\n    push,\n    replace\n  };\n}\n\nfunction createWebHistory(base) {\n  base = normalizeBase(base);\n  const historyNavigation = useHistoryStateNavigation(base);\n  const historyListeners = useHistoryListeners(base, historyNavigation.state, historyNavigation.location, historyNavigation.replace);\n\n  function go(delta, triggerListeners = true) {\n    if (!triggerListeners) historyListeners.pauseListeners();\n    history.go(delta);\n  }\n\n  const routerHistory = assign({\n    // it's overridden right after\n    location: '',\n    base,\n    go,\n    createHref: createHref.bind(null, base)\n  }, historyNavigation, historyListeners);\n  Object.defineProperty(routerHistory, 'location', {\n    get: () => historyNavigation.location.value\n  });\n  Object.defineProperty(routerHistory, 'state', {\n    get: () => historyNavigation.state.value\n  });\n  return routerHistory;\n} // TODO: verify base is working for SSR\n\n/**\r\n * Creates a in-memory based history. The main purpose of this history is to handle SSR. It starts in a special location that is nowhere.\r\n * It's up to the user to replace that location with the starter location.\r\n * @param base - Base applied to all urls, defaults to '/'\r\n * @returns a history object that can be passed to the router constructor\r\n */\n\n\nfunction createMemoryHistory(base = '') {\n  let listeners = [];\n  let queue = [START];\n  let position = 0;\n\n  function setLocation(location) {\n    position++;\n\n    if (position === queue.length) {\n      // we are at the end, we can simply append a new entry\n      queue.push(location);\n    } else {\n      // we are in the middle, we remove everything from here in the queue\n      queue.splice(position);\n      queue.push(location);\n    }\n  }\n\n  function triggerListeners(to, from, {\n    direction,\n    delta\n  }) {\n    const info = {\n      direction,\n      delta,\n      type: NavigationType.pop\n    };\n\n    for (let callback of listeners) {\n      callback(to, from, info);\n    }\n  }\n\n  const routerHistory = {\n    // rewritten by Object.defineProperty\n    location: START,\n    state: {},\n    base,\n    createHref: createHref.bind(null, base),\n\n    replace(to) {\n      // remove current entry and decrement position\n      queue.splice(position--, 1);\n      setLocation(to);\n    },\n\n    push(to, data) {\n      setLocation(to);\n    },\n\n    listen(callback) {\n      listeners.push(callback);\n      return () => {\n        const index = listeners.indexOf(callback);\n        if (index > -1) listeners.splice(index, 1);\n      };\n    },\n\n    destroy() {\n      listeners = [];\n    },\n\n    go(delta, shouldTrigger = true) {\n      const from = this.location;\n      const direction = // we are considering delta === 0 going forward, but in abstract mode\n      // using 0 for the delta doesn't make sense like it does in html5 where\n      // it reloads the page\n      delta < 0 ? NavigationDirection.back : NavigationDirection.forward;\n      position = Math.max(0, Math.min(position + delta, queue.length - 1));\n\n      if (shouldTrigger) {\n        triggerListeners(this.location, from, {\n          direction,\n          delta\n        });\n      }\n    }\n\n  };\n  Object.defineProperty(routerHistory, 'location', {\n    get: () => queue[position]\n  });\n  return routerHistory;\n}\n/**\r\n * Creates a hash history.\r\n *\r\n * @param base - optional base to provide. Defaults to `location.pathname` or\r\n * `/` if at root. If there is a `base` tag in the `head`, its value will be\r\n * **ignored**.\r\n *\r\n * @example\r\n * ```js\r\n * // at https://example.com/folder\r\n * createWebHashHistory() // gives a url of `https://example.com/folder#`\r\n * createWebHashHistory('/folder/') // gives a url of `https://example.com/folder/#`\r\n * // if the `#` is provided in the base, it won't be added by `createWebHashHistory`\r\n * createWebHashHistory('/folder/#/app/') // gives a url of `https://example.com/folder/#/app/`\r\n * // you should avoid doing this because it changes the original url and breaks copying urls\r\n * createWebHashHistory('/other-folder/') // gives a url of `https://example.com/other-folder/#`\r\n *\r\n * // at file:///usr/etc/folder/index.html\r\n * // for locations with no `host`, the base is ignored\r\n * createWebHashHistory('/iAmIgnored') // gives a url of `file:///usr/etc/folder/index.html#`\r\n * ```\r\n */\n\n\nfunction createWebHashHistory(base) {\n  // Make sure this implementation is fine in terms of encoding, specially for IE11\n  // for `file://`, directly use the pathname and ignore the base\n  // location.pathname contains an initial `/` even at the root: `https://example.com`\n  base = location.host ? base || location.pathname : location.pathname; // allow the user to provide a `#` in the middle: `/base/#/app`\n\n  if (base.indexOf('#') < 0) base += '#';\n\n  if (!base.endsWith('#/') && !base.endsWith('#')) {\n    warn(`A hash base must end with a \"#\":\\n\"${base}\" should be \"${base.replace(/#.*$/, '#')}\".`);\n  }\n\n  return createWebHistory(base);\n}\n\nfunction isRouteLocation(route) {\n  return typeof route === 'string' || route && typeof route === 'object';\n}\n\nfunction isRouteName(name) {\n  return typeof name === 'string' || typeof name === 'symbol';\n}\n\nconst START_LOCATION_NORMALIZED = {\n  path: '/',\n  name: undefined,\n  params: {},\n  query: {},\n  hash: '',\n  fullPath: '/',\n  matched: [],\n  meta: {},\n  redirectedFrom: undefined\n};\nconst NavigationFailureSymbol = PolySymbol('navigation failure');\nvar NavigationFailureType;\n\n(function (NavigationFailureType) {\n  NavigationFailureType[NavigationFailureType[\"aborted\"] = 4] = \"aborted\";\n  NavigationFailureType[NavigationFailureType[\"cancelled\"] = 8] = \"cancelled\";\n  NavigationFailureType[NavigationFailureType[\"duplicated\"] = 16] = \"duplicated\";\n})(NavigationFailureType || (NavigationFailureType = {})); // DEV only debug messages\n\n\nconst ErrorTypeMessages = {\n  [1\n  /* MATCHER_NOT_FOUND */\n  ]({\n    location,\n    currentLocation\n  }) {\n    return `No match for\\n ${JSON.stringify(location)}${currentLocation ? '\\nwhile being at\\n' + JSON.stringify(currentLocation) : ''}`;\n  },\n\n  [2\n  /* NAVIGATION_GUARD_REDIRECT */\n  ]({\n    from,\n    to\n  }) {\n    return `Redirected from \"${from.fullPath}\" to \"${stringifyRoute(to)}\" via a navigation guard.`;\n  },\n\n  [4\n  /* NAVIGATION_ABORTED */\n  ]({\n    from,\n    to\n  }) {\n    return `Navigation aborted from \"${from.fullPath}\" to \"${to.fullPath}\" via a navigation guard.`;\n  },\n\n  [8\n  /* NAVIGATION_CANCELLED */\n  ]({\n    from,\n    to\n  }) {\n    return `Navigation cancelled from \"${from.fullPath}\" to \"${to.fullPath}\" with a new navigation.`;\n  },\n\n  [16\n  /* NAVIGATION_DUPLICATED */\n  ]({\n    from,\n    to\n  }) {\n    return `Avoided redundant navigation to current location: \"${from.fullPath}\".`;\n  }\n\n};\n\nfunction createRouterError(type, params) {\n  {\n    return assign(new Error(ErrorTypeMessages[type](params)), {\n      type,\n      [NavigationFailureSymbol]: true\n    }, params);\n  }\n}\n\nfunction isNavigationFailure(error, type) {\n  return error instanceof Error && NavigationFailureSymbol in error && (type == null || !!(error.type & type));\n}\n\nconst propertiesToLog = ['params', 'query', 'hash'];\n\nfunction stringifyRoute(to) {\n  if (typeof to === 'string') return to;\n  if ('path' in to) return to.path;\n  const location = {};\n\n  for (const key of propertiesToLog) {\n    if (key in to) location[key] = to[key];\n  }\n\n  return JSON.stringify(location, null, 2);\n} // default pattern for a param: non greedy everything but /\n\n\nconst BASE_PARAM_PATTERN = '[^/]+?';\nconst BASE_PATH_PARSER_OPTIONS = {\n  sensitive: false,\n  strict: false,\n  start: true,\n  end: true\n}; // Special Regex characters that must be escaped in static tokens\n\nconst REGEX_CHARS_RE = /[.+*?^${}()[\\]/\\\\]/g;\n/**\r\n * Creates a path parser from an array of Segments (a segment is an array of Tokens)\r\n *\r\n * @param segments - array of segments returned by tokenizePath\r\n * @param extraOptions - optional options for the regexp\r\n * @returns a PathParser\r\n */\n\nfunction tokensToParser(segments, extraOptions) {\n  const options = assign({}, BASE_PATH_PARSER_OPTIONS, extraOptions); // the amount of scores is the same as the length of segments except for the root segment \"/\"\n\n  let score = []; // the regexp as a string\n\n  let pattern = options.start ? '^' : ''; // extracted keys\n\n  const keys = [];\n\n  for (const segment of segments) {\n    // the root segment needs special treatment\n    const segmentScores = segment.length ? [] : [90\n    /* Root */\n    ]; // allow trailing slash\n\n    if (options.strict && !segment.length) pattern += '/';\n\n    for (let tokenIndex = 0; tokenIndex < segment.length; tokenIndex++) {\n      const token = segment[tokenIndex]; // resets the score if we are inside a sub segment /:a-other-:b\n\n      let subSegmentScore = 40\n      /* Segment */\n      + (options.sensitive ? 0.25\n      /* BonusCaseSensitive */\n      : 0);\n\n      if (token.type === 0\n      /* Static */\n      ) {\n          // prepend the slash if we are starting a new segment\n          if (!tokenIndex) pattern += '/';\n          pattern += token.value.replace(REGEX_CHARS_RE, '\\\\$&');\n          subSegmentScore += 40\n          /* Static */\n          ;\n        } else if (token.type === 1\n      /* Param */\n      ) {\n          const {\n            value,\n            repeatable,\n            optional,\n            regexp\n          } = token;\n          keys.push({\n            name: value,\n            repeatable,\n            optional\n          });\n          const re = regexp ? regexp : BASE_PARAM_PATTERN; // the user provided a custom regexp /:id(\\\\d+)\n\n          if (re !== BASE_PARAM_PATTERN) {\n            subSegmentScore += 10\n            /* BonusCustomRegExp */\n            ; // make sure the regexp is valid before using it\n\n            try {\n              new RegExp(`(${re})`);\n            } catch (err) {\n              throw new Error(`Invalid custom RegExp for param \"${value}\" (${re}): ` + err.message);\n            }\n          } // when we repeat we must take care of the repeating leading slash\n\n\n          let subPattern = repeatable ? `((?:${re})(?:/(?:${re}))*)` : `(${re})`; // prepend the slash if we are starting a new segment\n\n          if (!tokenIndex) subPattern = optional ? `(?:/${subPattern})` : '/' + subPattern;\n          if (optional) subPattern += '?';\n          pattern += subPattern;\n          subSegmentScore += 20\n          /* Dynamic */\n          ;\n          if (optional) subSegmentScore += -8\n          /* BonusOptional */\n          ;\n          if (repeatable) subSegmentScore += -20\n          /* BonusRepeatable */\n          ;\n          if (re === '.*') subSegmentScore += -50\n          /* BonusWildcard */\n          ;\n        }\n\n      segmentScores.push(subSegmentScore);\n    } // an empty array like /home/ -> [[{home}], []]\n    // if (!segment.length) pattern += '/'\n\n\n    score.push(segmentScores);\n  } // only apply the strict bonus to the last score\n\n\n  if (options.strict && options.end) {\n    const i = score.length - 1;\n    score[i][score[i].length - 1] += 0.7000000000000001\n    /* BonusStrict */\n    ;\n  } // TODO: dev only warn double trailing slash\n\n\n  if (!options.strict) pattern += '/?';\n  if (options.end) pattern += '$'; // allow paths like /dynamic to only match dynamic or dynamic/... but not dynamic_something_else\n  else if (options.strict) pattern += '(?:/|$)';\n  const re = new RegExp(pattern, options.sensitive ? '' : 'i');\n\n  function parse(path) {\n    const match = path.match(re);\n    const params = {};\n    if (!match) return null;\n\n    for (let i = 1; i < match.length; i++) {\n      const value = match[i] || '';\n      const key = keys[i - 1];\n      params[key.name] = value && key.repeatable ? value.split('/') : value;\n    }\n\n    return params;\n  }\n\n  function stringify(params) {\n    let path = ''; // for optional parameters to allow to be empty\n\n    let avoidDuplicatedSlash = false;\n\n    for (const segment of segments) {\n      if (!avoidDuplicatedSlash || path[path.length - 1] !== '/') path += '/';\n      avoidDuplicatedSlash = false;\n\n      for (const token of segment) {\n        if (token.type === 0\n        /* Static */\n        ) {\n            path += token.value;\n          } else if (token.type === 1\n        /* Param */\n        ) {\n            const {\n              value,\n              repeatable,\n              optional\n            } = token;\n            const param = value in params ? params[value] : '';\n            if (Array.isArray(param) && !repeatable) throw new Error(`Provided param \"${value}\" is an array but it is not repeatable (* or + modifiers)`);\n            const text = Array.isArray(param) ? param.join('/') : param;\n\n            if (!text) {\n              // do not append a slash on the next iteration\n              if (optional) avoidDuplicatedSlash = true;else throw new Error(`Missing required param \"${value}\"`);\n            }\n\n            path += text;\n          }\n      }\n    }\n\n    return path;\n  }\n\n  return {\n    re,\n    score,\n    keys,\n    parse,\n    stringify\n  };\n}\n/**\r\n * Compares an array of numbers as used in PathParser.score and returns a\r\n * number. This function can be used to `sort` an array\r\n * @param a - first array of numbers\r\n * @param b - second array of numbers\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n * should be sorted first\r\n */\n\n\nfunction compareScoreArray(a, b) {\n  let i = 0;\n\n  while (i < a.length && i < b.length) {\n    const diff = b[i] - a[i]; // only keep going if diff === 0\n\n    if (diff) return diff;\n    i++;\n  } // if the last subsegment was Static, the shorter segments should be sorted first\n  // otherwise sort the longest segment first\n\n\n  if (a.length < b.length) {\n    return a.length === 1 && a[0] === 40\n    /* Static */\n    + 40\n    /* Segment */\n    ? -1 : 1;\n  } else if (a.length > b.length) {\n    return b.length === 1 && b[0] === 40\n    /* Static */\n    + 40\n    /* Segment */\n    ? 1 : -1;\n  }\n\n  return 0;\n}\n/**\r\n * Compare function that can be used with `sort` to sort an array of PathParser\r\n * @param a - first PathParser\r\n * @param b - second PathParser\r\n * @returns 0 if both are equal, < 0 if a should be sorted first, > 0 if b\r\n */\n\n\nfunction comparePathParserScore(a, b) {\n  let i = 0;\n  const aScore = a.score;\n  const bScore = b.score;\n\n  while (i < aScore.length && i < bScore.length) {\n    const comp = compareScoreArray(aScore[i], bScore[i]); // do not return if both are equal\n\n    if (comp) return comp;\n    i++;\n  } // if a and b share the same score entries but b has more, sort b first\n\n\n  return bScore.length - aScore.length; // this is the ternary version\n  // return aScore.length < bScore.length\n  //   ? 1\n  //   : aScore.length > bScore.length\n  //   ? -1\n  //   : 0\n}\n\nconst ROOT_TOKEN = {\n  type: 0\n  /* Static */\n  ,\n  value: ''\n};\nconst VALID_PARAM_RE = /[a-zA-Z0-9_]/; // After some profiling, the cache seems to be unnecessary because tokenizePath\n// (the slowest part of adding a route) is very fast\n// const tokenCache = new Map<string, Token[][]>()\n\nfunction tokenizePath(path) {\n  if (!path) return [[]];\n  if (path === '/') return [[ROOT_TOKEN]]; // remove the leading slash\n\n  if (path[0] !== '/') throw new Error('A non-empty path must start with \"/\"'); // if (tokenCache.has(path)) return tokenCache.get(path)!\n\n  function crash(message) {\n    throw new Error(`ERR (${state})/\"${buffer}\": ${message}`);\n  }\n\n  let state = 0\n  /* Static */\n  ;\n  let previousState = state;\n  const tokens = []; // the segment will always be valid because we get into the initial state\n  // with the leading /\n\n  let segment;\n\n  function finalizeSegment() {\n    if (segment) tokens.push(segment);\n    segment = [];\n  } // index on the path\n\n\n  let i = 0; // char at index\n\n  let char; // buffer of the value read\n\n  let buffer = ''; // custom regexp for a param\n\n  let customRe = '';\n\n  function consumeBuffer() {\n    if (!buffer) return;\n\n    if (state === 0\n    /* Static */\n    ) {\n        segment.push({\n          type: 0\n          /* Static */\n          ,\n          value: buffer\n        });\n      } else if (state === 1\n    /* Param */\n    || state === 2\n    /* ParamRegExp */\n    || state === 3\n    /* ParamRegExpEnd */\n    ) {\n        if (segment.length > 1 && (char === '*' || char === '+')) crash(`A repeatable param (${buffer}) must be alone in its segment. eg: '/:ids+.`);\n        segment.push({\n          type: 1\n          /* Param */\n          ,\n          value: buffer,\n          regexp: customRe,\n          repeatable: char === '*' || char === '+',\n          optional: char === '*' || char === '?'\n        });\n      } else {\n      crash('Invalid state to consume buffer');\n    }\n\n    buffer = '';\n  }\n\n  function addCharToBuffer() {\n    buffer += char;\n  }\n\n  while (i < path.length) {\n    char = path[i++];\n\n    if (char === '\\\\' && state !== 2\n    /* ParamRegExp */\n    ) {\n        previousState = state;\n        state = 4\n        /* EscapeNext */\n        ;\n        continue;\n      }\n\n    switch (state) {\n      case 0\n      /* Static */\n      :\n        if (char === '/') {\n          if (buffer) {\n            consumeBuffer();\n          }\n\n          finalizeSegment();\n        } else if (char === ':') {\n          consumeBuffer();\n          state = 1\n          /* Param */\n          ;\n        } else {\n          addCharToBuffer();\n        }\n\n        break;\n\n      case 4\n      /* EscapeNext */\n      :\n        addCharToBuffer();\n        state = previousState;\n        break;\n\n      case 1\n      /* Param */\n      :\n        if (char === '(') {\n          state = 2\n          /* ParamRegExp */\n          ;\n          customRe = '';\n        } else if (VALID_PARAM_RE.test(char)) {\n          addCharToBuffer();\n        } else {\n          consumeBuffer();\n          state = 0\n          /* Static */\n          ; // go back one character if we were not modifying\n\n          if (char !== '*' && char !== '?' && char !== '+') i--;\n        }\n\n        break;\n\n      case 2\n      /* ParamRegExp */\n      :\n        if (char === ')') {\n          // handle the escaped )\n          if (customRe[customRe.length - 1] == '\\\\') customRe = customRe.slice(0, -1) + char;else state = 3\n          /* ParamRegExpEnd */\n          ;\n        } else {\n          customRe += char;\n        }\n\n        break;\n\n      case 3\n      /* ParamRegExpEnd */\n      :\n        // same as finalizing a param\n        consumeBuffer();\n        state = 0\n        /* Static */\n        ; // go back one character if we were not modifying\n\n        if (char !== '*' && char !== '?' && char !== '+') i--;\n        break;\n\n      default:\n        crash('Unknown state');\n        break;\n    }\n  }\n\n  if (state === 2\n  /* ParamRegExp */\n  ) crash(`Unfinished custom RegExp for param \"${buffer}\"`);\n  consumeBuffer();\n  finalizeSegment(); // tokenCache.set(path, tokens)\n\n  return tokens;\n}\n\nfunction createRouteRecordMatcher(record, parent, options) {\n  const parser = tokensToParser(tokenizePath(record.path), options); // warn against params with the same name\n\n  {\n    const existingKeys = new Set();\n\n    for (const key of parser.keys) {\n      if (existingKeys.has(key.name)) warn(`Found duplicated params with name \"${key.name}\" for path \"${record.path}\". Only the last one will be available on \"$route.params\".`);\n      existingKeys.add(key.name);\n    }\n  }\n  const matcher = assign(parser, {\n    record,\n    parent,\n    // these needs to be populated by the parent\n    children: [],\n    alias: []\n  });\n\n  if (parent) {\n    // both are aliases or both are not aliases\n    // we don't want to mix them because the order is used when\n    // passing originalRecord in Matcher.addRoute\n    if (!matcher.record.aliasOf === !parent.record.aliasOf) parent.children.push(matcher);\n  }\n\n  return matcher;\n}\n/**\r\n * Creates a Router Matcher.\r\n *\r\n * @internal\r\n * @param routes - array of initial routes\r\n * @param globalOptions - global route options\r\n */\n\n\nfunction createRouterMatcher(routes, globalOptions) {\n  // normalized ordered array of matchers\n  const matchers = [];\n  const matcherMap = new Map();\n  globalOptions = mergeOptions({\n    strict: false,\n    end: true,\n    sensitive: false\n  }, globalOptions);\n\n  function getRecordMatcher(name) {\n    return matcherMap.get(name);\n  }\n\n  function addRoute(record, parent, originalRecord) {\n    // used later on to remove by name\n    let isRootAdd = !originalRecord;\n    let mainNormalizedRecord = normalizeRouteRecord(record); // we might be the child of an alias\n\n    mainNormalizedRecord.aliasOf = originalRecord && originalRecord.record;\n    const options = mergeOptions(globalOptions, record); // generate an array of records to correctly handle aliases\n\n    const normalizedRecords = [mainNormalizedRecord];\n\n    if ('alias' in record) {\n      const aliases = typeof record.alias === 'string' ? [record.alias] : record.alias;\n\n      for (const alias of aliases) {\n        normalizedRecords.push(assign({}, mainNormalizedRecord, {\n          // this allows us to hold a copy of the `components` option\n          // so that async components cache is hold on the original record\n          components: originalRecord ? originalRecord.record.components : mainNormalizedRecord.components,\n          path: alias,\n          // we might be the child of an alias\n          aliasOf: originalRecord ? originalRecord.record : mainNormalizedRecord\n        }));\n      }\n    }\n\n    let matcher;\n    let originalMatcher;\n\n    for (const normalizedRecord of normalizedRecords) {\n      let {\n        path\n      } = normalizedRecord; // Build up the path for nested routes if the child isn't an absolute\n      // route. Only add the / delimiter if the child path isn't empty and if the\n      // parent path doesn't have a trailing slash\n\n      if (parent && path[0] !== '/') {\n        let parentPath = parent.record.path;\n        let connectingSlash = parentPath[parentPath.length - 1] === '/' ? '' : '/';\n        normalizedRecord.path = parent.record.path + (path && connectingSlash + path);\n      } // create the object before hand so it can be passed to children\n\n\n      matcher = createRouteRecordMatcher(normalizedRecord, parent, options);\n      if (parent && path[0] === '/') checkMissingParamsInAbsolutePath(matcher, parent); // if we are an alias we must tell the original record that we exist\n      // so we can be removed\n\n      if (originalRecord) {\n        originalRecord.alias.push(matcher);\n        {\n          checkSameParams(originalRecord, matcher);\n        }\n      } else {\n        // otherwise, the first record is the original and others are aliases\n        originalMatcher = originalMatcher || matcher;\n        if (originalMatcher !== matcher) originalMatcher.alias.push(matcher); // remove the route if named and only for the top record (avoid in nested calls)\n        // this works because the original record is the first one\n\n        if (isRootAdd && record.name && !isAliasRecord(matcher)) removeRoute(record.name);\n      }\n\n      if ('children' in mainNormalizedRecord) {\n        let children = mainNormalizedRecord.children;\n\n        for (let i = 0; i < children.length; i++) {\n          addRoute(children[i], matcher, originalRecord && originalRecord.children[i]);\n        }\n      } // if there was no original record, then the first one was not an alias and all\n      // other alias (if any) need to reference this record when adding children\n\n\n      originalRecord = originalRecord || matcher;\n      insertMatcher(matcher);\n    }\n\n    return originalMatcher ? () => {\n      // since other matchers are aliases, they should be removed by the original matcher\n      removeRoute(originalMatcher);\n    } : noop;\n  }\n\n  function removeRoute(matcherRef) {\n    if (isRouteName(matcherRef)) {\n      const matcher = matcherMap.get(matcherRef);\n\n      if (matcher) {\n        matcherMap.delete(matcherRef);\n        matchers.splice(matchers.indexOf(matcher), 1);\n        matcher.children.forEach(removeRoute);\n        matcher.alias.forEach(removeRoute);\n      }\n    } else {\n      let index = matchers.indexOf(matcherRef);\n\n      if (index > -1) {\n        matchers.splice(index, 1);\n        if (matcherRef.record.name) matcherMap.delete(matcherRef.record.name);\n        matcherRef.children.forEach(removeRoute);\n        matcherRef.alias.forEach(removeRoute);\n      }\n    }\n  }\n\n  function getRoutes() {\n    return matchers;\n  }\n\n  function insertMatcher(matcher) {\n    let i = 0; // console.log('i is', { i })\n\n    while (i < matchers.length && comparePathParserScore(matcher, matchers[i]) >= 0) i++; // console.log('END i is', { i })\n    // while (i < matchers.length && matcher.score <= matchers[i].score) i++\n\n\n    matchers.splice(i, 0, matcher); // only add the original record to the name map\n\n    if (matcher.record.name && !isAliasRecord(matcher)) matcherMap.set(matcher.record.name, matcher);\n  }\n\n  function resolve(location, currentLocation) {\n    let matcher;\n    let params = {};\n    let path;\n    let name;\n\n    if ('name' in location && location.name) {\n      matcher = matcherMap.get(location.name);\n      if (!matcher) throw createRouterError(1\n      /* MATCHER_NOT_FOUND */\n      , {\n        location\n      });\n      name = matcher.record.name;\n      params = assign( // paramsFromLocation is a new object\n      paramsFromLocation(currentLocation.params, // only keep params that exist in the resolved location\n      // TODO: only keep optional params coming from a parent record\n      matcher.keys.map(k => k.name)), location.params); // throws if cannot be stringified\n\n      path = matcher.stringify(params);\n    } else if ('path' in location) {\n      // no need to resolve the path with the matcher as it was provided\n      // this also allows the user to control the encoding\n      path = location.path;\n\n      if (path[0] !== '/') {\n        warn(`The Matcher cannot resolve relative paths but received \"${path}\". Unless you directly called \\`matcher.resolve(\"${path}\")\\`, this is probably a bug in vue-router. Please open an issue at https://new-issue.vuejs.org/?repo=vuejs/vue-router-next.`);\n      }\n\n      matcher = matchers.find(m => m.re.test(path)); // matcher should have a value after the loop\n\n      if (matcher) {\n        // TODO: dev warning of unused params if provided\n        params = matcher.parse(path);\n        name = matcher.record.name;\n      } // location is a relative path\n\n    } else {\n      // match by name or path of current route\n      matcher = currentLocation.name ? matcherMap.get(currentLocation.name) : matchers.find(m => m.re.test(currentLocation.path));\n      if (!matcher) throw createRouterError(1\n      /* MATCHER_NOT_FOUND */\n      , {\n        location,\n        currentLocation\n      });\n      name = matcher.record.name; // since we are navigating to the same location, we don't need to pick the\n      // params like when `name` is provided\n\n      params = assign({}, currentLocation.params, location.params);\n      path = matcher.stringify(params);\n    }\n\n    const matched = [];\n    let parentMatcher = matcher;\n\n    while (parentMatcher) {\n      // reversed order so parents are at the beginning\n      matched.unshift(parentMatcher.record);\n      parentMatcher = parentMatcher.parent;\n    }\n\n    return {\n      name,\n      path,\n      params,\n      matched,\n      meta: mergeMetaFields(matched)\n    };\n  } // add initial routes\n\n\n  routes.forEach(route => addRoute(route));\n  return {\n    addRoute,\n    resolve,\n    removeRoute,\n    getRoutes,\n    getRecordMatcher\n  };\n}\n\nfunction paramsFromLocation(params, keys) {\n  let newParams = {};\n\n  for (let key of keys) {\n    if (key in params) newParams[key] = params[key];\n  }\n\n  return newParams;\n}\n/**\r\n * Normalizes a RouteRecordRaw. Creates a copy\r\n *\r\n * @param record\r\n * @returns the normalized version\r\n */\n\n\nfunction normalizeRouteRecord(record) {\n  return {\n    path: record.path,\n    redirect: record.redirect,\n    name: record.name,\n    meta: record.meta || {},\n    aliasOf: undefined,\n    beforeEnter: record.beforeEnter,\n    props: normalizeRecordProps(record),\n    children: record.children || [],\n    instances: {},\n    leaveGuards: [],\n    updateGuards: [],\n    enterCallbacks: {},\n    components: 'components' in record ? record.components || {} : {\n      default: record.component\n    }\n  };\n}\n/**\r\n * Normalize the optional `props` in a record to always be an object similar to\r\n * components. Also accept a boolean for components.\r\n * @param record\r\n */\n\n\nfunction normalizeRecordProps(record) {\n  const propsObject = {}; // props does not exist on redirect records but we can set false directly\n\n  const props = record.props || false;\n\n  if ('component' in record) {\n    propsObject.default = props;\n  } else {\n    // NOTE: we could also allow a function to be applied to every component.\n    // Would need user feedback for use cases\n    for (let name in record.components) propsObject[name] = typeof props === 'boolean' ? props : props[name];\n  }\n\n  return propsObject;\n}\n/**\r\n * Checks if a record or any of its parent is an alias\r\n * @param record\r\n */\n\n\nfunction isAliasRecord(record) {\n  while (record) {\n    if (record.record.aliasOf) return true;\n    record = record.parent;\n  }\n\n  return false;\n}\n/**\r\n * Merge meta fields of an array of records\r\n *\r\n * @param matched array of matched records\r\n */\n\n\nfunction mergeMetaFields(matched) {\n  return matched.reduce((meta, record) => assign(meta, record.meta), {});\n}\n\nfunction mergeOptions(defaults, partialOptions) {\n  let options = {};\n\n  for (let key in defaults) {\n    options[key] = key in partialOptions ? partialOptions[key] : defaults[key];\n  }\n\n  return options;\n}\n\nfunction isSameParam(a, b) {\n  return a.name === b.name && a.optional === b.optional && a.repeatable === b.repeatable;\n}\n\nfunction checkSameParams(a, b) {\n  for (let key of a.keys) {\n    if (!b.keys.find(isSameParam.bind(null, key))) return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\n  }\n\n  for (let key of b.keys) {\n    if (!a.keys.find(isSameParam.bind(null, key))) return warn(`Alias \"${b.record.path}\" and the original record: \"${a.record.path}\" should have the exact same param named \"${key.name}\"`);\n  }\n}\n\nfunction checkMissingParamsInAbsolutePath(record, parent) {\n  for (let key of parent.keys) {\n    if (!record.keys.find(isSameParam.bind(null, key))) return warn(`Absolute path \"${record.record.path}\" should have the exact same param named \"${key.name}\" as its parent \"${parent.record.path}\".`);\n  }\n}\n/**\r\n * Encoding Rules ␣ = Space Path: ␣ \" < > # ? { } Query: ␣ \" < > # & = Hash: ␣ \"\r\n * < > `\r\n *\r\n * On top of that, the RFC3986 (https://tools.ietf.org/html/rfc3986#section-2.2)\r\n * defines some extra characters to be encoded. Most browsers do not encode them\r\n * in encodeURI https://github.com/whatwg/url/issues/369, so it may be safer to\r\n * also encode `!'()*`. Leaving unencoded only ASCII alphanumeric(`a-zA-Z0-9`)\r\n * plus `-._~`. This extra safety should be applied to query by patching the\r\n * string returned by encodeURIComponent encodeURI also encodes `[\\]^`. `\\`\r\n * should be encoded to avoid ambiguity. Browsers (IE, FF, C) transform a `\\`\r\n * into a `/` if directly typed in. The _backtick_ (`````) should also be\r\n * encoded everywhere because some browsers like FF encode it when directly\r\n * written while others don't. Safari and IE don't encode ``\"<>{}``` in hash.\r\n */\n// const EXTRA_RESERVED_RE = /[!'()*]/g\n// const encodeReservedReplacer = (c: string) => '%' + c.charCodeAt(0).toString(16)\n\n\nconst HASH_RE = /#/g; // %23\n\nconst AMPERSAND_RE = /&/g; // %26\n\nconst SLASH_RE = /\\//g; // %2F\n\nconst EQUAL_RE = /=/g; // %3D\n\nconst IM_RE = /\\?/g; // %3F\n\nconst ENC_BRACKET_OPEN_RE = /%5B/g; // [\n\nconst ENC_BRACKET_CLOSE_RE = /%5D/g; // ]\n\nconst ENC_CARET_RE = /%5E/g; // ^\n\nconst ENC_BACKTICK_RE = /%60/g; // `\n\nconst ENC_CURLY_OPEN_RE = /%7B/g; // {\n\nconst ENC_PIPE_RE = /%7C/g; // |\n\nconst ENC_CURLY_CLOSE_RE = /%7D/g; // }\n\n/**\r\n * Encode characters that need to be encoded on the path, search and hash\r\n * sections of the URL.\r\n *\r\n * @internal\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\n\nfunction commonEncode(text) {\n  return encodeURI('' + text).replace(ENC_PIPE_RE, '|').replace(ENC_BRACKET_OPEN_RE, '[').replace(ENC_BRACKET_CLOSE_RE, ']');\n}\n/**\r\n * Encode characters that need to be encoded on the hash section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\n\n\nfunction encodeHash(text) {\n  return commonEncode(text).replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');\n}\n/**\r\n * Encode characters that need to be encoded query keys and values on the query\r\n * section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\n\n\nfunction encodeQueryProperty(text) {\n  return commonEncode(text).replace(HASH_RE, '%23').replace(AMPERSAND_RE, '%26').replace(EQUAL_RE, '%3D').replace(ENC_BACKTICK_RE, '`').replace(ENC_CURLY_OPEN_RE, '{').replace(ENC_CURLY_CLOSE_RE, '}').replace(ENC_CARET_RE, '^');\n}\n/**\r\n * Encode characters that need to be encoded on the path section of the URL.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\n\n\nfunction encodePath(text) {\n  return commonEncode(text).replace(HASH_RE, '%23').replace(IM_RE, '%3F');\n}\n/**\r\n * Encode characters that need to be encoded on the path section of the URL as a\r\n * param. This function encodes everything {@link encodePath} does plus the\r\n * slash (`/`) character.\r\n *\r\n * @param text - string to encode\r\n * @returns encoded string\r\n */\n\n\nfunction encodeParam(text) {\n  return encodePath(text).replace(SLASH_RE, '%2F');\n}\n/**\r\n * Decode text using `decodeURIComponent`. Returns the original text if it\r\n * fails.\r\n *\r\n * @param text - string to decode\r\n * @returns decoded string\r\n */\n\n\nfunction decode(text) {\n  try {\n    return decodeURIComponent('' + text);\n  } catch (err) {\n    warn(`Error decoding \"${text}\". Using original value`);\n  }\n\n  return '' + text;\n}\n/**\r\n * Transforms a queryString into a {@link LocationQuery} object. Accept both, a\r\n * version with the leading `?` and without Should work as URLSearchParams\r\n *\r\n * @param search - search string to parse\r\n * @returns a query object\r\n */\n\n\nfunction parseQuery(search) {\n  const query = {}; // avoid creating an object with an empty key and empty value\n  // because of split('&')\n\n  if (search === '' || search === '?') return query;\n  const hasLeadingIM = search[0] === '?';\n  const searchParams = (hasLeadingIM ? search.slice(1) : search).split('&');\n\n  for (let i = 0; i < searchParams.length; ++i) {\n    let [key, rawValue] = searchParams[i].split('=');\n    key = decode(key); // avoid decoding null\n\n    let value = rawValue == null ? null : decode(rawValue);\n\n    if (key in query) {\n      // an extra variable for ts types\n      let currentValue = query[key];\n\n      if (!Array.isArray(currentValue)) {\n        currentValue = query[key] = [currentValue];\n      }\n\n      currentValue.push(value);\n    } else {\n      query[key] = value;\n    }\n  }\n\n  return query;\n}\n/**\r\n * Stringifies a {@link LocationQueryRaw} object. Like `URLSearchParams`, it\r\n * doesn't prepend a `?`\r\n *\r\n * @param query - query object to stringify\r\n * @returns string version of the query without the leading `?`\r\n */\n\n\nfunction stringifyQuery(query) {\n  let search = '';\n\n  for (let key in query) {\n    if (search.length) search += '&';\n    const value = query[key];\n    key = encodeQueryProperty(key);\n\n    if (value == null) {\n      // only null adds the value\n      if (value !== undefined) search += key;\n      continue;\n    } // keep null values\n\n\n    let values = Array.isArray(value) ? value.map(v => v && encodeQueryProperty(v)) : [value && encodeQueryProperty(value)];\n\n    for (let i = 0; i < values.length; i++) {\n      // only append & with i > 0\n      search += (i ? '&' : '') + key;\n      if (values[i] != null) search += '=' + values[i];\n    }\n  }\n\n  return search;\n}\n/**\r\n * Transforms a {@link LocationQueryRaw} into a {@link LocationQuery} by casting\r\n * numbers into strings, removing keys with an undefined value and replacing\r\n * undefined with null in arrays\r\n *\r\n * @param query - query object to normalize\r\n * @returns a normalized query object\r\n */\n\n\nfunction normalizeQuery(query) {\n  const normalizedQuery = {};\n\n  for (let key in query) {\n    let value = query[key];\n\n    if (value !== undefined) {\n      normalizedQuery[key] = Array.isArray(value) ? value.map(v => v == null ? null : '' + v) : value == null ? value : '' + value;\n    }\n  }\n\n  return normalizedQuery;\n}\n/**\r\n * Create a list of callbacks that can be reset. Used to create before and after navigation guards list\r\n */\n\n\nfunction useCallbacks() {\n  let handlers = [];\n\n  function add(handler) {\n    handlers.push(handler);\n    return () => {\n      const i = handlers.indexOf(handler);\n      if (i > -1) handlers.splice(i, 1);\n    };\n  }\n\n  function reset() {\n    handlers = [];\n  }\n\n  return {\n    add,\n    list: () => handlers,\n    reset\n  };\n}\n/**\r\n * Add a navigation guard that triggers whenever the current location is\r\n * left. Similarly to {@link beforeRouteLeave}, it has access to the\r\n * component instance as `this`.\r\n *\r\n * @param leaveGuard - {@link NavigationGuard}\r\n */\n\n\nfunction onBeforeRouteLeave(leaveGuard) {\n  const instance = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* getCurrentInstance */ \"g\"])();\n\n  if (!instance) {\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])('onBeforeRouteLeave must be called at the top of a setup function');\n    return;\n  }\n\n  const activeRecord = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(matchedRouteKey, {}).value;\n\n  if (!activeRecord) {\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])('onBeforeRouteLeave must be called at the top of a setup function');\n    return;\n  }\n\n  activeRecord.leaveGuards.push( // @ts-ignore do we even want to allow that? Passing the context in a composition api hook doesn't make sense\n  leaveGuard.bind(instance.proxy));\n}\n/**\r\n * Add a navigation guard that triggers whenever the current location is\r\n * updated. Similarly to {@link beforeRouteUpdate}, it has access to the\r\n * component instance as `this`.\r\n *\r\n * @param updateGuard - {@link NavigationGuard}\r\n */\n\n\nfunction onBeforeRouteUpdate(updateGuard) {\n  const instance = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* getCurrentInstance */ \"g\"])();\n\n  if (!instance) {\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])('onBeforeRouteUpdate must be called at the top of a setup function');\n    return;\n  }\n\n  const activeRecord = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(matchedRouteKey, {}).value;\n\n  if (!activeRecord) {\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])('onBeforeRouteUpdate must be called at the top of a setup function');\n    return;\n  }\n\n  activeRecord.updateGuards.push( // @ts-ignore do we even want to allow that? Passing the context in a composition api hook doesn't make sense\n  updateGuard.bind(instance.proxy));\n}\n\nfunction guardToPromiseFn(guard, to, from, record, name) {\n  // keep a reference to the enterCallbackArray to prevent pushing callbacks if a new navigation took place\n  const enterCallbackArray = record && ( // name is defined if record is because of the function overload\n  record.enterCallbacks[name] = record.enterCallbacks[name] || []);\n  return () => new Promise((resolve, reject) => {\n    const next = valid => {\n      if (valid === false) reject(createRouterError(4\n      /* NAVIGATION_ABORTED */\n      , {\n        from,\n        to\n      }));else if (valid instanceof Error) {\n        reject(valid);\n      } else if (isRouteLocation(valid)) {\n        reject(createRouterError(2\n        /* NAVIGATION_GUARD_REDIRECT */\n        , {\n          from: to,\n          to: valid\n        }));\n      } else {\n        if (enterCallbackArray && // since enterCallbackArray is truthy, both record and name also are\n        record.enterCallbacks[name] === enterCallbackArray && typeof valid === 'function') enterCallbackArray.push(valid);\n        resolve();\n      }\n    }; // wrapping with Promise.resolve allows it to work with both async and sync guards\n\n\n    let guardCall = Promise.resolve(guard.call(record && record.instances[name], to, from, // TODO: could wrap in dev to check if the guard returns before\n    // calling next with 3 or more arguments. This would help people\n    // forgetting to remove the `next` argument\n    canOnlyBeCalledOnce(next, to, from)));\n    if (guard.length < 3) guardCall = guardCall.then(next);\n    if (guard.length > 2) guardCall = guardCall.then(() => {\n      // @ts-ignore: _called is added at canOnlyBeCalledOnce\n      if (!next._called) Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])(`The \"next\" callback was never called inside of ${guard.name ? '\"' + guard.name + '\"' : ''}:\\n${guard.toString()}\\n. If you are returning a value instead of calling \"next\", make sure to remove the \"next\" parameter from your function.`);\n      return Promise.reject(new Error('Invalid navigation guard'));\n    });\n    guardCall.catch(err => reject(err));\n  });\n}\n\nfunction canOnlyBeCalledOnce(next, to, from) {\n  let called = 0;\n  return function () {\n    if (called++ === 1) Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])(`The \"next\" callback was called more than once in one navigation guard when going from \"${from.fullPath}\" to \"${to.fullPath}\". It should be called exactly one time in each navigation guard. This will fail in production.`); // @ts-ignore: we put it in the original one because it's easier to check\n\n    next._called = true;\n    if (called === 1) next.apply(null, arguments);\n  };\n}\n\nfunction extractComponentsGuards(matched, guardType, to, from) {\n  const guards = [];\n\n  for (const record of matched) {\n    for (const name in record.components) {\n      let rawComponent = record.components[name]; // warn if user wrote import('/component.vue') instead of () => import('./component.vue')\n\n      if ('then' in rawComponent) {\n        Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])(`Component \"${name}\" in record with path \"${record.path}\" is a Promise instead of a function that returns a Promise. Did you write \"import('./MyPage.vue')\" instead of \"() => import('./MyPage.vue')\"? This will break in production if not fixed.`);\n        let promise = rawComponent;\n\n        rawComponent = () => promise;\n      } // skip update and leave guards if the route component is not mounted\n\n\n      if (guardType !== 'beforeRouteEnter' && !record.instances[name]) continue;\n\n      if (isRouteComponent(rawComponent)) {\n        // __vccOpts is added by vue-class-component and contain the regular options\n        let options = rawComponent.__vccOpts || rawComponent;\n        const guard = options[guardType];\n        guard && guards.push(guardToPromiseFn(guard, to, from, record, name));\n      } else {\n        // start requesting the chunk already\n        let componentPromise = rawComponent();\n\n        if (!('catch' in componentPromise)) {\n          Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"u\"])(`Component \"${name}\" in record with path \"${record.path}\" is a function that does not return a Promise. If you were passing a functional component, make sure to add a \"displayName\" to the component. This will break in production if not fixed.`);\n          componentPromise = Promise.resolve(componentPromise);\n        } else {\n          componentPromise = componentPromise.catch(() => null);\n        }\n\n        guards.push(() => componentPromise.then(resolved => {\n          if (!resolved) return Promise.reject(new Error(`Couldn't resolve component \"${name}\" for the following record with path \"${record.path}\"`));\n          const resolvedComponent = isESModule(resolved) ? resolved.default : resolved; // replace the function with the resolved component\n\n          record.components[name] = resolvedComponent; // @ts-ignore: the options types are not propagated to Component\n\n          const guard = resolvedComponent[guardType];\n          return guard && guardToPromiseFn(guard, to, from, record, name)();\n        }));\n      }\n    }\n  }\n\n  return guards;\n}\n/**\r\n * Allows differentiating lazy components from functional components and vue-class-component\r\n * @param component\r\n */\n\n\nfunction isRouteComponent(component) {\n  return typeof component === 'object' || 'displayName' in component || 'props' in component || '__vccOpts' in component;\n} // TODO: we could allow currentRoute as a prop to expose `isActive` and\n// `isExactActive` behavior should go through an RFC\n\n\nfunction useLink(props) {\n  const router = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(routerKey);\n  const currentRoute = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(routeLocationKey);\n  const route = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => router.resolve(Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* unref */ \"t\"])(props.to)));\n  const activeRecordIndex = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => {\n    let {\n      matched\n    } = route.value;\n    let {\n      length\n    } = matched;\n    const routeMatched = matched[length - 1];\n    let currentMatched = currentRoute.matched;\n    if (!routeMatched || !currentMatched.length) return -1;\n    let index = currentMatched.findIndex(isSameRouteRecord.bind(null, routeMatched));\n    if (index > -1) return index; // possible parent record\n\n    let parentRecordPath = getOriginalPath(matched[length - 2]);\n    return (// we are dealing with nested routes\n      length > 1 && // if the have the same path, this link is referring to the empty child\n      // are we currently are on a different child of the same parent\n      getOriginalPath(routeMatched) === parentRecordPath && // avoid comparing the child with its parent\n      currentMatched[currentMatched.length - 1].path !== parentRecordPath ? currentMatched.findIndex(isSameRouteRecord.bind(null, matched[length - 2])) : index\n    );\n  });\n  const isActive = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => activeRecordIndex.value > -1 && includesParams(currentRoute.params, route.value.params));\n  const isExactActive = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => activeRecordIndex.value > -1 && activeRecordIndex.value === currentRoute.matched.length - 1 && isSameRouteLocationParams(currentRoute.params, route.value.params));\n\n  function navigate(e = {}) {\n    if (guardEvent(e)) return router[Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* unref */ \"t\"])(props.replace) ? 'replace' : 'push'](Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* unref */ \"t\"])(props.to));\n    return Promise.resolve();\n  }\n\n  return {\n    route,\n    href: Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => route.value.href),\n    isActive,\n    isExactActive,\n    navigate\n  };\n}\n\nconst RouterLinkImpl = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* defineComponent */ \"f\"])({\n  name: 'RouterLink',\n  props: {\n    to: {\n      type: [String, Object],\n      required: true\n    },\n    activeClass: String,\n    // inactiveClass: String,\n    exactActiveClass: String,\n    custom: Boolean,\n    ariaCurrentValue: {\n      type: String,\n      default: 'page'\n    }\n  },\n\n  setup(props, {\n    slots,\n    attrs\n  }) {\n    const link = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* reactive */ \"o\"])(useLink(props));\n    const {\n      options\n    } = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(routerKey);\n    const elClass = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => ({\n      [getLinkClass(props.activeClass, options.linkActiveClass, 'router-link-active')]: link.isActive,\n      // [getLinkClass(\n      //   props.inactiveClass,\n      //   options.linkInactiveClass,\n      //   'router-link-inactive'\n      // )]: !link.isExactActive,\n      [getLinkClass(props.exactActiveClass, options.linkExactActiveClass, 'router-link-exact-active')]: link.isExactActive\n    }));\n    return () => {\n      const children = slots.default && slots.default(link);\n      return props.custom ? children : Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"h\"])('a', assign({\n        'aria-current': link.isExactActive ? props.ariaCurrentValue : null,\n        onClick: link.navigate,\n        href: link.href\n      }, attrs, {\n        class: elClass.value\n      }), children);\n    };\n  }\n\n}); // export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n\nconst RouterLink = RouterLinkImpl;\n\nfunction guardEvent(e) {\n  // don't redirect with control keys\n  if (e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) return; // don't redirect when preventDefault called\n\n  if (e.defaultPrevented) return; // don't redirect on right click\n\n  if (e.button !== undefined && e.button !== 0) return; // don't redirect if `target=\"_blank\"`\n  // @ts-ignore getAttribute does exist\n\n  if (e.currentTarget && e.currentTarget.getAttribute) {\n    // @ts-ignore getAttribute exists\n    const target = e.currentTarget.getAttribute('target');\n    if (/\\b_blank\\b/i.test(target)) return;\n  } // this may be a Weex event which doesn't have this method\n\n\n  if (e.preventDefault) e.preventDefault();\n  return true;\n}\n\nfunction includesParams(outer, inner) {\n  for (let key in inner) {\n    let innerValue = inner[key];\n    let outerValue = outer[key];\n\n    if (typeof innerValue === 'string') {\n      if (innerValue !== outerValue) return false;\n    } else {\n      if (!Array.isArray(outerValue) || outerValue.length !== innerValue.length || innerValue.some((value, i) => value !== outerValue[i])) return false;\n    }\n  }\n\n  return true;\n}\n/**\r\n * Get the original path value of a record by following its aliasOf\r\n * @param record\r\n */\n\n\nfunction getOriginalPath(record) {\n  return record ? record.aliasOf ? record.aliasOf.path : record.path : '';\n}\n/**\r\n * Utility class to get the active class based on defaults.\r\n * @param propClass\r\n * @param globalClass\r\n * @param defaultClass\r\n */\n\n\nlet getLinkClass = (propClass, globalClass, defaultClass) => propClass != null ? propClass : globalClass != null ? globalClass : defaultClass;\n\nconst RouterViewImpl = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* defineComponent */ \"f\"])({\n  name: 'RouterView',\n  props: {\n    name: {\n      type: String,\n      default: 'default'\n    },\n    route: Object\n  },\n\n  setup(props, {\n    attrs,\n    slots\n  }) {\n    warnDeprecatedUsage();\n    const injectedRoute = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(routeLocationKey);\n    const depth = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(viewDepthKey, 0);\n    const matchedRouteRef = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => (props.route || injectedRoute).matched[depth]);\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* provide */ \"m\"])(viewDepthKey, depth + 1);\n    Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* provide */ \"m\"])(matchedRouteKey, matchedRouteRef);\n    const viewRef = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* ref */ \"p\"])();\n    return () => {\n      const route = props.route || injectedRoute;\n      const matchedRoute = matchedRouteRef.value;\n      const ViewComponent = matchedRoute && matchedRoute.components[props.name];\n\n      if (!ViewComponent) {\n        return slots.default ? slots.default({\n          Component: ViewComponent,\n          route\n        }) : null;\n      } // props from route configration\n\n\n      const routePropsOption = matchedRoute.props[props.name];\n      const routeProps = routePropsOption ? routePropsOption === true ? route.params : typeof routePropsOption === 'function' ? routePropsOption(route) : routePropsOption : null; // we need the value at the time we render because when we unmount, we\n      // navigated to a different location so the value is different\n\n      const currentName = props.name;\n\n      const onVnodeMounted = () => {\n        matchedRoute.instances[currentName] = viewRef.value;\n        (matchedRoute.enterCallbacks[currentName] || []).forEach(callback => callback(viewRef.value));\n      };\n\n      const onVnodeUnmounted = () => {\n        // remove the instance reference to prevent leak\n        matchedRoute.instances[currentName] = null;\n      };\n\n      const component = Object(vue__WEBPACK_IMPORTED_MODULE_0__[\"h\"])(ViewComponent, assign({}, routeProps, attrs, {\n        onVnodeMounted,\n        onVnodeUnmounted,\n        ref: viewRef\n      }));\n      return (// pass the vnode to the slot as a prop.\n        // h and <component :is=\"...\"> both accept vnodes\n        slots.default ? slots.default({\n          Component: component,\n          route\n        }) : component\n      );\n    };\n  }\n\n}); // export the public type for h/tsx inference\n// also to avoid inline import() in generated d.ts files\n\nconst RouterView = RouterViewImpl; // warn against deprecated usage with <transition> & <keep-alive>\n// due to functional component being no longer eager in Vue 3\n\nfunction warnDeprecatedUsage() {\n  const instance = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* getCurrentInstance */ \"g\"])();\n  const parentName = instance.parent && instance.parent.type.name;\n\n  if (parentName && (parentName === 'KeepAlive' || parentName.includes('Transition'))) {\n    const comp = parentName === 'KeepAlive' ? 'keep-alive' : 'transition';\n    warn(`<router-view> can no longer be used directly inside <transition> or <keep-alive>.\\n` + `Use slot props instead:\\n\\n` + `<router-view v-slot=\"{ Component }\">\\n` + `  <${comp}>\\n` + `    <component :is=\"Component\" />\\n` + `  </${comp}>\\n` + `</router-view>`);\n  }\n}\n/**\r\n * Create a Router instance that can be used on a Vue app.\r\n *\r\n * @param options - {@link RouterOptions}\r\n */\n\n\nfunction createRouter(options) {\n  const matcher = createRouterMatcher(options.routes, options);\n  let parseQuery$1 = options.parseQuery || parseQuery;\n  let stringifyQuery$1 = options.stringifyQuery || stringifyQuery;\n  let {\n    scrollBehavior\n  } = options;\n  let routerHistory = options.history;\n  const beforeGuards = useCallbacks();\n  const beforeResolveGuards = useCallbacks();\n  const afterGuards = useCallbacks();\n  const currentRoute = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* shallowRef */ \"r\"])(START_LOCATION_NORMALIZED);\n  let pendingLocation = START_LOCATION_NORMALIZED; // leave the scrollRestoration if no scrollBehavior is provided\n\n  if (isBrowser && scrollBehavior && 'scrollRestoration' in history) {\n    history.scrollRestoration = 'manual';\n  }\n\n  const normalizeParams = applyToParams.bind(null, paramValue => '' + paramValue);\n  const encodeParams = applyToParams.bind(null, encodeParam);\n  const decodeParams = applyToParams.bind(null, decode);\n\n  function addRoute(parentOrRoute, route) {\n    let parent;\n    let record;\n\n    if (isRouteName(parentOrRoute)) {\n      parent = matcher.getRecordMatcher(parentOrRoute);\n      record = route;\n    } else {\n      record = parentOrRoute;\n    }\n\n    return matcher.addRoute(record, parent);\n  }\n\n  function removeRoute(name) {\n    let recordMatcher = matcher.getRecordMatcher(name);\n\n    if (recordMatcher) {\n      matcher.removeRoute(recordMatcher);\n    } else {\n      warn(`Cannot remove non-existent route \"${String(name)}\"`);\n    }\n  }\n\n  function getRoutes() {\n    return matcher.getRoutes().map(routeMatcher => routeMatcher.record);\n  }\n\n  function hasRoute(name) {\n    return !!matcher.getRecordMatcher(name);\n  }\n\n  function resolve(rawLocation, currentLocation) {\n    // const objectLocation = routerLocationAsObject(rawLocation)\n    currentLocation = currentLocation || currentRoute.value;\n\n    if (typeof rawLocation === 'string') {\n      let locationNormalized = parseURL(parseQuery$1, rawLocation, currentLocation.path);\n      let matchedRoute = matcher.resolve({\n        path: locationNormalized.path\n      }, currentLocation);\n      let href = routerHistory.createHref(locationNormalized.fullPath);\n      {\n        if (href.startsWith('//')) warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);else if (!matchedRoute.matched.length) {\n          warn(`No match found for location with path \"${rawLocation}\"`);\n        }\n      } // locationNormalized is always a new object\n\n      return assign(locationNormalized, matchedRoute, {\n        params: decodeParams(matchedRoute.params),\n        redirectedFrom: undefined,\n        href\n      });\n    }\n\n    let matcherLocation; // path could be relative in object as well\n\n    if ('path' in rawLocation) {\n      if ('params' in rawLocation && !('name' in rawLocation) && Object.keys(rawLocation.params).length) {\n        warn(`Path \"${rawLocation.path}\" was passed with params but they will be ignored. Use a named route alongside params instead.`);\n      }\n\n      matcherLocation = assign({}, rawLocation, {\n        path: parseURL(parseQuery$1, rawLocation.path, currentLocation.path).path\n      });\n    } else {\n      matcherLocation = assign({}, rawLocation, {\n        params: encodeParams(rawLocation.params)\n      });\n    }\n\n    let matchedRoute = matcher.resolve(matcherLocation, currentLocation);\n    const hash = encodeHash(rawLocation.hash || '');\n\n    if (hash && !hash.startsWith('#')) {\n      warn(`A \\`hash\\` should always start with the character \"#\". Replace \"${hash}\" with \"#${hash}\".`);\n    } // put back the unencoded params as given by the user (avoid the cost of decoding them)\n\n\n    matchedRoute.params = 'params' in rawLocation ? normalizeParams(rawLocation.params) : decodeParams(matchedRoute.params);\n    const fullPath = stringifyURL(stringifyQuery$1, assign({}, rawLocation, {\n      hash,\n      path: matchedRoute.path\n    }));\n    let href = routerHistory.createHref(fullPath);\n    {\n      if (href.startsWith('//')) warn(`Location \"${rawLocation}\" resolved to \"${href}\". A resolved location cannot start with multiple slashes.`);else if (!matchedRoute.matched.length) {\n        warn(`No match found for location with path \"${'path' in rawLocation ? rawLocation.path : rawLocation}\"`);\n      }\n    }\n    return assign({\n      fullPath,\n      // keep the hash encoded so fullPath is effectively path + encodedQuery +\n      // hash\n      hash,\n      query: // if the user is using a custom query lib like qs, we might have\n      // nested objects, so we keep the query as is, meaning it can contain\n      // numbers at `$route.query`, but at the point, the user will have to\n      // use their own type anyway.\n      // https://github.com/vuejs/vue-router-next/issues/328#issuecomment-649481567\n      stringifyQuery$1 === stringifyQuery ? normalizeQuery(rawLocation.query) : rawLocation.query\n    }, matchedRoute, {\n      redirectedFrom: undefined,\n      href\n    });\n  }\n\n  function locationAsObject(to) {\n    return typeof to === 'string' ? {\n      path: to\n    } : assign({}, to);\n  }\n\n  function checkCanceledNavigation(to, from) {\n    if (pendingLocation !== to) {\n      return createRouterError(8\n      /* NAVIGATION_CANCELLED */\n      , {\n        from,\n        to\n      });\n    }\n  }\n\n  function push(to) {\n    return pushWithRedirect(to);\n  }\n\n  function replace(to) {\n    return push(assign(locationAsObject(to), {\n      replace: true\n    }));\n  }\n\n  function pushWithRedirect(to, redirectedFrom) {\n    const targetLocation = pendingLocation = resolve(to);\n    const from = currentRoute.value;\n    const data = to.state;\n    const force = to.force; // to could be a string where `replace` is a function\n\n    const replace = to.replace === true;\n    const lastMatched = targetLocation.matched[targetLocation.matched.length - 1];\n\n    if (lastMatched && lastMatched.redirect) {\n      const {\n        redirect\n      } = lastMatched; // transform it into an object to pass the original RouteLocaleOptions\n\n      let newTargetLocation = locationAsObject(typeof redirect === 'function' ? redirect(targetLocation) : redirect);\n\n      if (!('path' in newTargetLocation) && !('name' in newTargetLocation)) {\n        warn(`Invalid redirect found:\\n${JSON.stringify(newTargetLocation, null, 2)}\\n when navigating to \"${targetLocation.fullPath}\". A redirect must contain a name or path. This will break in production.`);\n        return Promise.reject(new Error('Invalid redirect'));\n      }\n\n      return pushWithRedirect(assign({\n        query: targetLocation.query,\n        hash: targetLocation.hash,\n        params: targetLocation.params\n      }, newTargetLocation, {\n        state: data,\n        force,\n        replace\n      }), // keep original redirectedFrom if it exists\n      redirectedFrom || targetLocation);\n    } // if it was a redirect we already called `pushWithRedirect` above\n\n\n    const toLocation = targetLocation;\n    toLocation.redirectedFrom = redirectedFrom;\n    let failure;\n\n    if (!force && isSameRouteLocation(stringifyQuery$1, from, targetLocation)) {\n      failure = createRouterError(16\n      /* NAVIGATION_DUPLICATED */\n      , {\n        to: toLocation,\n        from\n      }); // trigger scroll to allow scrolling to the same anchor\n\n      handleScroll(from, from, // this is a push, the only way for it to be triggered from a\n      // history.listen is with a redirect, which makes it become a pus\n      true, // This cannot be the first navigation because the initial location\n      // cannot be manually navigated to\n      false);\n    }\n\n    return (failure ? Promise.resolve(failure) : navigate(toLocation, from)).catch(error => {\n      if (isNavigationFailure(error, 4\n      /* NAVIGATION_ABORTED */\n      | 8\n      /* NAVIGATION_CANCELLED */\n      | 2\n      /* NAVIGATION_GUARD_REDIRECT */\n      )) {\n        return error;\n      } // unknown error, rejects\n\n\n      return triggerError(error);\n    }).then(failure => {\n      if (failure) {\n        if (isNavigationFailure(failure, 2\n        /* NAVIGATION_GUARD_REDIRECT */\n        )) // preserve the original redirectedFrom if any\n          return pushWithRedirect( // keep options\n          assign(locationAsObject(failure.to), {\n            state: data,\n            force,\n            replace\n          }), redirectedFrom || toLocation);\n      } else {\n        // if we fail we don't finalize the navigation\n        failure = finalizeNavigation(toLocation, from, true, replace, data);\n      }\n\n      triggerAfterEach(toLocation, from, failure);\n      return failure;\n    });\n  }\n  /**\r\n   * Helper to reject and skip all navigation guards if a new navigation happened\r\n   * @param to\r\n   * @param from\r\n   */\n\n\n  function checkCanceledNavigationAndReject(to, from) {\n    const error = checkCanceledNavigation(to, from);\n    return error ? Promise.reject(error) : Promise.resolve();\n  } // TODO: refactor the whole before guards by internally using router.beforeEach\n\n\n  function navigate(to, from) {\n    let guards; // all components here have been resolved once because we are leaving\n\n    guards = extractComponentsGuards(from.matched.filter(record => to.matched.indexOf(record) < 0).reverse(), 'beforeRouteLeave', to, from);\n    const [leavingRecords, updatingRecords] = extractChangingRecords(to, from);\n\n    for (const record of leavingRecords) {\n      for (const guard of record.leaveGuards) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n    }\n\n    const canceledNavigationCheck = checkCanceledNavigationAndReject.bind(null, to, from);\n    guards.push(canceledNavigationCheck); // run the queue of per route beforeRouteLeave guards\n\n    return runGuardQueue(guards).then(() => {\n      // check global guards beforeEach\n      guards = [];\n\n      for (const guard of beforeGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n\n      guards.push(canceledNavigationCheck);\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check in components beforeRouteUpdate\n      guards = extractComponentsGuards(to.matched.filter(record => from.matched.indexOf(record) > -1), 'beforeRouteUpdate', to, from);\n\n      for (const record of updatingRecords) {\n        for (const guard of record.updateGuards) {\n          guards.push(guardToPromiseFn(guard, to, from));\n        }\n      }\n\n      guards.push(canceledNavigationCheck); // run the queue of per route beforeEnter guards\n\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check the route beforeEnter\n      guards = [];\n\n      for (const record of to.matched) {\n        // do not trigger beforeEnter on reused views\n        if (record.beforeEnter && from.matched.indexOf(record) < 0) {\n          if (Array.isArray(record.beforeEnter)) {\n            for (const beforeEnter of record.beforeEnter) guards.push(guardToPromiseFn(beforeEnter, to, from));\n          } else {\n            guards.push(guardToPromiseFn(record.beforeEnter, to, from));\n          }\n        }\n      }\n\n      guards.push(canceledNavigationCheck); // run the queue of per route beforeEnter guards\n\n      return runGuardQueue(guards);\n    }).then(() => {\n      // NOTE: at this point to.matched is normalized and does not contain any () => Promise<Component>\n      // clear existing enterCallbacks, these are added by extractComponentsGuards\n      to.matched.forEach(record => record.enterCallbacks = {}); // check in-component beforeRouteEnter\n\n      guards = extractComponentsGuards( // the type doesn't matter as we are comparing an object per reference\n      to.matched.filter(record => from.matched.indexOf(record) < 0), 'beforeRouteEnter', to, from);\n      guards.push(canceledNavigationCheck); // run the queue of per route beforeEnter guards\n\n      return runGuardQueue(guards);\n    }).then(() => {\n      // check global guards beforeResolve\n      guards = [];\n\n      for (const guard of beforeResolveGuards.list()) {\n        guards.push(guardToPromiseFn(guard, to, from));\n      }\n\n      guards.push(canceledNavigationCheck);\n      return runGuardQueue(guards);\n    }) // catch any navigation canceled\n    .catch(err => isNavigationFailure(err, 8\n    /* NAVIGATION_CANCELLED */\n    ) ? err : Promise.reject(err));\n  }\n\n  function triggerAfterEach(to, from, failure) {\n    // navigation is confirmed, call afterGuards\n    // TODO: wrap with error handlers\n    for (const guard of afterGuards.list()) guard(to, from, failure);\n  }\n  /**\r\n   * - Cleans up any navigation guards\r\n   * - Changes the url if necessary\r\n   * - Calls the scrollBehavior\r\n   */\n\n\n  function finalizeNavigation(toLocation, from, isPush, replace, data) {\n    // a more recent navigation took place\n    const error = checkCanceledNavigation(toLocation, from);\n    if (error) return error;\n    const [leavingRecords] = extractChangingRecords(toLocation, from);\n\n    for (const record of leavingRecords) {\n      // remove registered guards from removed matched records\n      record.leaveGuards = [];\n      record.updateGuards = []; // free the references\n\n      record.instances = {};\n      record.enterCallbacks = {};\n    } // only consider as push if it's not the first navigation\n\n\n    const isFirstNavigation = from === START_LOCATION_NORMALIZED;\n    const state = !isBrowser ? {} : history.state; // change URL only if the user did a push/replace and if it's not the initial navigation because\n    // it's just reflecting the url\n\n    if (isPush) {\n      // on the initial navigation, we want to reuse the scroll position from\n      // history state if it exists\n      if (replace || isFirstNavigation) routerHistory.replace(toLocation.fullPath, assign({\n        scroll: isFirstNavigation && state && state.scroll\n      }, data));else routerHistory.push(toLocation.fullPath, data);\n    } // accept current navigation\n\n\n    currentRoute.value = toLocation;\n    handleScroll(toLocation, from, isPush, isFirstNavigation);\n    markAsReady();\n  }\n\n  let removeHistoryListener; // attach listener to history to trigger navigations\n\n  function setupListeners() {\n    removeHistoryListener = routerHistory.listen((to, _from, info) => {\n      // cannot be a redirect route because it was in history\n      const toLocation = resolve(to);\n      pendingLocation = toLocation;\n      const from = currentRoute.value; // TODO: should be moved to web history?\n\n      if (isBrowser) {\n        saveScrollPosition(getScrollKey(from.fullPath, info.delta), computeScrollPosition());\n      }\n\n      navigate(toLocation, from).catch(error => {\n        if (isNavigationFailure(error, 4\n        /* NAVIGATION_ABORTED */\n        | 8\n        /* NAVIGATION_CANCELLED */\n        )) {\n          return error;\n        }\n\n        if (isNavigationFailure(error, 2\n        /* NAVIGATION_GUARD_REDIRECT */\n        )) {\n          // do not restore history on unknown direction\n          if (info.delta) routerHistory.go(-info.delta, false); // the error is already handled by router.push we just want to avoid\n          // logging the error\n\n          pushWithRedirect(error.to, toLocation // avoid an uncaught rejection\n          ).catch(noop); // avoid the then branch\n\n          return Promise.reject();\n        } // do not restore history on unknown direction\n\n\n        if (info.delta) routerHistory.go(-info.delta, false); // unrecognized error, transfer to the global handler\n\n        return triggerError(error);\n      }).then(failure => {\n        failure = failure || finalizeNavigation( // after navigation, all matched components are resolved\n        toLocation, from, false); // revert the navigation\n\n        if (failure && info.delta) routerHistory.go(-info.delta, false);\n        triggerAfterEach(toLocation, from, failure);\n      }).catch(noop);\n    });\n  } // Initialization and Errors\n\n\n  let readyHandlers = useCallbacks();\n  let errorHandlers = useCallbacks();\n  let ready;\n  /**\r\n   * Trigger errorHandlers added via onError and throws the error as well\r\n   * @param error - error to throw\r\n   * @returns the error as a rejected promise\r\n   */\n\n  function triggerError(error) {\n    markAsReady(error);\n    errorHandlers.list().forEach(handler => handler(error));\n    return Promise.reject(error);\n  }\n  /**\r\n   * Returns a Promise that resolves or reject when the router has finished its\r\n   * initial navigation. This will be automatic on client but requires an\r\n   * explicit `router.push` call on the server. This behavior can change\r\n   * depending on the history implementation used e.g. the defaults history\r\n   * implementation (client only) triggers this automatically but the memory one\r\n   * (should be used on server) doesn't\r\n   */\n\n\n  function isReady() {\n    if (ready && currentRoute.value !== START_LOCATION_NORMALIZED) return Promise.resolve();\n    return new Promise((resolve, reject) => {\n      readyHandlers.add([resolve, reject]);\n    });\n  }\n  /**\r\n   * Mark the router as ready, resolving the promised returned by isReady(). Can\r\n   * only be called once, otherwise does nothing.\r\n   * @param err - optional error\r\n   */\n\n\n  function markAsReady(err) {\n    if (ready) return;\n    ready = true;\n    setupListeners();\n    readyHandlers.list().forEach(([resolve, reject]) => err ? reject(err) : resolve());\n    readyHandlers.reset();\n  } // Scroll behavior\n\n\n  function handleScroll(to, from, isPush, isFirstNavigation) {\n    if (!isBrowser || !scrollBehavior) return Promise.resolve();\n    let scrollPosition = !isPush && getSavedScrollPosition(getScrollKey(to.fullPath, 0)) || (isFirstNavigation || !isPush) && history.state && history.state.scroll || null;\n    return Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* nextTick */ \"j\"])().then(() => scrollBehavior(to, from, scrollPosition)).then(position => position && scrollToPosition(position)).catch(triggerError);\n  }\n\n  function go(delta) {\n    return new Promise((resolve, reject) => {\n      let removeError = errorHandlers.add(err => {\n        removeError();\n        removeAfterEach();\n        reject(err);\n      });\n      let removeAfterEach = afterGuards.add((_to, _from, failure) => {\n        removeError();\n        removeAfterEach();\n        resolve(failure);\n      });\n      routerHistory.go(delta);\n    });\n  }\n\n  let started;\n  const installedApps = new Set();\n  const router = {\n    currentRoute,\n    addRoute,\n    removeRoute,\n    hasRoute,\n    getRoutes,\n    resolve,\n    options,\n    push,\n    replace,\n    go,\n    back: () => go(-1),\n    forward: () => go(1),\n    beforeEach: beforeGuards.add,\n    beforeResolve: beforeResolveGuards.add,\n    afterEach: afterGuards.add,\n    onError: errorHandlers.add,\n    isReady,\n\n    install(app) {\n      const router = this;\n      app.component('RouterLink', RouterLink);\n      app.component('RouterView', RouterView);\n      app.config.globalProperties.$router = router;\n      Object.defineProperty(app.config.globalProperties, '$route', {\n        get: () => Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* unref */ \"t\"])(currentRoute)\n      }); // this initial navigation is only necessary on client, on server it doesn't\n      // make sense because it will create an extra unnecessary navigation and could\n      // lead to problems\n\n      if (isBrowser && // used for the initial navigation client side to avoid pushing\n      // multiple times when the router is used in multiple apps\n      !started && currentRoute.value === START_LOCATION_NORMALIZED) {\n        // see above\n        started = true;\n        push(routerHistory.location).catch(err => {\n          warn('Unexpected error when starting the router:', err);\n        });\n      }\n\n      const reactiveRoute = {};\n\n      for (let key in START_LOCATION_NORMALIZED) {\n        // @ts-ignore: the key matches\n        reactiveRoute[key] = Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* computed */ \"a\"])(() => currentRoute.value[key]);\n      }\n\n      app.provide(routerKey, router);\n      app.provide(routeLocationKey, Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* reactive */ \"o\"])(reactiveRoute));\n      let unmountApp = app.unmount;\n      installedApps.add(app);\n\n      app.unmount = function () {\n        installedApps.delete(app);\n\n        if (installedApps.size < 1) {\n          removeHistoryListener();\n          currentRoute.value = START_LOCATION_NORMALIZED;\n          started = false;\n          ready = false;\n        }\n\n        unmountApp.call(this, arguments);\n      };\n    }\n\n  };\n  return router;\n}\n\nfunction runGuardQueue(guards) {\n  return guards.reduce((promise, guard) => promise.then(() => guard()), Promise.resolve());\n}\n\nfunction extractChangingRecords(to, from) {\n  const leavingRecords = [];\n  const updatingRecords = [];\n  const enteringRecords = [];\n  const len = Math.max(from.matched.length, to.matched.length);\n\n  for (let i = 0; i < len; i++) {\n    const recordFrom = from.matched[i];\n\n    if (recordFrom) {\n      if (to.matched.indexOf(recordFrom) < 0) leavingRecords.push(recordFrom);else updatingRecords.push(recordFrom);\n    }\n\n    const recordTo = to.matched[i];\n\n    if (recordTo) {\n      // the type doesn't matter because we are comparing per reference\n      if (from.matched.indexOf(recordTo) < 0) enteringRecords.push(recordTo);\n    }\n  }\n\n  return [leavingRecords, updatingRecords, enteringRecords];\n}\n\nfunction useRouter() {\n  return Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(routerKey);\n}\n\nfunction useRoute() {\n  return Object(vue__WEBPACK_IMPORTED_MODULE_0__[/* inject */ \"i\"])(routeLocationKey);\n}\n\n\n\n//# sourceURL=webpack:////Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/vue-router/dist/vue-router.esm.js?");

/***/ }),

/***/ "../../node_modules/vue/dist/vue.runtime.esm-bundler.js":
/*!******************************************************************************************************************!*\
  !*** /Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/vue/dist/vue.runtime.esm-bundler.js ***!
  \******************************************************************************************************************/
/*! exports provided: customRef, isProxy, isReactive, isReadonly, isRef, markRaw, proxyRefs, reactive, readonly, ref, shallowReactive, shallowReadonly, shallowRef, toRaw, toRef, toRefs, triggerRef, unref, camelize, capitalize, toDisplayString, BaseTransition, Comment, Fragment, KeepAlive, Static, Suspense, Teleport, Text, callWithAsyncErrorHandling, callWithErrorHandling, cloneVNode, computed, createBlock, createCommentVNode, createHydrationRenderer, createRenderer, createSlots, createStaticVNode, createTextVNode, createVNode, defineAsyncComponent, defineComponent, devtools, getCurrentInstance, getTransitionRawChildren, h, handleError, inject, isVNode, mergeProps, nextTick, onActivated, onBeforeMount, onBeforeUnmount, onBeforeUpdate, onDeactivated, onErrorCaptured, onMounted, onRenderTracked, onRenderTriggered, onUnmounted, onUpdated, openBlock, popScopeId, provide, pushScopeId, queuePostFlushCb, registerRuntimeCompiler, renderList, renderSlot, resolveComponent, resolveDirective, resolveDynamicComponent, resolveTransitionHooks, setBlockTracking, setDevtoolsHook, setTransitionHooks, ssrContextKey, ssrUtils, toHandlers, transformVNodeArgs, useSSRContext, useTransitionState, version, warn, watch, watchEffect, withCtx, withDirectives, withScopeId, Transition, TransitionGroup, createApp, createSSRApp, hydrate, render, useCssModule, useCssVars, vModelCheckbox, vModelDynamic, vModelRadio, vModelSelect, vModelText, vShow, withKeys, withModifiers, compile */
/*! exports used: computed, createBlock, createSSRApp, createTextVNode, createVNode, defineComponent, getCurrentInstance, h, inject, nextTick, openBlock, popScopeId, provide, pushScopeId, reactive, ref, resolveComponent, shallowRef, toDisplayString, unref, warn, withScopeId */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* unused harmony export compile */\n/* harmony import */ var _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @vue/runtime-dom */ \"../../node_modules/@vue/runtime-dom/dist/runtime-dom.esm-bundler.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"a\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"b\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"c\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"d\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"e\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"e\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"f\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"f\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"g\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"g\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"h\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"h\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"i\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"i\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"j\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"j\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"k\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"k\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"l\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"l\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"m\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"m\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"n\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"n\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"o\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"o\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"p\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"p\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"q\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"q\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"r\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"s\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"s\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"t\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"t\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"u\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"u\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"v\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"v\", function() { return _vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[\"w\"]; });\n\n/* harmony import */ var _vue_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @vue/shared */ \"../../node_modules/@vue/shared/dist/shared.esm-bundler.js\");\n\n\n\n\nfunction initDev() {\n  const target = Object(_vue_shared__WEBPACK_IMPORTED_MODULE_1__[/* getGlobalThis */ \"i\"])();\n  target.__VUE__ = true;\n  Object(_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[/* setDevtoolsHook */ \"r\"])(target.__VUE_DEVTOOLS_GLOBAL_HOOK__);\n  {\n    console.info(`You are running a development build of Vue.\\n` + `Make sure to use the production build (*.prod.js) when deploying for production.`);\n  }\n} // This entry exports the runtime only, and is built as\n\n\n true && initDev();\n\nconst compile = () => {\n  if (true) {\n    Object(_vue_runtime_dom__WEBPACK_IMPORTED_MODULE_0__[/* warn */ \"v\"])(`Runtime compilation is not supported in this build of Vue.` + ` Configure your bundler to alias \"vue\" to \"vue/dist/vue.esm-bundler.js\".`\n    /* should not happen */\n    );\n  }\n};\n\n\n\n//# sourceURL=webpack:////Users/Guillermo/Documents/projects/xarples/vue-framework/node_modules/vue/dist/vue.runtime.esm-bundler.js?");

/***/ }),

/***/ "../../node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g; // This works in non-strict mode\n\ng = function () {\n  return this;\n}();\n\ntry {\n  // This works if eval is allowed (see CSP)\n  g = g || new Function(\"return this\")();\n} catch (e) {\n  // This works if the window reference is available\n  if (typeof window === \"object\") g = window;\n} // g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\n\nmodule.exports = g;\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ })

}]);